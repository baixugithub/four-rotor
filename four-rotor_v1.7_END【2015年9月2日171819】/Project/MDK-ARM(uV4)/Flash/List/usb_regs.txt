; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\usb_regs.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\usb_regs.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Modules\Modules_ultrasonic -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Flash\Obj\usb_regs.crf ..\..\Libraries\STM32_USB-FS-Device_Driver\src\usb_regs.c]
                          THUMB

                          AREA ||i.ByteSwap||, CODE, READONLY, ALIGN=1

                  ByteSwap PROC
;;;739    *******************************************************************************/
;;;740    uint16_t ByteSwap(uint16_t wSwW)
000000  4601              MOV      r1,r0
;;;741    {
;;;742      uint8_t bTemp;
;;;743      uint16_t wRet;
;;;744      bTemp = (uint8_t)(wSwW & 0xff);
000002  b2ca              UXTB     r2,r1
;;;745      wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
000004  120b              ASRS     r3,r1,#8
000006  ea432002          ORR      r0,r3,r2,LSL #8
;;;746      return(wRet);
;;;747    }
00000a  4770              BX       lr
;;;748    
                          ENDP


                          AREA ||i.ClearDTOG_RX||, CODE, READONLY, ALIGN=2

                  ClearDTOG_RX PROC
;;;421    *******************************************************************************/
;;;422    void ClearDTOG_RX(uint8_t bEpNum)
000000  4909              LDR      r1,|L2.40|
;;;423    {
;;;424      _ClearDTOG_RX(bEpNum);
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  f4114f80          TST      r1,#0x4000
00000a  d00c              BEQ      |L2.38|
00000c  4906              LDR      r1,|L2.40|
00000e  f8511020          LDR      r1,[r1,r0,LSL #2]
000012  b289              UXTH     r1,r1
000014  f648728f          MOV      r2,#0x8f8f
000018  4011              ANDS     r1,r1,r2
00001a  f24c0280          MOV      r2,#0xc080
00001e  4311              ORRS     r1,r1,r2
000020  4a01              LDR      r2,|L2.40|
000022  f8421020          STR      r1,[r2,r0,LSL #2]
                  |L2.38|
;;;425    }
000026  4770              BX       lr
;;;426    /*******************************************************************************
                          ENDP

                  |L2.40|
                          DCD      0x40005c00

                          AREA ||i.ClearDTOG_TX||, CODE, READONLY, ALIGN=2

                  ClearDTOG_TX PROC
;;;432    *******************************************************************************/
;;;433    void ClearDTOG_TX(uint8_t bEpNum)
000000  4909              LDR      r1,|L3.40|
;;;434    {
;;;435      _ClearDTOG_TX(bEpNum);
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  f0110f40          TST      r1,#0x40
00000a  d00c              BEQ      |L3.38|
00000c  4906              LDR      r1,|L3.40|
00000e  f8511020          LDR      r1,[r1,r0,LSL #2]
000012  b289              UXTH     r1,r1
000014  f648728f          MOV      r2,#0x8f8f
000018  4011              ANDS     r1,r1,r2
00001a  f24802c0          MOV      r2,#0x80c0
00001e  4311              ORRS     r1,r1,r2
000020  4a01              LDR      r2,|L3.40|
000022  f8421020          STR      r1,[r2,r0,LSL #2]
                  |L3.38|
;;;436    }
000026  4770              BX       lr
;;;437    /*******************************************************************************
                          ENDP

                  |L3.40|
                          DCD      0x40005c00

                          AREA ||i.ClearEPDoubleBuff||, CODE, READONLY, ALIGN=2

                  ClearEPDoubleBuff PROC
;;;344    *******************************************************************************/
;;;345    void ClearEPDoubleBuff(uint8_t bEpNum)
000000  4906              LDR      r1,|L4.28|
;;;346    {
;;;347      _ClearEP_KIND(bEpNum);
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  b289              UXTH     r1,r1
000008  f648628f          MOV      r2,#0x8e8f
00000c  4011              ANDS     r1,r1,r2
00000e  f2480280          MOV      r2,#0x8080
000012  4311              ORRS     r1,r1,r2
000014  4a01              LDR      r2,|L4.28|
000016  f8421020          STR      r1,[r2,r0,LSL #2]
;;;348    }
00001a  4770              BX       lr
;;;349    /*******************************************************************************
                          ENDP

                  |L4.28|
                          DCD      0x40005c00

                          AREA ||i.ClearEP_CTR_RX||, CODE, READONLY, ALIGN=2

                  ClearEP_CTR_RX PROC
;;;377    *******************************************************************************/
;;;378    void ClearEP_CTR_RX(uint8_t bEpNum)
000000  4905              LDR      r1,|L5.24|
;;;379    {
;;;380      _ClearEP_CTR_RX(bEpNum);
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  f3c1010e          UBFX     r1,r1,#0,#15
00000a  f648728f          MOV      r2,#0x8f8f
00000e  4011              ANDS     r1,r1,r2
000010  4a01              LDR      r2,|L5.24|
000012  f8421020          STR      r1,[r2,r0,LSL #2]
;;;381    }
000016  4770              BX       lr
;;;382    /*******************************************************************************
                          ENDP

                  |L5.24|
                          DCD      0x40005c00

                          AREA ||i.ClearEP_CTR_TX||, CODE, READONLY, ALIGN=2

                  ClearEP_CTR_TX PROC
;;;388    *******************************************************************************/
;;;389    void ClearEP_CTR_TX(uint8_t bEpNum)
000000  4905              LDR      r1,|L6.24|
;;;390    {
;;;391      _ClearEP_CTR_TX(bEpNum);
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  b289              UXTH     r1,r1
000008  f648720f          MOV      r2,#0x8f0f
00000c  4011              ANDS     r1,r1,r2
00000e  4a02              LDR      r2,|L6.24|
000010  f8421020          STR      r1,[r2,r0,LSL #2]
;;;392    }
000014  4770              BX       lr
;;;393    /*******************************************************************************
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0x40005c00

                          AREA ||i.ClearEP_KIND||, CODE, READONLY, ALIGN=2

                  ClearEP_KIND PROC
;;;300    *******************************************************************************/
;;;301    void ClearEP_KIND(uint8_t bEpNum)
000000  4906              LDR      r1,|L7.28|
;;;302    {
;;;303      _ClearEP_KIND(bEpNum);
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  b289              UXTH     r1,r1
000008  f648628f          MOV      r2,#0x8e8f
00000c  4011              ANDS     r1,r1,r2
00000e  f2480280          MOV      r2,#0x8080
000012  4311              ORRS     r1,r1,r2
000014  4a01              LDR      r2,|L7.28|
000016  f8421020          STR      r1,[r2,r0,LSL #2]
;;;304    }
00001a  4770              BX       lr
;;;305    /*******************************************************************************
                          ENDP

                  |L7.28|
                          DCD      0x40005c00

                          AREA ||i.Clear_Status_Out||, CODE, READONLY, ALIGN=2

                  Clear_Status_Out PROC
;;;311    *******************************************************************************/
;;;312    void Clear_Status_Out(uint8_t bEpNum)
000000  4906              LDR      r1,|L8.28|
;;;313    {
;;;314      _ClearEP_KIND(bEpNum);
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  b289              UXTH     r1,r1
000008  f648628f          MOV      r2,#0x8e8f
00000c  4011              ANDS     r1,r1,r2
00000e  f2480280          MOV      r2,#0x8080
000012  4311              ORRS     r1,r1,r2
000014  4a01              LDR      r2,|L8.28|
000016  f8421020          STR      r1,[r2,r0,LSL #2]
;;;315    }
00001a  4770              BX       lr
;;;316    /*******************************************************************************
                          ENDP

                  |L8.28|
                          DCD      0x40005c00

                          AREA ||i.FreeUserBuffer||, CODE, READONLY, ALIGN=2

                  FreeUserBuffer PROC
;;;707    *******************************************************************************/
;;;708    void FreeUserBuffer(uint8_t bEpNum, uint8_t bDir)
000000  2901              CMP      r1,#1
;;;709    {
;;;710      if (bDir == EP_DBUF_OUT)
000002  d10d              BNE      |L9.32|
;;;711      { /* OUT double buffered endpoint */
;;;712        _ToggleDTOG_TX(bEpNum);
000004  4a0e              LDR      r2,|L9.64|
000006  f8522020          LDR      r2,[r2,r0,LSL #2]
00000a  b292              UXTH     r2,r2
00000c  f648738f          MOV      r3,#0x8f8f
000010  401a              ANDS     r2,r2,r3
000012  f24803c0          MOV      r3,#0x80c0
000016  431a              ORRS     r2,r2,r3
000018  4b09              LDR      r3,|L9.64|
00001a  f8432020          STR      r2,[r3,r0,LSL #2]
00001e  e00e              B        |L9.62|
                  |L9.32|
;;;713      }
;;;714      else if (bDir == EP_DBUF_IN)
000020  2902              CMP      r1,#2
000022  d10c              BNE      |L9.62|
;;;715      { /* IN double buffered endpoint */
;;;716        _ToggleDTOG_RX(bEpNum);
000024  4a06              LDR      r2,|L9.64|
000026  f8522020          LDR      r2,[r2,r0,LSL #2]
00002a  b292              UXTH     r2,r2
00002c  f648738f          MOV      r3,#0x8f8f
000030  401a              ANDS     r2,r2,r3
000032  f24c0380          MOV      r3,#0xc080
000036  431a              ORRS     r2,r2,r3
000038  4b01              LDR      r3,|L9.64|
00003a  f8432020          STR      r2,[r3,r0,LSL #2]
                  |L9.62|
;;;717      }
;;;718    }
00003e  4770              BX       lr
;;;719    
                          ENDP

                  |L9.64|
                          DCD      0x40005c00

                          AREA ||i.GetBTABLE||, CODE, READONLY, ALIGN=2

                  GetBTABLE PROC
;;;130    *******************************************************************************/
;;;131    uint16_t GetBTABLE(void)
000000  4801              LDR      r0,|L10.8|
;;;132    {
;;;133      return(_GetBTABLE());
000002  6800              LDR      r0,[r0,#0]
000004  b280              UXTH     r0,r0
;;;134    }
000006  4770              BX       lr
;;;135    
                          ENDP

                  |L10.8|
                          DCD      0x40005c50

                          AREA ||i.GetCNTR||, CODE, READONLY, ALIGN=2

                  GetCNTR PROC
;;;46     *******************************************************************************/
;;;47     uint16_t GetCNTR(void)
000000  4801              LDR      r0,|L11.8|
;;;48     {
;;;49       return(_GetCNTR());
000002  6800              LDR      r0,[r0,#0]
000004  b280              UXTH     r0,r0
;;;50     }
000006  4770              BX       lr
;;;51     
                          ENDP

                  |L11.8|
                          DCD      0x40005c40

                          AREA ||i.GetDADDR||, CODE, READONLY, ALIGN=2

                  GetDADDR PROC
;;;106    *******************************************************************************/
;;;107    uint16_t GetDADDR(void)
000000  4801              LDR      r0,|L12.8|
;;;108    {
;;;109      return(_GetDADDR());
000002  6800              LDR      r0,[r0,#0]
000004  b280              UXTH     r0,r0
;;;110    }
000006  4770              BX       lr
;;;111    
                          ENDP

                  |L12.8|
                          DCD      0x40005c4c

                          AREA ||i.GetENDPOINT||, CODE, READONLY, ALIGN=2

                  GetENDPOINT PROC
;;;155    *******************************************************************************/
;;;156    uint16_t GetENDPOINT(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;157    {
;;;158      return(_GetENDPOINT(bEpNum));
000002  4802              LDR      r0,|L13.12|
000004  f8500021          LDR      r0,[r0,r1,LSL #2]
000008  b280              UXTH     r0,r0
;;;159    }
00000a  4770              BX       lr
;;;160    
                          ENDP

                  |L13.12|
                          DCD      0x40005c00

                          AREA ||i.GetEPAddress||, CODE, READONLY, ALIGN=2

                  GetEPAddress PROC
;;;455    *******************************************************************************/
;;;456    uint8_t GetEPAddress(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;457    {
;;;458      return(_GetEPAddress(bEpNum));
000002  4803              LDR      r0,|L14.16|
000004  f8500021          LDR      r0,[r0,r1,LSL #2]
000008  f000000f          AND      r0,r0,#0xf
;;;459    }
00000c  4770              BX       lr
;;;460    /*******************************************************************************
                          ENDP

00000e  0000              DCW      0x0000
                  |L14.16|
                          DCD      0x40005c00

                          AREA ||i.GetEPDblBuf0Addr||, CODE, READONLY, ALIGN=2

                  GetEPDblBuf0Addr PROC
;;;607    *******************************************************************************/
;;;608    uint16_t GetEPDblBuf0Addr(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;609    {
;;;610      return(_GetEPDblBuf0Addr(bEpNum));
000002  4805              LDR      r0,|L15.24|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  4a03              LDR      r2,|L15.28|
00000e  f8520010          LDR      r0,[r2,r0,LSL #1]
000012  b280              UXTH     r0,r0
;;;611    }
000014  4770              BX       lr
;;;612    /*******************************************************************************
                          ENDP

000016  0000              DCW      0x0000
                  |L15.24|
                          DCD      0x40005c50
                  |L15.28|
                          DCD      0x40006000

                          AREA ||i.GetEPDblBuf0Count||, CODE, READONLY, ALIGN=2

                  GetEPDblBuf0Count PROC
;;;666    *******************************************************************************/
;;;667    uint16_t GetEPDblBuf0Count(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;668    {
;;;669      return(_GetEPDblBuf0Count(bEpNum));
000002  4806              LDR      r0,|L16.28|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  1c80              ADDS     r0,r0,#2
00000e  4a04              LDR      r2,|L16.32|
000010  f8520010          LDR      r0,[r2,r0,LSL #1]
000014  f3c00009          UBFX     r0,r0,#0,#10
;;;670    }
000018  4770              BX       lr
;;;671    /*******************************************************************************
                          ENDP

00001a  0000              DCW      0x0000
                  |L16.28|
                          DCD      0x40005c50
                  |L16.32|
                          DCD      0x40006000

                          AREA ||i.GetEPDblBuf1Addr||, CODE, READONLY, ALIGN=2

                  GetEPDblBuf1Addr PROC
;;;618    *******************************************************************************/
;;;619    uint16_t GetEPDblBuf1Addr(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;620    {
;;;621      return(_GetEPDblBuf1Addr(bEpNum));
000002  4805              LDR      r0,|L17.24|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  1d00              ADDS     r0,r0,#4
00000e  4a03              LDR      r2,|L17.28|
000010  f8520010          LDR      r0,[r2,r0,LSL #1]
000014  b280              UXTH     r0,r0
;;;622    }
000016  4770              BX       lr
;;;623    /*******************************************************************************
                          ENDP

                  |L17.24|
                          DCD      0x40005c50
                  |L17.28|
                          DCD      0x40006000

                          AREA ||i.GetEPDblBuf1Count||, CODE, READONLY, ALIGN=2

                  GetEPDblBuf1Count PROC
;;;678    *******************************************************************************/
;;;679    uint16_t GetEPDblBuf1Count(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;680    {
;;;681      return(_GetEPDblBuf1Count(bEpNum));
000002  4806              LDR      r0,|L18.28|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  1d80              ADDS     r0,r0,#6
00000e  4a04              LDR      r2,|L18.32|
000010  f8520010          LDR      r0,[r2,r0,LSL #1]
000014  f3c00009          UBFX     r0,r0,#0,#10
;;;682    }
000018  4770              BX       lr
;;;683    /*******************************************************************************
                          ENDP

00001a  0000              DCW      0x0000
                  |L18.28|
                          DCD      0x40005c50
                  |L18.32|
                          DCD      0x40006000

                          AREA ||i.GetEPDblBufDir||, CODE, READONLY, ALIGN=2

                  GetEPDblBufDir PROC
;;;690    *******************************************************************************/
;;;691    EP_DBUF_DIR GetEPDblBufDir(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;692    {
;;;693      if ((uint16_t)(*_pEPRxCount(bEpNum) & 0xFC00) != 0)
000002  480f              LDR      r0,|L19.64|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  1d80              ADDS     r0,r0,#6
00000e  4a0d              LDR      r2,|L19.68|
000010  f8520010          LDR      r0,[r2,r0,LSL #1]
000014  f4104f7c          TST      r0,#0xfc00
000018  d001              BEQ      |L19.30|
;;;694        return(EP_DBUF_OUT);
00001a  2001              MOVS     r0,#1
                  |L19.28|
;;;695      else if (((uint16_t)(*_pEPTxCount(bEpNum)) & 0x03FF) != 0)
;;;696        return(EP_DBUF_IN);
;;;697      else
;;;698        return(EP_DBUF_ERR);
;;;699    }
00001c  4770              BX       lr
                  |L19.30|
00001e  4808              LDR      r0,|L19.64|
000020  6800              LDR      r0,[r0,#0]            ;695
000022  b280              UXTH     r0,r0                 ;695
000024  eb0000c1          ADD      r0,r0,r1,LSL #3       ;695
000028  1c80              ADDS     r0,r0,#2              ;695
00002a  4a06              LDR      r2,|L19.68|
00002c  f8520010          LDR      r0,[r2,r0,LSL #1]     ;695
000030  0580              LSLS     r0,r0,#22             ;695
000032  0d80              LSRS     r0,r0,#22             ;695
000034  d001              BEQ      |L19.58|
000036  2002              MOVS     r0,#2                 ;696
000038  e7f0              B        |L19.28|
                  |L19.58|
00003a  2000              MOVS     r0,#0                 ;698
00003c  e7ee              B        |L19.28|
;;;700    /*******************************************************************************
                          ENDP

00003e  0000              DCW      0x0000
                  |L19.64|
                          DCD      0x40005c50
                  |L19.68|
                          DCD      0x40006000

                          AREA ||i.GetEPRxAddr||, CODE, READONLY, ALIGN=2

                  GetEPRxAddr PROC
;;;501    *******************************************************************************/
;;;502    uint16_t GetEPRxAddr(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;503    {
;;;504      return(_GetEPRxAddr(bEpNum));
000002  4805              LDR      r0,|L20.24|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  1d00              ADDS     r0,r0,#4
00000e  4a03              LDR      r2,|L20.28|
000010  f8520010          LDR      r0,[r2,r0,LSL #1]
000014  b280              UXTH     r0,r0
;;;505    }
000016  4770              BX       lr
;;;506    /*******************************************************************************
                          ENDP

                  |L20.24|
                          DCD      0x40005c50
                  |L20.28|
                          DCD      0x40006000

                          AREA ||i.GetEPRxCount||, CODE, READONLY, ALIGN=2

                  GetEPRxCount PROC
;;;559    *******************************************************************************/
;;;560    uint16_t GetEPRxCount(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;561    {
;;;562      return(_GetEPRxCount(bEpNum));
000002  4806              LDR      r0,|L21.28|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  1d80              ADDS     r0,r0,#6
00000e  4a04              LDR      r2,|L21.32|
000010  f8520010          LDR      r0,[r2,r0,LSL #1]
000014  f3c00009          UBFX     r0,r0,#0,#10
;;;563    }
000018  4770              BX       lr
;;;564    /*******************************************************************************
                          ENDP

00001a  0000              DCW      0x0000
                  |L21.28|
                          DCD      0x40005c50
                  |L21.32|
                          DCD      0x40006000

                          AREA ||i.GetEPRxStatus||, CODE, READONLY, ALIGN=2

                  GetEPRxStatus PROC
;;;252    *******************************************************************************/
;;;253    uint16_t GetEPRxStatus(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;254    {
;;;255      return(_GetEPRxStatus(bEpNum));
000002  4803              LDR      r0,|L22.16|
000004  f8500021          LDR      r0,[r0,r1,LSL #2]
000008  f4005040          AND      r0,r0,#0x3000
;;;256    }
00000c  4770              BX       lr
;;;257    
                          ENDP

00000e  0000              DCW      0x0000
                  |L22.16|
                          DCD      0x40005c00

                          AREA ||i.GetEPTxAddr||, CODE, READONLY, ALIGN=2

                  GetEPTxAddr PROC
;;;490    *******************************************************************************/
;;;491    uint16_t GetEPTxAddr(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;492    {
;;;493      return(_GetEPTxAddr(bEpNum));
000002  4805              LDR      r0,|L23.24|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  4a03              LDR      r2,|L23.28|
00000e  f8520010          LDR      r0,[r2,r0,LSL #1]
000012  b280              UXTH     r0,r0
;;;494    }
000014  4770              BX       lr
;;;495    /*******************************************************************************
                          ENDP

000016  0000              DCW      0x0000
                  |L23.24|
                          DCD      0x40005c50
                  |L23.28|
                          DCD      0x40006000

                          AREA ||i.GetEPTxCount||, CODE, READONLY, ALIGN=2

                  GetEPTxCount PROC
;;;548    *******************************************************************************/
;;;549    uint16_t GetEPTxCount(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;550    {
;;;551      return(_GetEPTxCount(bEpNum));
000002  4806              LDR      r0,|L24.28|
000004  6800              LDR      r0,[r0,#0]
000006  b280              UXTH     r0,r0
000008  eb0000c1          ADD      r0,r0,r1,LSL #3
00000c  1c80              ADDS     r0,r0,#2
00000e  4a04              LDR      r2,|L24.32|
000010  f8520010          LDR      r0,[r2,r0,LSL #1]
000014  f3c00009          UBFX     r0,r0,#0,#10
;;;552    }
000018  4770              BX       lr
;;;553    /*******************************************************************************
                          ENDP

00001a  0000              DCW      0x0000
                  |L24.28|
                          DCD      0x40005c50
                  |L24.32|
                          DCD      0x40006000

                          AREA ||i.GetEPTxStatus||, CODE, READONLY, ALIGN=2

                  GetEPTxStatus PROC
;;;240    *******************************************************************************/
;;;241    uint16_t GetEPTxStatus(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;242    {
;;;243      return(_GetEPTxStatus(bEpNum));
000002  4803              LDR      r0,|L25.16|
000004  f8500021          LDR      r0,[r0,r1,LSL #2]
000008  f0000030          AND      r0,r0,#0x30
;;;244    }
00000c  4770              BX       lr
;;;245    
                          ENDP

00000e  0000              DCW      0x0000
                  |L25.16|
                          DCD      0x40005c00

                          AREA ||i.GetEPType||, CODE, READONLY, ALIGN=2

                  GetEPType PROC
;;;180    *******************************************************************************/
;;;181    uint16_t GetEPType(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;182    {
;;;183      return(_GetEPType(bEpNum));
000002  4803              LDR      r0,|L26.16|
000004  f8500021          LDR      r0,[r0,r1,LSL #2]
000008  f40060c0          AND      r0,r0,#0x600
;;;184    }
00000c  4770              BX       lr
;;;185    
                          ENDP

00000e  0000              DCW      0x0000
                  |L26.16|
                          DCD      0x40005c00

                          AREA ||i.GetFNR||, CODE, READONLY, ALIGN=2

                  GetFNR PROC
;;;82     *******************************************************************************/
;;;83     uint16_t GetFNR(void)
000000  4801              LDR      r0,|L27.8|
;;;84     {
;;;85       return(_GetFNR());
000002  6800              LDR      r0,[r0,#0]
000004  b280              UXTH     r0,r0
;;;86     }
000006  4770              BX       lr
;;;87     
                          ENDP

                  |L27.8|
                          DCD      0x40005c48

                          AREA ||i.GetISTR||, CODE, READONLY, ALIGN=2

                  GetISTR PROC
;;;70     *******************************************************************************/
;;;71     uint16_t GetISTR(void)
000000  4801              LDR      r0,|L28.8|
;;;72     {
;;;73       return(_GetISTR());
000002  6800              LDR      r0,[r0,#0]
000004  b280              UXTH     r0,r0
;;;74     }
000006  4770              BX       lr
;;;75     
                          ENDP

                  |L28.8|
                          DCD      0x40005c44

                          AREA ||i.GetRxStallStatus||, CODE, READONLY, ALIGN=2

                  GetRxStallStatus PROC
;;;366    *******************************************************************************/
;;;367    uint16_t GetRxStallStatus(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;368    {
;;;369      return(_GetRxStallStatus(bEpNum));
000002  4806              LDR      r0,|L29.28|
000004  f8500021          LDR      r0,[r0,r1,LSL #2]
000008  f4005040          AND      r0,r0,#0x3000
00000c  f5b05f80          CMP      r0,#0x1000
000010  d101              BNE      |L29.22|
000012  2001              MOVS     r0,#1
                  |L29.20|
;;;370    }
000014  4770              BX       lr
                  |L29.22|
000016  2000              MOVS     r0,#0                 ;369
000018  e7fc              B        |L29.20|
;;;371    /*******************************************************************************
                          ENDP

00001a  0000              DCW      0x0000
                  |L29.28|
                          DCD      0x40005c00

                          AREA ||i.GetTxStallStatus||, CODE, READONLY, ALIGN=2

                  GetTxStallStatus PROC
;;;355    *******************************************************************************/
;;;356    uint16_t GetTxStallStatus(uint8_t bEpNum)
000000  4601              MOV      r1,r0
;;;357    {
;;;358      return(_GetTxStallStatus(bEpNum));
000002  4805              LDR      r0,|L30.24|
000004  f8500021          LDR      r0,[r0,r1,LSL #2]
000008  f0000030          AND      r0,r0,#0x30
00000c  2810              CMP      r0,#0x10
00000e  d101              BNE      |L30.20|
000010  2001              MOVS     r0,#1
                  |L30.18|
;;;359    }
000012  4770              BX       lr
                  |L30.20|
000014  2000              MOVS     r0,#0                 ;358
000016  e7fc              B        |L30.18|
;;;360    /*******************************************************************************
                          ENDP

                  |L30.24|
                          DCD      0x40005c00

                          AREA ||i.SetBTABLE||, CODE, READONLY, ALIGN=2

                  SetBTABLE PROC
;;;118    *******************************************************************************/
;;;119    void SetBTABLE(uint16_t wRegValue)
000000  f64f71f8          MOV      r1,#0xfff8
;;;120    {
;;;121      _SetBTABLE(wRegValue);
000004  4001              ANDS     r1,r1,r0
000006  4a01              LDR      r2,|L31.12|
000008  6011              STR      r1,[r2,#0]
;;;122    }
00000a  4770              BX       lr
;;;123    
                          ENDP

                  |L31.12|
                          DCD      0x40005c50

                          AREA ||i.SetCNTR||, CODE, READONLY, ALIGN=2

                  SetCNTR PROC
;;;34     *******************************************************************************/
;;;35     void SetCNTR(uint16_t wRegValue)
000000  4901              LDR      r1,|L32.8|
;;;36     {
;;;37       _SetCNTR(wRegValue);
000002  6008              STR      r0,[r1,#0]
;;;38     }
000004  4770              BX       lr
;;;39     
                          ENDP

000006  0000              DCW      0x0000
                  |L32.8|
                          DCD      0x40005c40

                          AREA ||i.SetDADDR||, CODE, READONLY, ALIGN=2

                  SetDADDR PROC
;;;94     *******************************************************************************/
;;;95     void SetDADDR(uint16_t wRegValue)
000000  4901              LDR      r1,|L33.8|
;;;96     {
;;;97       _SetDADDR(wRegValue);
000002  6008              STR      r0,[r1,#0]
;;;98     }
000004  4770              BX       lr
;;;99     
                          ENDP

000006  0000              DCW      0x0000
                  |L33.8|
                          DCD      0x40005c4c

                          AREA ||i.SetDouBleBuffEPStall||, CODE, READONLY, ALIGN=2

                  SetDouBleBuffEPStall PROC
;;;219    *******************************************************************************/
;;;220    void SetDouBleBuffEPStall(uint8_t bEpNum, uint8_t bDir)
000000  b510              PUSH     {r4,lr}
;;;221    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;222      uint16_t Endpoint_DTOG_Status;
;;;223      Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
000006  4610              MOV      r0,r2
000008  f7fffffe          BL       GetENDPOINT
00000c  4604              MOV      r4,r0
;;;224      if (bDir == EP_DBUF_OUT)
00000e  2b01              CMP      r3,#1
000010  d105              BNE      |L34.30|
;;;225      { /* OUT double buffered endpoint */
;;;226        _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPRX_DTOG1);
000012  f4245080          BIC      r0,r4,#0x1000
000016  4906              LDR      r1,|L34.48|
000018  f8410022          STR      r0,[r1,r2,LSL #2]
00001c  e006              B        |L34.44|
                  |L34.30|
;;;227      }
;;;228      else if (bDir == EP_DBUF_IN)
00001e  2b02              CMP      r3,#2
000020  d104              BNE      |L34.44|
;;;229      { /* IN double buffered endpoint */
;;;230        _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPTX_DTOG1);
000022  f0240010          BIC      r0,r4,#0x10
000026  4902              LDR      r1,|L34.48|
000028  f8410022          STR      r0,[r1,r2,LSL #2]
                  |L34.44|
;;;231      }
;;;232    }
00002c  bd10              POP      {r4,pc}
;;;233    
                          ENDP

00002e  0000              DCW      0x0000
                  |L34.48|
                          DCD      0x40005c00

                          AREA ||i.SetENDPOINT||, CODE, READONLY, ALIGN=2

                  SetENDPOINT PROC
;;;143    *******************************************************************************/
;;;144    void SetENDPOINT(uint8_t bEpNum, uint16_t wRegValue)
000000  4a01              LDR      r2,|L35.8|
;;;145    {
;;;146      _SetENDPOINT(bEpNum, wRegValue);
000002  f8421020          STR      r1,[r2,r0,LSL #2]
;;;147    }
000006  4770              BX       lr
;;;148    
                          ENDP

                  |L35.8|
                          DCD      0x40005c00

                          AREA ||i.SetEPAddress||, CODE, READONLY, ALIGN=2

                  SetEPAddress PROC
;;;444    *******************************************************************************/
;;;445    void SetEPAddress(uint8_t bEpNum, uint8_t bAddr)
000000  4a07              LDR      r2,|L36.32|
;;;446    {
;;;447      _SetEPAddress(bEpNum, bAddr);
000002  f8522020          LDR      r2,[r2,r0,LSL #2]
000006  b292              UXTH     r2,r2
000008  f648738f          MOV      r3,#0x8f8f
00000c  401a              ANDS     r2,r2,r3
00000e  f2480380          MOV      r3,#0x8080
000012  431a              ORRS     r2,r2,r3
000014  430a              ORRS     r2,r2,r1
000016  4b02              LDR      r3,|L36.32|
000018  f8432020          STR      r2,[r3,r0,LSL #2]
;;;448    }
00001c  4770              BX       lr
;;;449    /*******************************************************************************
                          ENDP

00001e  0000              DCW      0x0000
                  |L36.32|
                          DCD      0x40005c00

                          AREA ||i.SetEPCountRxReg||, CODE, READONLY, ALIGN=1

                  SetEPCountRxReg PROC
;;;525    *******************************************************************************/
;;;526    void SetEPCountRxReg(uint32_t *pdwReg, uint16_t wCount)
000000  4602              MOV      r2,r0
;;;527    {
;;;528      _SetEPCountRxReg(dwReg, wCount);
000002  293e              CMP      r1,#0x3e
000004  dd0b              BLE      |L37.30|
000006  1148              ASRS     r0,r1,#5
000008  f0110f1f          TST      r1,#0x1f
00000c  d101              BNE      |L37.18|
00000e  1e43              SUBS     r3,r0,#1
000010  b298              UXTH     r0,r3
                  |L37.18|
000012  f44f4300          MOV      r3,#0x8000
000016  ea432380          ORR      r3,r3,r0,LSL #10
00001a  6013              STR      r3,[r2,#0]
00001c  e007              B        |L37.46|
                  |L37.30|
00001e  1048              ASRS     r0,r1,#1
000020  f0110f01          TST      r1,#1
000024  d001              BEQ      |L37.42|
000026  1c43              ADDS     r3,r0,#1
000028  b298              UXTH     r0,r3
                  |L37.42|
00002a  0283              LSLS     r3,r0,#10
00002c  6013              STR      r3,[r2,#0]
                  |L37.46|
;;;529    }
00002e  4770              BX       lr
;;;530    /*******************************************************************************
                          ENDP


                          AREA ||i.SetEPDblBuf0Addr||, CODE, READONLY, ALIGN=2

                  SetEPDblBuf0Addr PROC
;;;584    *******************************************************************************/
;;;585    void SetEPDblBuf0Addr(uint8_t bEpNum, uint16_t wBuf0Addr)
000000  b510              PUSH     {r4,lr}
;;;586    {
;;;587      _SetEPDblBuf0Addr(bEpNum, wBuf0Addr);
000002  104a              ASRS     r2,r1,#1
000004  0053              LSLS     r3,r2,#1
000006  4a04              LDR      r2,|L38.24|
000008  6812              LDR      r2,[r2,#0]
00000a  b292              UXTH     r2,r2
00000c  eb0202c0          ADD      r2,r2,r0,LSL #3
000010  4c02              LDR      r4,|L38.28|
000012  f8443012          STR      r3,[r4,r2,LSL #1]
;;;588    }
000016  bd10              POP      {r4,pc}
;;;589    /*******************************************************************************
                          ENDP

                  |L38.24|
                          DCD      0x40005c50
                  |L38.28|
                          DCD      0x40006000

                          AREA ||i.SetEPDblBuf0Count||, CODE, READONLY, ALIGN=2

                  SetEPDblBuf0Count PROC
;;;642    *******************************************************************************/
;;;643    void SetEPDblBuf0Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
000000  b530              PUSH     {r4,r5,lr}
;;;644    {
000002  4603              MOV      r3,r0
;;;645      _SetEPDblBuf0Count(bEpNum, bDir, wCount);
000004  2901              CMP      r1,#1
000006  d11f              BNE      |L39.72|
000008  4815              LDR      r0,|L39.96|
00000a  6800              LDR      r0,[r0,#0]
00000c  b280              UXTH     r0,r0
00000e  eb0000c3          ADD      r0,r0,r3,LSL #3
000012  1c80              ADDS     r0,r0,#2
000014  4d13              LDR      r5,|L39.100|
000016  eb050440          ADD      r4,r5,r0,LSL #1
00001a  2a3e              CMP      r2,#0x3e
00001c  dd0b              BLE      |L39.54|
00001e  1150              ASRS     r0,r2,#5
000020  f0120f1f          TST      r2,#0x1f
000024  d101              BNE      |L39.42|
000026  1e45              SUBS     r5,r0,#1
000028  b2a8              UXTH     r0,r5
                  |L39.42|
00002a  f44f4500          MOV      r5,#0x8000
00002e  ea452580          ORR      r5,r5,r0,LSL #10
000032  6025              STR      r5,[r4,#0]
000034  e007              B        |L39.70|
                  |L39.54|
000036  1050              ASRS     r0,r2,#1
000038  f0120f01          TST      r2,#1
00003c  d001              BEQ      |L39.66|
00003e  1c45              ADDS     r5,r0,#1
000040  b2a8              UXTH     r0,r5
                  |L39.66|
000042  0285              LSLS     r5,r0,#10
000044  6025              STR      r5,[r4,#0]
                  |L39.70|
000046  e00a              B        |L39.94|
                  |L39.72|
000048  2902              CMP      r1,#2
00004a  d108              BNE      |L39.94|
00004c  4804              LDR      r0,|L39.96|
00004e  6800              LDR      r0,[r0,#0]
000050  b280              UXTH     r0,r0
000052  eb0000c3          ADD      r0,r0,r3,LSL #3
000056  1c80              ADDS     r0,r0,#2
000058  4c02              LDR      r4,|L39.100|
00005a  f8442010          STR      r2,[r4,r0,LSL #1]
                  |L39.94|
;;;646    }
00005e  bd30              POP      {r4,r5,pc}
;;;647    /*******************************************************************************
                          ENDP

                  |L39.96|
                          DCD      0x40005c50
                  |L39.100|
                          DCD      0x40006000

                          AREA ||i.SetEPDblBuf1Addr||, CODE, READONLY, ALIGN=2

                  SetEPDblBuf1Addr PROC
;;;596    *******************************************************************************/
;;;597    void SetEPDblBuf1Addr(uint8_t bEpNum, uint16_t wBuf1Addr)
000000  b510              PUSH     {r4,lr}
;;;598    {
;;;599      _SetEPDblBuf1Addr(bEpNum, wBuf1Addr);
000002  104a              ASRS     r2,r1,#1
000004  0053              LSLS     r3,r2,#1
000006  4a05              LDR      r2,|L40.28|
000008  6812              LDR      r2,[r2,#0]
00000a  b292              UXTH     r2,r2
00000c  eb0202c0          ADD      r2,r2,r0,LSL #3
000010  1d12              ADDS     r2,r2,#4
000012  4c03              LDR      r4,|L40.32|
000014  f8443012          STR      r3,[r4,r2,LSL #1]
;;;600    }
000018  bd10              POP      {r4,pc}
;;;601    /*******************************************************************************
                          ENDP

00001a  0000              DCW      0x0000
                  |L40.28|
                          DCD      0x40005c50
                  |L40.32|
                          DCD      0x40006000

                          AREA ||i.SetEPDblBuf1Count||, CODE, READONLY, ALIGN=2

                  SetEPDblBuf1Count PROC
;;;654    *******************************************************************************/
;;;655    void SetEPDblBuf1Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
000000  b530              PUSH     {r4,r5,lr}
;;;656    {
000002  4603              MOV      r3,r0
;;;657      _SetEPDblBuf1Count(bEpNum, bDir, wCount);
000004  2901              CMP      r1,#1
000006  d11f              BNE      |L41.72|
000008  4815              LDR      r0,|L41.96|
00000a  6800              LDR      r0,[r0,#0]
00000c  b280              UXTH     r0,r0
00000e  eb0000c3          ADD      r0,r0,r3,LSL #3
000012  1d80              ADDS     r0,r0,#6
000014  4d13              LDR      r5,|L41.100|
000016  eb050440          ADD      r4,r5,r0,LSL #1
00001a  2a3e              CMP      r2,#0x3e
00001c  dd0b              BLE      |L41.54|
00001e  1150              ASRS     r0,r2,#5
000020  f0120f1f          TST      r2,#0x1f
000024  d101              BNE      |L41.42|
000026  1e45              SUBS     r5,r0,#1
000028  b2a8              UXTH     r0,r5
                  |L41.42|
00002a  f44f4500          MOV      r5,#0x8000
00002e  ea452580          ORR      r5,r5,r0,LSL #10
000032  6025              STR      r5,[r4,#0]
000034  e007              B        |L41.70|
                  |L41.54|
000036  1050              ASRS     r0,r2,#1
000038  f0120f01          TST      r2,#1
00003c  d001              BEQ      |L41.66|
00003e  1c45              ADDS     r5,r0,#1
000040  b2a8              UXTH     r0,r5
                  |L41.66|
000042  0285              LSLS     r5,r0,#10
000044  6025              STR      r5,[r4,#0]
                  |L41.70|
000046  e00a              B        |L41.94|
                  |L41.72|
000048  2902              CMP      r1,#2
00004a  d108              BNE      |L41.94|
00004c  4804              LDR      r0,|L41.96|
00004e  6800              LDR      r0,[r0,#0]
000050  b280              UXTH     r0,r0
000052  eb0000c3          ADD      r0,r0,r3,LSL #3
000056  1d80              ADDS     r0,r0,#6
000058  4c02              LDR      r4,|L41.100|
00005a  f8442010          STR      r2,[r4,r0,LSL #1]
                  |L41.94|
;;;658    }
00005e  bd30              POP      {r4,r5,pc}
;;;659    /*******************************************************************************
                          ENDP

                  |L41.96|
                          DCD      0x40005c50
                  |L41.100|
                          DCD      0x40006000

                          AREA ||i.SetEPDblBuffAddr||, CODE, READONLY, ALIGN=2

                  SetEPDblBuffAddr PROC
;;;572    *******************************************************************************/
;;;573    void SetEPDblBuffAddr(uint8_t bEpNum, uint16_t wBuf0Addr, uint16_t wBuf1Addr)
000000  b530              PUSH     {r4,r5,lr}
;;;574    {
;;;575      _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
000002  104b              ASRS     r3,r1,#1
000004  005c              LSLS     r4,r3,#1
000006  4b09              LDR      r3,|L42.44|
000008  681b              LDR      r3,[r3,#0]
00000a  b29b              UXTH     r3,r3
00000c  eb0303c0          ADD      r3,r3,r0,LSL #3
000010  4d07              LDR      r5,|L42.48|
000012  f8454013          STR      r4,[r5,r3,LSL #1]
000016  1053              ASRS     r3,r2,#1
000018  005c              LSLS     r4,r3,#1
00001a  4b04              LDR      r3,|L42.44|
00001c  681b              LDR      r3,[r3,#0]
00001e  b29b              UXTH     r3,r3
000020  eb0303c0          ADD      r3,r3,r0,LSL #3
000024  1d1b              ADDS     r3,r3,#4
000026  f8454013          STR      r4,[r5,r3,LSL #1]
;;;576    }
00002a  bd30              POP      {r4,r5,pc}
;;;577    /*******************************************************************************
                          ENDP

                  |L42.44|
                          DCD      0x40005c50
                  |L42.48|
                          DCD      0x40006000

                          AREA ||i.SetEPDblBuffCount||, CODE, READONLY, ALIGN=2

                  SetEPDblBuffCount PROC
;;;630    *******************************************************************************/
;;;631    void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
000000  b530              PUSH     {r4,r5,lr}
;;;632    {
000002  460b              MOV      r3,r1
;;;633      _SetEPDblBuffCount(bEpNum, bDir, wCount);
000004  2b01              CMP      r3,#1
000006  d11f              BNE      |L43.72|
000008  492c              LDR      r1,|L43.188|
00000a  6809              LDR      r1,[r1,#0]
00000c  b289              UXTH     r1,r1
00000e  eb0101c0          ADD      r1,r1,r0,LSL #3
000012  1c89              ADDS     r1,r1,#2
000014  4d2a              LDR      r5,|L43.192|
000016  eb050441          ADD      r4,r5,r1,LSL #1
00001a  2a3e              CMP      r2,#0x3e
00001c  dd0b              BLE      |L43.54|
00001e  1151              ASRS     r1,r2,#5
000020  f0120f1f          TST      r2,#0x1f
000024  d101              BNE      |L43.42|
000026  1e4d              SUBS     r5,r1,#1
000028  b2a9              UXTH     r1,r5
                  |L43.42|
00002a  f44f4500          MOV      r5,#0x8000
00002e  ea452581          ORR      r5,r5,r1,LSL #10
000032  6025              STR      r5,[r4,#0]
000034  e007              B        |L43.70|
                  |L43.54|
000036  1051              ASRS     r1,r2,#1
000038  f0120f01          TST      r2,#1
00003c  d001              BEQ      |L43.66|
00003e  1c4d              ADDS     r5,r1,#1
000040  b2a9              UXTH     r1,r5
                  |L43.66|
000042  028d              LSLS     r5,r1,#10
000044  6025              STR      r5,[r4,#0]
                  |L43.70|
000046  e00a              B        |L43.94|
                  |L43.72|
000048  2b02              CMP      r3,#2
00004a  d108              BNE      |L43.94|
00004c  491b              LDR      r1,|L43.188|
00004e  6809              LDR      r1,[r1,#0]
000050  b289              UXTH     r1,r1
000052  eb0101c0          ADD      r1,r1,r0,LSL #3
000056  1c89              ADDS     r1,r1,#2
000058  4c19              LDR      r4,|L43.192|
00005a  f8442011          STR      r2,[r4,r1,LSL #1]
                  |L43.94|
00005e  2b01              CMP      r3,#1
000060  d11f              BNE      |L43.162|
000062  4916              LDR      r1,|L43.188|
000064  6809              LDR      r1,[r1,#0]
000066  b289              UXTH     r1,r1
000068  eb0101c0          ADD      r1,r1,r0,LSL #3
00006c  1d89              ADDS     r1,r1,#6
00006e  4d14              LDR      r5,|L43.192|
000070  eb050441          ADD      r4,r5,r1,LSL #1
000074  2a3e              CMP      r2,#0x3e
000076  dd0b              BLE      |L43.144|
000078  1151              ASRS     r1,r2,#5
00007a  f0120f1f          TST      r2,#0x1f
00007e  d101              BNE      |L43.132|
000080  1e4d              SUBS     r5,r1,#1
000082  b2a9              UXTH     r1,r5
                  |L43.132|
000084  f44f4500          MOV      r5,#0x8000
000088  ea452581          ORR      r5,r5,r1,LSL #10
00008c  6025              STR      r5,[r4,#0]
00008e  e007              B        |L43.160|
                  |L43.144|
000090  1051              ASRS     r1,r2,#1
000092  f0120f01          TST      r2,#1
000096  d001              BEQ      |L43.156|
000098  1c4d              ADDS     r5,r1,#1
00009a  b2a9              UXTH     r1,r5
                  |L43.156|
00009c  028d              LSLS     r5,r1,#10
00009e  6025              STR      r5,[r4,#0]
                  |L43.160|
0000a0  e00a              B        |L43.184|
                  |L43.162|
0000a2  2b02              CMP      r3,#2
0000a4  d108              BNE      |L43.184|
0000a6  4905              LDR      r1,|L43.188|
0000a8  6809              LDR      r1,[r1,#0]
0000aa  b289              UXTH     r1,r1
0000ac  eb0101c0          ADD      r1,r1,r0,LSL #3
0000b0  1d89              ADDS     r1,r1,#6
0000b2  4c03              LDR      r4,|L43.192|
0000b4  f8442011          STR      r2,[r4,r1,LSL #1]
                  |L43.184|
;;;634    }
0000b8  bd30              POP      {r4,r5,pc}
;;;635    /*******************************************************************************
                          ENDP

0000ba  0000              DCW      0x0000
                  |L43.188|
                          DCD      0x40005c50
                  |L43.192|
                          DCD      0x40006000

                          AREA ||i.SetEPDoubleBuff||, CODE, READONLY, ALIGN=2

                  SetEPDoubleBuff PROC
;;;333    *******************************************************************************/
;;;334    void SetEPDoubleBuff(uint8_t bEpNum)
000000  4907              LDR      r1,|L44.32|
;;;335    {
;;;336      _SetEP_KIND(bEpNum);
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  b289              UXTH     r1,r1
000008  f4417180          ORR      r1,r1,#0x100
00000c  f648728f          MOV      r2,#0x8f8f
000010  4011              ANDS     r1,r1,r2
000012  f2480280          MOV      r2,#0x8080
000016  4311              ORRS     r1,r1,r2
000018  4a01              LDR      r2,|L44.32|
00001a  f8421020          STR      r1,[r2,r0,LSL #2]
;;;337    }
00001e  4770              BX       lr
;;;338    /*******************************************************************************
                          ENDP

                  |L44.32|
                          DCD      0x40005c00

                          AREA ||i.SetEPRxAddr||, CODE, READONLY, ALIGN=2

                  SetEPRxAddr PROC
;;;479    *******************************************************************************/
;;;480    void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
000000  b510              PUSH     {r4,lr}
;;;481    {
;;;482      _SetEPRxAddr(bEpNum, wAddr);
000002  104a              ASRS     r2,r1,#1
000004  0053              LSLS     r3,r2,#1
000006  4a05              LDR      r2,|L45.28|
000008  6812              LDR      r2,[r2,#0]
00000a  b292              UXTH     r2,r2
00000c  eb0202c0          ADD      r2,r2,r0,LSL #3
000010  1d12              ADDS     r2,r2,#4
000012  4c03              LDR      r4,|L45.32|
000014  f8443012          STR      r3,[r4,r2,LSL #1]
;;;483    }
000018  bd10              POP      {r4,pc}
;;;484    /*******************************************************************************
                          ENDP

00001a  0000              DCW      0x0000
                  |L45.28|
                          DCD      0x40005c50
                  |L45.32|
                          DCD      0x40006000

                          AREA ||i.SetEPRxCount||, CODE, READONLY, ALIGN=2

                  SetEPRxCount PROC
;;;537    *******************************************************************************/
;;;538    void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
000000  b510              PUSH     {r4,lr}
;;;539    {
000002  4602              MOV      r2,r0
;;;540      _SetEPRxCount(bEpNum, wCount);
000004  480f              LDR      r0,|L46.68|
000006  6800              LDR      r0,[r0,#0]
000008  b280              UXTH     r0,r0
00000a  eb0000c2          ADD      r0,r0,r2,LSL #3
00000e  1d80              ADDS     r0,r0,#6
000010  4c0d              LDR      r4,|L46.72|
000012  eb040340          ADD      r3,r4,r0,LSL #1
000016  293e              CMP      r1,#0x3e
000018  dd0b              BLE      |L46.50|
00001a  1148              ASRS     r0,r1,#5
00001c  f0110f1f          TST      r1,#0x1f
000020  d101              BNE      |L46.38|
000022  1e44              SUBS     r4,r0,#1
000024  b2a0              UXTH     r0,r4
                  |L46.38|
000026  f44f4400          MOV      r4,#0x8000
00002a  ea442480          ORR      r4,r4,r0,LSL #10
00002e  601c              STR      r4,[r3,#0]
000030  e007              B        |L46.66|
                  |L46.50|
000032  1048              ASRS     r0,r1,#1
000034  f0110f01          TST      r1,#1
000038  d001              BEQ      |L46.62|
00003a  1c44              ADDS     r4,r0,#1
00003c  b2a0              UXTH     r0,r4
                  |L46.62|
00003e  0284              LSLS     r4,r0,#10
000040  601c              STR      r4,[r3,#0]
                  |L46.66|
;;;541    }
000042  bd10              POP      {r4,pc}
;;;542    /*******************************************************************************
                          ENDP

                  |L46.68|
                          DCD      0x40005c50
                  |L46.72|
                          DCD      0x40006000

                          AREA ||i.SetEPRxStatus||, CODE, READONLY, ALIGN=2

                  SetEPRxStatus PROC
;;;206    *******************************************************************************/
;;;207    void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
000000  b510              PUSH     {r4,lr}
;;;208    {
;;;209      _SetEPRxStatus(bEpNum, wState);
000002  4b0d              LDR      r3,|L47.56|
000004  f8533020          LDR      r3,[r3,r0,LSL #2]
000008  b29b              UXTH     r3,r3
00000a  f64b748f          MOV      r4,#0xbf8f
00000e  ea030204          AND      r2,r3,r4
000012  f4115f80          TST      r1,#0x1000
000016  d001              BEQ      |L47.28|
000018  f4825280          EOR      r2,r2,#0x1000
                  |L47.28|
00001c  f4115f00          TST      r1,#0x2000
000020  d001              BEQ      |L47.38|
000022  f4825200          EOR      r2,r2,#0x2000
                  |L47.38|
000026  f4424300          ORR      r3,r2,#0x8000
00002a  f0430380          ORR      r3,r3,#0x80
00002e  4c02              LDR      r4,|L47.56|
000030  f8443020          STR      r3,[r4,r0,LSL #2]
;;;210    }
000034  bd10              POP      {r4,pc}
;;;211    
                          ENDP

000036  0000              DCW      0x0000
                  |L47.56|
                          DCD      0x40005c00

                          AREA ||i.SetEPRxValid||, CODE, READONLY, ALIGN=2

                  SetEPRxValid PROC
;;;276    *******************************************************************************/
;;;277    void SetEPRxValid(uint8_t bEpNum)
000000  4a09              LDR      r2,|L48.40|
;;;278    {
;;;279      _SetEPRxStatus(bEpNum, EP_RX_VALID);
000002  f8522020          LDR      r2,[r2,r0,LSL #2]
000006  b292              UXTH     r2,r2
000008  f64b738f          MOV      r3,#0xbf8f
00000c  ea020103          AND      r1,r2,r3
000010  f4815180          EOR      r1,r1,#0x1000
000014  f4815100          EOR      r1,r1,#0x2000
000018  f4414200          ORR      r2,r1,#0x8000
00001c  f0420280          ORR      r2,r2,#0x80
000020  4b01              LDR      r3,|L48.40|
000022  f8432020          STR      r2,[r3,r0,LSL #2]
;;;280    }
000026  4770              BX       lr
;;;281    
                          ENDP

                  |L48.40|
                          DCD      0x40005c00

                          AREA ||i.SetEPTxAddr||, CODE, READONLY, ALIGN=2

                  SetEPTxAddr PROC
;;;467    *******************************************************************************/
;;;468    void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
000000  b510              PUSH     {r4,lr}
;;;469    {
;;;470      _SetEPTxAddr(bEpNum, wAddr);
000002  104a              ASRS     r2,r1,#1
000004  0053              LSLS     r3,r2,#1
000006  4a04              LDR      r2,|L49.24|
000008  6812              LDR      r2,[r2,#0]
00000a  b292              UXTH     r2,r2
00000c  eb0202c0          ADD      r2,r2,r0,LSL #3
000010  4c02              LDR      r4,|L49.28|
000012  f8443012          STR      r3,[r4,r2,LSL #1]
;;;471    }
000016  bd10              POP      {r4,pc}
;;;472    /*******************************************************************************
                          ENDP

                  |L49.24|
                          DCD      0x40005c50
                  |L49.28|
                          DCD      0x40006000

                          AREA ||i.SetEPTxCount||, CODE, READONLY, ALIGN=2

                  SetEPTxCount PROC
;;;513    *******************************************************************************/
;;;514    void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
000000  4a04              LDR      r2,|L50.20|
;;;515    {
;;;516      _SetEPTxCount(bEpNum, wCount);
000002  6812              LDR      r2,[r2,#0]
000004  b292              UXTH     r2,r2
000006  eb0202c0          ADD      r2,r2,r0,LSL #3
00000a  1c92              ADDS     r2,r2,#2
00000c  4b02              LDR      r3,|L50.24|
00000e  f8431012          STR      r1,[r3,r2,LSL #1]
;;;517    }
000012  4770              BX       lr
;;;518    /*******************************************************************************
                          ENDP

                  |L50.20|
                          DCD      0x40005c50
                  |L50.24|
                          DCD      0x40006000

                          AREA ||i.SetEPTxStatus||, CODE, READONLY, ALIGN=2

                  SetEPTxStatus PROC
;;;193    *******************************************************************************/
;;;194    void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
000000  b510              PUSH     {r4,lr}
;;;195    {
;;;196      _SetEPTxStatus(bEpNum, wState);
000002  4b0d              LDR      r3,|L51.56|
000004  f8533020          LDR      r3,[r3,r0,LSL #2]
000008  b29b              UXTH     r3,r3
00000a  f64874bf          MOV      r4,#0x8fbf
00000e  ea030204          AND      r2,r3,r4
000012  f0110f10          TST      r1,#0x10
000016  d001              BEQ      |L51.28|
000018  f0820210          EOR      r2,r2,#0x10
                  |L51.28|
00001c  f0110f20          TST      r1,#0x20
000020  d001              BEQ      |L51.38|
000022  f0820220          EOR      r2,r2,#0x20
                  |L51.38|
000026  f4424300          ORR      r3,r2,#0x8000
00002a  f0430380          ORR      r3,r3,#0x80
00002e  4c02              LDR      r4,|L51.56|
000030  f8443020          STR      r3,[r4,r0,LSL #2]
;;;197    }
000034  bd10              POP      {r4,pc}
;;;198    
                          ENDP

000036  0000              DCW      0x0000
                  |L51.56|
                          DCD      0x40005c00

                          AREA ||i.SetEPTxValid||, CODE, READONLY, ALIGN=2

                  SetEPTxValid PROC
;;;264    *******************************************************************************/
;;;265    void SetEPTxValid(uint8_t bEpNum)
000000  4a09              LDR      r2,|L52.40|
;;;266    {
;;;267      _SetEPTxStatus(bEpNum, EP_TX_VALID);
000002  f8522020          LDR      r2,[r2,r0,LSL #2]
000006  b292              UXTH     r2,r2
000008  f64873bf          MOV      r3,#0x8fbf
00000c  ea020103          AND      r1,r2,r3
000010  f0810110          EOR      r1,r1,#0x10
000014  f0810120          EOR      r1,r1,#0x20
000018  f4414200          ORR      r2,r1,#0x8000
00001c  f0420280          ORR      r2,r2,#0x80
000020  4b01              LDR      r3,|L52.40|
000022  f8432020          STR      r2,[r3,r0,LSL #2]
;;;268    }
000026  4770              BX       lr
;;;269    
                          ENDP

                  |L52.40|
                          DCD      0x40005c00

                          AREA ||i.SetEPType||, CODE, READONLY, ALIGN=2

                  SetEPType PROC
;;;168    *******************************************************************************/
;;;169    void SetEPType(uint8_t bEpNum, uint16_t wType)
000000  4a05              LDR      r2,|L53.24|
;;;170    {
;;;171      _SetEPType(bEpNum, wType);
000002  f8522020          LDR      r2,[r2,r0,LSL #2]
000006  b292              UXTH     r2,r2
000008  f648138f          MOV      r3,#0x898f
00000c  401a              ANDS     r2,r2,r3
00000e  430a              ORRS     r2,r2,r1
000010  4b01              LDR      r3,|L53.24|
000012  f8432020          STR      r2,[r3,r0,LSL #2]
;;;172    }
000016  4770              BX       lr
;;;173    
                          ENDP

                  |L53.24|
                          DCD      0x40005c00

                          AREA ||i.SetEP_KIND||, CODE, READONLY, ALIGN=2

                  SetEP_KIND PROC
;;;288    *******************************************************************************/
;;;289    void SetEP_KIND(uint8_t bEpNum)
000000  4907              LDR      r1,|L54.32|
;;;290    {
;;;291      _SetEP_KIND(bEpNum);
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  b289              UXTH     r1,r1
000008  f4417180          ORR      r1,r1,#0x100
00000c  f648728f          MOV      r2,#0x8f8f
000010  4011              ANDS     r1,r1,r2
000012  f2480280          MOV      r2,#0x8080
000016  4311              ORRS     r1,r1,r2
000018  4a01              LDR      r2,|L54.32|
00001a  f8421020          STR      r1,[r2,r0,LSL #2]
;;;292    }
00001e  4770              BX       lr
;;;293    
                          ENDP

                  |L54.32|
                          DCD      0x40005c00

                          AREA ||i.SetISTR||, CODE, READONLY, ALIGN=2

                  SetISTR PROC
;;;58     *******************************************************************************/
;;;59     void SetISTR(uint16_t wRegValue)
000000  4901              LDR      r1,|L55.8|
;;;60     {
;;;61       _SetISTR(wRegValue);
000002  6008              STR      r0,[r1,#0]
;;;62     }
000004  4770              BX       lr
;;;63     
                          ENDP

000006  0000              DCW      0x0000
                  |L55.8|
                          DCD      0x40005c44

                          AREA ||i.Set_Status_Out||, CODE, READONLY, ALIGN=2

                  Set_Status_Out PROC
;;;322    *******************************************************************************/
;;;323    void Set_Status_Out(uint8_t bEpNum)
000000  4907              LDR      r1,|L56.32|
;;;324    {
;;;325      _SetEP_KIND(bEpNum);
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  b289              UXTH     r1,r1
000008  f4417180          ORR      r1,r1,#0x100
00000c  f648728f          MOV      r2,#0x8f8f
000010  4011              ANDS     r1,r1,r2
000012  f2480280          MOV      r2,#0x8080
000016  4311              ORRS     r1,r1,r2
000018  4a01              LDR      r2,|L56.32|
00001a  f8421020          STR      r1,[r2,r0,LSL #2]
;;;326    }
00001e  4770              BX       lr
;;;327    /*******************************************************************************
                          ENDP

                  |L56.32|
                          DCD      0x40005c00

                          AREA ||i.ToWord||, CODE, READONLY, ALIGN=1

                  ToWord PROC
;;;726    *******************************************************************************/
;;;727    uint16_t ToWord(uint8_t bh, uint8_t bl)
000000  4602              MOV      r2,r0
;;;728    {
;;;729      uint16_t wRet;
;;;730      wRet = (uint16_t)bl | ((uint16_t)bh << 8);
000002  ea412002          ORR      r0,r1,r2,LSL #8
;;;731      return(wRet);
;;;732    }
000006  4770              BX       lr
;;;733    /*******************************************************************************
                          ENDP


                          AREA ||i.ToggleDTOG_RX||, CODE, READONLY, ALIGN=2

                  ToggleDTOG_RX PROC
;;;399    *******************************************************************************/
;;;400    void ToggleDTOG_RX(uint8_t bEpNum)
000000  4906              LDR      r1,|L58.28|
;;;401    {
;;;402      _ToggleDTOG_RX(bEpNum);
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  b289              UXTH     r1,r1
000008  f648728f          MOV      r2,#0x8f8f
00000c  4011              ANDS     r1,r1,r2
00000e  f24c0280          MOV      r2,#0xc080
000012  4311              ORRS     r1,r1,r2
000014  4a01              LDR      r2,|L58.28|
000016  f8421020          STR      r1,[r2,r0,LSL #2]
;;;403    }
00001a  4770              BX       lr
;;;404    /*******************************************************************************
                          ENDP

                  |L58.28|
                          DCD      0x40005c00

                          AREA ||i.ToggleDTOG_TX||, CODE, READONLY, ALIGN=2

                  ToggleDTOG_TX PROC
;;;410    *******************************************************************************/
;;;411    void ToggleDTOG_TX(uint8_t bEpNum)
000000  4906              LDR      r1,|L59.28|
;;;412    {
;;;413      _ToggleDTOG_TX(bEpNum);
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  b289              UXTH     r1,r1
000008  f648728f          MOV      r2,#0x8f8f
00000c  4011              ANDS     r1,r1,r2
00000e  f24802c0          MOV      r2,#0x80c0
000012  4311              ORRS     r1,r1,r2
000014  4a01              LDR      r2,|L59.28|
000016  f8421020          STR      r1,[r2,r0,LSL #2]
;;;414    }
00001a  4770              BX       lr
;;;415    /*******************************************************************************
                          ENDP

                  |L59.28|
                          DCD      0x40005c00
