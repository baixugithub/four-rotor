; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\algorithm_math.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\algorithm_math.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\sys -ID:\KEIL\KEIL_Pro\KEIL_5\ARM\RV31\INC -ID:\KEIL\KEIL_Pro\KEIL_5\ARM\CMSIS\Include -ID:\KEIL\KEIL_Pro\KEIL_5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\algorithm_math.crf ..\..\User\Algorithm\Algorithm_math\Algorithm_math.c]
                          THUMB

                          AREA ||i.Degree||, CODE, READONLY, ALIGN=2

                  Degree PROC
;;;123    *******************************************************************************/
;;;124    double Degree(double rad)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;125    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;126        return (rad / M_PI * 180.0);
000008  f04f42c0          MOV      r2,#0x60000000
00000c  4b05              LDR      r3,|L1.36|
00000e  4620              MOV      r0,r4
000010  4629              MOV      r1,r5
000012  f7fffffe          BL       __aeabi_ddiv
000016  4606              MOV      r6,r0
000018  2200              MOVS     r2,#0
00001a  4b03              LDR      r3,|L1.40|
00001c  f7fffffe          BL       __aeabi_dmul
;;;127    }
000020  e8bd81f0          POP      {r4-r8,pc}
;;;128    
                          ENDP

                  |L1.36|
                          DCD      0x400921fb
                  |L1.40|
                          DCD      0x40668000

                          AREA ||i.Q_rsqrt||, CODE, READONLY, ALIGN=2

                  Q_rsqrt PROC
;;;20     /*====================================================================================================*/
;;;21     float Q_rsqrt(float number)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;22     {
000004  4604              MOV      r4,r0
;;;23     	long i;
;;;24     	float x2, y;
;;;25     	const float threehalfs = 1.5F;
000006  f04f597f          MOV      r9,#0x3fc00000
;;;26      
;;;27     	x2 = number * 0.5F;
00000a  f04f517c          MOV      r1,#0x3f000000
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       __aeabi_fmul
000014  4682              MOV      r10,r0
;;;28     	y  = number;
000016  4625              MOV      r5,r4
;;;29     	i  = * ( long * ) &y;                      
000018  462e              MOV      r6,r5
;;;30     	i  = 0x5f3759df - ( i >> 1 );               
00001a  480c              LDR      r0,|L2.76|
00001c  eba00666          SUB      r6,r0,r6,ASR #1
;;;31     	y  = * ( float * ) &i;
000020  4635              MOV      r5,r6
;;;32     	y  = y * ( threehalfs - ( x2 * y * y ) );   // 1st iteration （第一次牛顿迭代）
000022  4629              MOV      r1,r5
000024  4650              MOV      r0,r10
000026  f7fffffe          BL       __aeabi_fmul
00002a  4683              MOV      r11,r0
00002c  4629              MOV      r1,r5
00002e  f7fffffe          BL       __aeabi_fmul
000032  4680              MOV      r8,r0
000034  4649              MOV      r1,r9
000036  f7fffffe          BL       __aeabi_frsub
00003a  4607              MOV      r7,r0
00003c  4629              MOV      r1,r5
00003e  f7fffffe          BL       __aeabi_fmul
000042  4605              MOV      r5,r0
;;;33     	return y;
000044  4628              MOV      r0,r5
;;;34     } 
000046  e8bd9ff0          POP      {r4-r12,pc}
;;;35     
                          ENDP

00004a  0000              DCW      0x0000
                  |L2.76|
                          DCD      0x5f3759df

                          AREA ||i.VariableParameter||, CODE, READONLY, ALIGN=2

                  VariableParameter PROC
;;;88     ************************************************/
;;;89     float VariableParameter(float error)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;90     {
000004  4682              MOV      r10,r0
;;;91     	float  result = 0;
000006  f04f0b00          MOV      r11,#0
;;;92     	
;;;93     	if(error < 0)
00000a  2100              MOVS     r1,#0
00000c  4650              MOV      r0,r10
00000e  f7fffffe          BL       __aeabi_cfcmple
000012  d201              BCS      |L3.24|
;;;94     	{
;;;95     	   error = -error;
000014  f08a4a00          EOR      r10,r10,#0x80000000
                  |L3.24|
;;;96     	}
;;;97       if(error >0.6f)
000018  4910              LDR      r1,|L3.92|
00001a  4650              MOV      r0,r10
00001c  f7fffffe          BL       __aeabi_cfrcmple
000020  d201              BCS      |L3.38|
;;;98     	{
;;;99     	   error = 0.6f;
000022  f8dfa038          LDR      r10,|L3.92|
                  |L3.38|
;;;100    	}
;;;101    	result = 1 - 1.667 * error;
000026  4650              MOV      r0,r10
000028  f7fffffe          BL       __aeabi_f2d
00002c  4680              MOV      r8,r0
00002e  4a0c              LDR      r2,|L3.96|
000030  4b0c              LDR      r3,|L3.100|
000032  f7fffffe          BL       __aeabi_dmul
000036  4606              MOV      r6,r0
000038  2200              MOVS     r2,#0
00003a  4b0b              LDR      r3,|L3.104|
00003c  f7fffffe          BL       __aeabi_drsub
000040  4604              MOV      r4,r0
000042  f7fffffe          BL       __aeabi_d2f
000046  4683              MOV      r11,r0
;;;102    	if(result < 0)
000048  2100              MOVS     r1,#0
00004a  4658              MOV      r0,r11
00004c  f7fffffe          BL       __aeabi_cfcmple
000050  d201              BCS      |L3.86|
;;;103    	{
;;;104    	   result = 0;
000052  f04f0b00          MOV      r11,#0
                  |L3.86|
;;;105    	}
;;;106    	return result;
000056  4658              MOV      r0,r11
;;;107    }
000058  e8bd9ff0          POP      {r4-r12,pc}
;;;108    /**************************实现函数********************************************
                          ENDP

                  |L3.92|
                          DCD      0x3f19999a
                  |L3.96|
                          DCD      0x3126e979
                  |L3.100|
                          DCD      0x3ffaac08
                  |L3.104|
                          DCD      0x3ff00000

                          AREA ||i.array_assign||, CODE, READONLY, ALIGN=1

                  array_assign PROC
;;;59     *******************************************************************************/
;;;60     void array_assign(u16 *array,s16 value,u16 length)
000000  b510              PUSH     {r4,lr}
;;;61     {
000002  4603              MOV      r3,r0
;;;62        for(uint16_t i=0;i<length;i++)
000004  2000              MOVS     r0,#0
000006  e003              B        |L4.16|
                  |L4.8|
;;;63        {
;;;64          *(array+i) = value;
000008  f8231010          STRH     r1,[r3,r0,LSL #1]
00000c  1c44              ADDS     r4,r0,#1              ;62
00000e  b2a0              UXTH     r0,r4                 ;62
                  |L4.16|
000010  4290              CMP      r0,r2                 ;62
000012  dbf9              BLT      |L4.8|
;;;65        } 
;;;66     }
000014  bd10              POP      {r4,pc}
;;;67     
                          ENDP


                          AREA ||i.array_astrict||, CODE, READONLY, ALIGN=1

                  array_astrict PROC
;;;42     *******************************************************************************/
;;;43     void array_astrict(s16 *array,s16 lower,s16 upper)
000000  b530              PUSH     {r4,r5,lr}
;;;44     {
000002  4603              MOV      r3,r0
;;;45        s16 length = sizeof(array); 
000004  2404              MOVS     r4,#4
;;;46        for(uint16_t i=0;i<length;i++)
000006  2000              MOVS     r0,#0
000008  e00e              B        |L5.40|
                  |L5.10|
;;;47        {
;;;48          if(*(array+i)<lower)  *(array+i) = lower;
00000a  f9335010          LDRSH    r5,[r3,r0,LSL #1]
00000e  428d              CMP      r5,r1
000010  da02              BGE      |L5.24|
000012  f8231010          STRH     r1,[r3,r0,LSL #1]
000016  e005              B        |L5.36|
                  |L5.24|
;;;49          else if(*(array+i)>upper)  *(array+i) = upper;
000018  f9335010          LDRSH    r5,[r3,r0,LSL #1]
00001c  4295              CMP      r5,r2
00001e  dd01              BLE      |L5.36|
000020  f8232010          STRH     r2,[r3,r0,LSL #1]
                  |L5.36|
000024  1c45              ADDS     r5,r0,#1              ;46
000026  b2a8              UXTH     r0,r5                 ;46
                  |L5.40|
000028  42a0              CMP      r0,r4                 ;46
00002a  dbee              BLT      |L5.10|
;;;50        } 
;;;51     }
00002c  bd30              POP      {r4,r5,pc}
;;;52     
                          ENDP


                          AREA ||i.data_limit||, CODE, READONLY, ALIGN=1

                  data_limit PROC
;;;75     *******************************************************************************/
;;;76     float data_limit(float data,float toplimit,float lowerlimit)
000000  b570              PUSH     {r4-r6,lr}
;;;77     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;78       if(data > toplimit)  data = toplimit;
000008  4629              MOV      r1,r5
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       __aeabi_cfrcmple
000010  d201              BCS      |L6.22|
000012  462e              MOV      r6,r5
000014  e005              B        |L6.34|
                  |L6.22|
;;;79       else if(data < lowerlimit) data = lowerlimit;
000016  4621              MOV      r1,r4
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       __aeabi_cfcmple
00001e  d200              BCS      |L6.34|
000020  4626              MOV      r6,r4
                  |L6.34|
;;;80     	return data;
000022  4630              MOV      r0,r6
;;;81     }
000024  bd70              POP      {r4-r6,pc}
;;;82     
                          ENDP


                          AREA ||i.rad||, CODE, READONLY, ALIGN=2

                  ||rad|| PROC
;;;113    *******************************************************************************/
;;;114    double rad(double angle)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;115    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;116        return (angle * M_PI / 180.0);
000008  f04f42c0          MOV      r2,#0x60000000
00000c  4b05              LDR      r3,|L7.36|
00000e  4620              MOV      r0,r4
000010  4629              MOV      r1,r5
000012  f7fffffe          BL       __aeabi_dmul
000016  4606              MOV      r6,r0
000018  2200              MOVS     r2,#0
00001a  4b03              LDR      r3,|L7.40|
00001c  f7fffffe          BL       __aeabi_ddiv
;;;117    }
000020  e8bd81f0          POP      {r4-r8,pc}
;;;118    /**************************实现函数********************************************
                          ENDP

                  |L7.36|
                          DCD      0x400921fb
                  |L7.40|
                          DCD      0x40668000
