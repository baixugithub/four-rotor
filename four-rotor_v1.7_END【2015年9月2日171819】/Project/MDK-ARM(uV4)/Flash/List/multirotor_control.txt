; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\multirotor_control.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\multirotor_control.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\sys -ID:\KEIL\KEIL_Pro\KEIL_5\ARM\RV31\INC -ID:\KEIL\KEIL_Pro\KEIL_5\ARM\CMSIS\Include -ID:\KEIL\KEIL_Pro\KEIL_5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\multirotor_control.crf ..\..\User\Function\MultiRotor_control\MultiRotor_control.c]
                          THUMB

                          AREA ||i.Attitude_RatePID||, CODE, READONLY, ALIGN=2

                  Attitude_RatePID PROC
;;;138    /*====================================================================================================*/
;;;139    void Attitude_RatePID(float T)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;140    {
000004  4604              MOV      r4,r0
;;;141      fp32 E_pitch,E_roll,E_yaw;
;;;142    	
;;;143    	// 计算偏差  
;;;144    	E_pitch = ctrl.pitch.shell.pid_out - sensor.gyro.averag.y * Gyro_G;
000006  49b2              LDR      r1,|L1.720|
000008  6c08              LDR      r0,[r1,#0x40]
00000a  f7fffffe          BL       __aeabi_f2d
00000e  4ab1              LDR      r2,|L1.724|
000010  4bb1              LDR      r3,|L1.728|
000012  e9cd0100          STRD     r0,r1,[sp,#0]
000016  f7fffffe          BL       __aeabi_dmul
00001a  4605              MOV      r5,r0
00001c  460e              MOV      r6,r1
00001e  49af              LDR      r1,|L1.732|
000020  6a48              LDR      r0,[r1,#0x24]
000022  f7fffffe          BL       __aeabi_f2d
000026  4607              MOV      r7,r0
000028  462a              MOV      r2,r5
00002a  4633              MOV      r3,r6
00002c  f7fffffe          BL       __aeabi_dsub
000030  e9cd0102          STRD     r0,r1,[sp,#8]
000034  f7fffffe          BL       __aeabi_d2f
000038  4681              MOV      r9,r0
;;;145    	E_roll  = ctrl.roll.shell.pid_out  - sensor.gyro.averag.x * Gyro_G;
00003a  49a5              LDR      r1,|L1.720|
00003c  6bc8              LDR      r0,[r1,#0x3c]
00003e  f7fffffe          BL       __aeabi_f2d
000042  4607              MOV      r7,r0
000044  4aa3              LDR      r2,|L1.724|
000046  4ba4              LDR      r3,|L1.728|
000048  f7fffffe          BL       __aeabi_dmul
00004c  e9cd0100          STRD     r0,r1,[sp,#0]
000050  49a2              LDR      r1,|L1.732|
000052  6ec8              LDR      r0,[r1,#0x6c]
000054  f7fffffe          BL       __aeabi_f2d
000058  4605              MOV      r5,r0
00005a  e9dd2300          LDRD     r2,r3,[sp,#0]
00005e  f7fffffe          BL       __aeabi_dsub
000062  e9cd0102          STRD     r0,r1,[sp,#8]
000066  f7fffffe          BL       __aeabi_d2f
00006a  4682              MOV      r10,r0
;;;146    	E_yaw   = ctrl.yaw.shell.pid_out   - sensor.gyro.averag.z * Gyro_G;
00006c  4998              LDR      r1,|L1.720|
00006e  6c48              LDR      r0,[r1,#0x44]
000070  f7fffffe          BL       __aeabi_f2d
000074  4607              MOV      r7,r0
000076  4a97              LDR      r2,|L1.724|
000078  4b97              LDR      r3,|L1.728|
00007a  f7fffffe          BL       __aeabi_dmul
00007e  e9cd0102          STRD     r0,r1,[sp,#8]
000082  4996              LDR      r1,|L1.732|
000084  f8d100b4          LDR      r0,[r1,#0xb4]
000088  f7fffffe          BL       __aeabi_f2d
00008c  e9cd0100          STRD     r0,r1,[sp,#0]
000090  e9dd2302          LDRD     r2,r3,[sp,#8]
000094  f7fffffe          BL       __aeabi_dsub
000098  4605              MOV      r5,r0
00009a  f7fffffe          BL       __aeabi_d2f
00009e  4683              MOV      r11,r0
;;;147    	
;;;148      // 期望角速度限幅
;;;149    	E_pitch = data_limit(E_pitch,300,-300);
0000a0  4a8f              LDR      r2,|L1.736|
0000a2  4990              LDR      r1,|L1.740|
0000a4  4648              MOV      r0,r9
0000a6  f7fffffe          BL       data_limit
0000aa  4681              MOV      r9,r0
;;;150    	E_roll  = data_limit(E_roll,300,-300);
0000ac  4a8c              LDR      r2,|L1.736|
0000ae  498d              LDR      r1,|L1.740|
0000b0  4650              MOV      r0,r10
0000b2  f7fffffe          BL       data_limit
0000b6  4682              MOV      r10,r0
;;;151    	E_yaw   = data_limit(E_yaw,300,-300);
0000b8  4a89              LDR      r2,|L1.736|
0000ba  498a              LDR      r1,|L1.740|
0000bc  4658              MOV      r0,r11
0000be  f7fffffe          BL       data_limit
0000c2  4683              MOV      r11,r0
;;;152    	
;;;153    	// 积分
;;;154    	ctrl.pitch.core.increment += E_pitch * (T/0.002f);
0000c4  4988              LDR      r1,|L1.744|
0000c6  4620              MOV      r0,r4
0000c8  f7fffffe          BL       __aeabi_fdiv
0000cc  4606              MOV      r6,r0
0000ce  4649              MOV      r1,r9
0000d0  f7fffffe          BL       __aeabi_fmul
0000d4  4605              MOV      r5,r0
0000d6  4881              LDR      r0,|L1.732|
0000d8  6b41              LDR      r1,[r0,#0x34]
0000da  4628              MOV      r0,r5
0000dc  f7fffffe          BL       __aeabi_fadd
0000e0  4601              MOV      r1,r0
0000e2  487e              LDR      r0,|L1.732|
0000e4  6341              STR      r1,[r0,#0x34]
;;;155    	ctrl.roll.core.increment  += E_roll  * (T/0.002f);
0000e6  4980              LDR      r1,|L1.744|
0000e8  4620              MOV      r0,r4
0000ea  f7fffffe          BL       __aeabi_fdiv
0000ee  4606              MOV      r6,r0
0000f0  4651              MOV      r1,r10
0000f2  f7fffffe          BL       __aeabi_fmul
0000f6  4605              MOV      r5,r0
0000f8  4878              LDR      r0,|L1.732|
0000fa  6fc1              LDR      r1,[r0,#0x7c]
0000fc  4628              MOV      r0,r5
0000fe  f7fffffe          BL       __aeabi_fadd
000102  4601              MOV      r1,r0
000104  4875              LDR      r0,|L1.732|
000106  67c1              STR      r1,[r0,#0x7c]
;;;156    	ctrl.yaw.core.increment   += E_yaw   * (T/0.002f);
000108  4977              LDR      r1,|L1.744|
00010a  4620              MOV      r0,r4
00010c  f7fffffe          BL       __aeabi_fdiv
000110  4606              MOV      r6,r0
000112  4659              MOV      r1,r11
000114  f7fffffe          BL       __aeabi_fmul
000118  4605              MOV      r5,r0
00011a  4870              LDR      r0,|L1.732|
00011c  f8d010c4          LDR      r1,[r0,#0xc4]
000120  4628              MOV      r0,r5
000122  f7fffffe          BL       __aeabi_fadd
000126  4601              MOV      r1,r0
000128  486c              LDR      r0,|L1.732|
00012a  f8c010c4          STR      r1,[r0,#0xc4]
;;;157    	
;;;158    	// 角速度误差积分限幅
;;;159    	ctrl.pitch.core.increment = data_limit(ctrl.pitch.core.increment,20,-20);
00012e  4601              MOV      r1,r0
000130  4a6e              LDR      r2,|L1.748|
000132  6b48              LDR      r0,[r1,#0x34]
000134  496e              LDR      r1,|L1.752|
000136  f7fffffe          BL       data_limit
00013a  4601              MOV      r1,r0
00013c  4867              LDR      r0,|L1.732|
00013e  6341              STR      r1,[r0,#0x34]
;;;160    	ctrl.roll.core.increment  = data_limit(ctrl.roll.core.increment,20,-20);
000140  4601              MOV      r1,r0
000142  4a6a              LDR      r2,|L1.748|
000144  6fc8              LDR      r0,[r1,#0x7c]
000146  496a              LDR      r1,|L1.752|
000148  f7fffffe          BL       data_limit
00014c  4601              MOV      r1,r0
00014e  4863              LDR      r0,|L1.732|
000150  67c1              STR      r1,[r0,#0x7c]
;;;161    	ctrl.yaw.core.increment   = data_limit(ctrl.yaw.core.increment,20,-20);
000152  4601              MOV      r1,r0
000154  4a65              LDR      r2,|L1.748|
000156  f8d100c4          LDR      r0,[r1,#0xc4]
00015a  4965              LDR      r1,|L1.752|
00015c  f7fffffe          BL       data_limit
000160  4601              MOV      r1,r0
000162  485e              LDR      r0,|L1.732|
000164  f8c010c4          STR      r1,[r0,#0xc4]
;;;162    	
;;;163    	// 
;;;164    	ctrl.pitch.core.kp_out = ctrl.pitch.core.kp * E_pitch;
000168  4601              MOV      r1,r0
00016a  6a88              LDR      r0,[r1,#0x28]
00016c  4649              MOV      r1,r9
00016e  f7fffffe          BL       __aeabi_fmul
000172  4601              MOV      r1,r0
000174  4859              LDR      r0,|L1.732|
000176  63c1              STR      r1,[r0,#0x3c]
;;;165    	ctrl.roll.core.kp_out  = ctrl.roll.core.kp  * E_roll;
000178  4601              MOV      r1,r0
00017a  6f08              LDR      r0,[r1,#0x70]
00017c  4651              MOV      r1,r10
00017e  f7fffffe          BL       __aeabi_fmul
000182  4601              MOV      r1,r0
000184  4855              LDR      r0,|L1.732|
000186  f8c01084          STR      r1,[r0,#0x84]
;;;166    	ctrl.yaw.core.kp_out   = ctrl.yaw.core.kp   * E_yaw;
00018a  4601              MOV      r1,r0
00018c  f8d100b8          LDR      r0,[r1,#0xb8]
000190  4659              MOV      r1,r11
000192  f7fffffe          BL       __aeabi_fmul
000196  4601              MOV      r1,r0
000198  4850              LDR      r0,|L1.732|
00019a  f8c010cc          STR      r1,[r0,#0xcc]
;;;167    	
;;;168    	ctrl.pitch.core.ki_out = ctrl.pitch.core.ki * ctrl.pitch.core.increment;
00019e  4602              MOV      r2,r0
0001a0  6b51              LDR      r1,[r2,#0x34]
0001a2  6ad0              LDR      r0,[r2,#0x2c]
0001a4  f7fffffe          BL       __aeabi_fmul
0001a8  4601              MOV      r1,r0
0001aa  484c              LDR      r0,|L1.732|
0001ac  6401              STR      r1,[r0,#0x40]
;;;169    	ctrl.roll.core.ki_out  = ctrl.roll.core.ki  * ctrl.roll.core.increment;
0001ae  4602              MOV      r2,r0
0001b0  6fd1              LDR      r1,[r2,#0x7c]
0001b2  6f50              LDR      r0,[r2,#0x74]
0001b4  f7fffffe          BL       __aeabi_fmul
0001b8  4601              MOV      r1,r0
0001ba  4848              LDR      r0,|L1.732|
0001bc  f8c01088          STR      r1,[r0,#0x88]
;;;170    	ctrl.yaw.core.ki_out   = ctrl.yaw.core.ki   * ctrl.yaw.core.increment;
0001c0  4602              MOV      r2,r0
0001c2  f8d210c4          LDR      r1,[r2,#0xc4]
0001c6  f8d200bc          LDR      r0,[r2,#0xbc]
0001ca  f7fffffe          BL       __aeabi_fmul
0001ce  4601              MOV      r1,r0
0001d0  4842              LDR      r0,|L1.732|
0001d2  f8c010d0          STR      r1,[r0,#0xd0]
;;;171    	
;;;172    	ctrl.pitch.core.kd_out = ctrl.pitch.core.kd * (sensor.gyro.histor.y - sensor.gyro.averag.y) * ( 0.002f/T );
0001d6  4621              MOV      r1,r4
0001d8  4843              LDR      r0,|L1.744|
0001da  f7fffffe          BL       __aeabi_fdiv
0001de  4606              MOV      r6,r0
0001e0  4a3b              LDR      r2,|L1.720|
0001e2  6c11              LDR      r1,[r2,#0x40]
0001e4  6cd0              LDR      r0,[r2,#0x4c]
0001e6  f7fffffe          BL       __aeabi_fsub
0001ea  4607              MOV      r7,r0
0001ec  483b              LDR      r0,|L1.732|
0001ee  6b01              LDR      r1,[r0,#0x30]
0001f0  4638              MOV      r0,r7
0001f2  f7fffffe          BL       __aeabi_fmul
0001f6  4605              MOV      r5,r0
0001f8  4631              MOV      r1,r6
0001fa  f7fffffe          BL       __aeabi_fmul
0001fe  4601              MOV      r1,r0
000200  4836              LDR      r0,|L1.732|
000202  6441              STR      r1,[r0,#0x44]
;;;173    	ctrl.roll.core.kd_out  = ctrl.roll.core.kd  * (sensor.gyro.histor.x - sensor.gyro.averag.x) * ( 0.002f/T );
000204  4621              MOV      r1,r4
000206  4838              LDR      r0,|L1.744|
000208  f7fffffe          BL       __aeabi_fdiv
00020c  4606              MOV      r6,r0
00020e  4a30              LDR      r2,|L1.720|
000210  6bd1              LDR      r1,[r2,#0x3c]
000212  6c90              LDR      r0,[r2,#0x48]
000214  f7fffffe          BL       __aeabi_fsub
000218  4607              MOV      r7,r0
00021a  4830              LDR      r0,|L1.732|
00021c  6f81              LDR      r1,[r0,#0x78]
00021e  4638              MOV      r0,r7
000220  f7fffffe          BL       __aeabi_fmul
000224  4605              MOV      r5,r0
000226  4631              MOV      r1,r6
000228  f7fffffe          BL       __aeabi_fmul
00022c  4601              MOV      r1,r0
00022e  482b              LDR      r0,|L1.732|
000230  f8c0108c          STR      r1,[r0,#0x8c]
;;;174    	ctrl.yaw.core.kd_out   = ctrl.yaw.core.kd   * (sensor.gyro.histor.z - sensor.gyro.averag.z) * ( 0.002f/T );
000234  4621              MOV      r1,r4
000236  482c              LDR      r0,|L1.744|
000238  f7fffffe          BL       __aeabi_fdiv
00023c  4606              MOV      r6,r0
00023e  4a24              LDR      r2,|L1.720|
000240  6c51              LDR      r1,[r2,#0x44]
000242  6d10              LDR      r0,[r2,#0x50]
000244  f7fffffe          BL       __aeabi_fsub
000248  4607              MOV      r7,r0
00024a  4824              LDR      r0,|L1.732|
00024c  f8d010c0          LDR      r1,[r0,#0xc0]
000250  4638              MOV      r0,r7
000252  f7fffffe          BL       __aeabi_fmul
000256  4605              MOV      r5,r0
000258  4631              MOV      r1,r6
00025a  f7fffffe          BL       __aeabi_fmul
00025e  4601              MOV      r1,r0
000260  481e              LDR      r0,|L1.732|
000262  f8c010d4          STR      r1,[r0,#0xd4]
;;;175    	
;;;176    	// 角速度PID输出 
;;;177    	ctrl.pitch.core.pid_out = ctrl.pitch.core.kp_out + ctrl.pitch.core.ki_out + ctrl.pitch.core.kd_out;
000266  4602              MOV      r2,r0
000268  6c11              LDR      r1,[r2,#0x40]
00026a  6bd0              LDR      r0,[r2,#0x3c]
00026c  f7fffffe          BL       __aeabi_fadd
000270  4605              MOV      r5,r0
000272  481a              LDR      r0,|L1.732|
000274  6c41              LDR      r1,[r0,#0x44]
000276  4628              MOV      r0,r5
000278  f7fffffe          BL       __aeabi_fadd
00027c  4601              MOV      r1,r0
00027e  4817              LDR      r0,|L1.732|
000280  6481              STR      r1,[r0,#0x48]
;;;178    	ctrl.roll.core.pid_out  = ctrl.roll.core.kp_out  + ctrl.roll.core.ki_out  + ctrl.roll.core.kd_out;
000282  4602              MOV      r2,r0
000284  f8d21088          LDR      r1,[r2,#0x88]
000288  f8d20084          LDR      r0,[r2,#0x84]
00028c  f7fffffe          BL       __aeabi_fadd
000290  4605              MOV      r5,r0
000292  4812              LDR      r0,|L1.732|
000294  f8d0108c          LDR      r1,[r0,#0x8c]
000298  4628              MOV      r0,r5
00029a  f7fffffe          BL       __aeabi_fadd
00029e  4601              MOV      r1,r0
0002a0  480e              LDR      r0,|L1.732|
0002a2  f8c01090          STR      r1,[r0,#0x90]
;;;179    	ctrl.yaw.core.pid_out   = ctrl.yaw.core.kp_out   + ctrl.yaw.core.kd_out;
0002a6  4602              MOV      r2,r0
0002a8  f8d210d4          LDR      r1,[r2,#0xd4]
0002ac  f8d200cc          LDR      r0,[r2,#0xcc]
0002b0  f7fffffe          BL       __aeabi_fadd
0002b4  4601              MOV      r1,r0
0002b6  4809              LDR      r0,|L1.732|
0002b8  f8c010d8          STR      r1,[r0,#0xd8]
;;;180    	
;;;181    	sensor.gyro.histor.y = sensor.gyro.averag.y;
0002bc  4804              LDR      r0,|L1.720|
0002be  6c01              LDR      r1,[r0,#0x40]
0002c0  64c1              STR      r1,[r0,#0x4c]
;;;182    	sensor.gyro.histor.x = sensor.gyro.averag.x;   
0002c2  6bc1              LDR      r1,[r0,#0x3c]
0002c4  6481              STR      r1,[r0,#0x48]
;;;183    	sensor.gyro.histor.z = sensor.gyro.averag.z; 
0002c6  6c41              LDR      r1,[r0,#0x44]
0002c8  6501              STR      r1,[r0,#0x50]
;;;184    }
0002ca  e8bd9fff          POP      {r0-r12,pc}
;;;185    /*====================================================================================================*/
                          ENDP

0002ce  0000              DCW      0x0000
                  |L1.720|
                          DCD      sensor
                  |L1.724|
                          DCD      0xc89d6830
                  |L1.728|
                          DCD      0x3f9f3ffe
                  |L1.732|
                          DCD      ctrl
                  |L1.736|
                          DCD      0xc3960000
                  |L1.740|
                          DCD      0x43960000
                  |L1.744|
                          DCD      0x3b03126f
                  |L1.748|
                          DCD      0xc1a00000
                  |L1.752|
                          DCD      0x41a00000

                          AREA ||i.CONTROL||, CODE, READONLY, ALIGN=2

                  CONTROL PROC
;;;86     /***************************************************/
;;;87     void CONTROL(struct _target Goal)   
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;88     {
;;;89     	float  deviation_pitch,deviation_roll,deviation_yaw;
;;;90     	
;;;91     	if(ctrl.ctrlRate >= 2)
000004  485e              LDR      r0,|L2.384|
000006  7800              LDRB     r0,[r0,#0]  ; ctrl
000008  2802              CMP      r0,#2
00000a  db7c              BLT      |L2.262|
;;;92     	{
;;;93     		// 计算角度误差 
;;;94     		deviation_pitch = Goal.Pitch - AngE.Pitch;
00000c  4a5d              LDR      r2,|L2.388|
00000e  6811              LDR      r1,[r2,#0]  ; AngE
000010  9800              LDR      r0,[sp,#0]
000012  f7fffffe          BL       __aeabi_fsub
000016  4606              MOV      r6,r0
;;;95     		deviation_roll = Goal.Roll - AngE.Roll;
000018  4a5a              LDR      r2,|L2.388|
00001a  6851              LDR      r1,[r2,#4]  ; AngE
00001c  9801              LDR      r0,[sp,#4]
00001e  f7fffffe          BL       __aeabi_fsub
000022  4607              MOV      r7,r0
;;;96     		
;;;97     		//航向计算////////////
;;;98     		if((Goal.Yaw - AngE.Yaw)>180 || (Goal.Yaw - AngE.Yaw)<-180)
000024  4a57              LDR      r2,|L2.388|
000026  6891              LDR      r1,[r2,#8]  ; AngE
000028  9802              LDR      r0,[sp,#8]
00002a  f7fffffe          BL       __aeabi_fsub
00002e  4605              MOV      r5,r0
000030  4955              LDR      r1,|L2.392|
000032  f7fffffe          BL       __aeabi_cfrcmple
000036  d309              BCC      |L2.76|
000038  4a52              LDR      r2,|L2.388|
00003a  6891              LDR      r1,[r2,#8]  ; AngE
00003c  9802              LDR      r0,[sp,#8]
00003e  f7fffffe          BL       __aeabi_fsub
000042  4605              MOV      r5,r0
000044  4951              LDR      r1,|L2.396|
000046  f7fffffe          BL       __aeabi_cfcmple
00004a  d234              BCS      |L2.182|
                  |L2.76|
;;;99     		{
;;;100    			if(Goal.Yaw>0 && AngE.Yaw<0)  deviation_yaw= (-180 - AngE.Yaw) +(Goal.Yaw - 180);
00004c  2100              MOVS     r1,#0
00004e  9802              LDR      r0,[sp,#8]
000050  f7fffffe          BL       __aeabi_cfrcmple
000054  d214              BCS      |L2.128|
000056  494b              LDR      r1,|L2.388|
000058  6888              LDR      r0,[r1,#8]  ; AngE
00005a  2100              MOVS     r1,#0
00005c  f7fffffe          BL       __aeabi_cfcmple
000060  d20e              BCS      |L2.128|
000062  4949              LDR      r1,|L2.392|
000064  9802              LDR      r0,[sp,#8]
000066  f7fffffe          BL       __aeabi_fsub
00006a  4605              MOV      r5,r0
00006c  4845              LDR      r0,|L2.388|
00006e  6881              LDR      r1,[r0,#8]  ; AngE
000070  4846              LDR      r0,|L2.396|
000072  f7fffffe          BL       __aeabi_fsub
000076  4680              MOV      r8,r0
000078  4629              MOV      r1,r5
00007a  f7fffffe          BL       __aeabi_fadd
00007e  4604              MOV      r4,r0
                  |L2.128|
;;;101    			if(Goal.Yaw<0 && AngE.Yaw>0)  deviation_yaw= (180 - AngE.Yaw) +(Goal.Yaw + 180);
000080  2100              MOVS     r1,#0
000082  9802              LDR      r0,[sp,#8]
000084  f7fffffe          BL       __aeabi_cfcmple
000088  d21b              BCS      |L2.194|
00008a  493e              LDR      r1,|L2.388|
00008c  6888              LDR      r0,[r1,#8]  ; AngE
00008e  2100              MOVS     r1,#0
000090  f7fffffe          BL       __aeabi_cfrcmple
000094  d215              BCS      |L2.194|
000096  493c              LDR      r1,|L2.392|
000098  9802              LDR      r0,[sp,#8]
00009a  f7fffffe          BL       __aeabi_fadd
00009e  4605              MOV      r5,r0
0000a0  4838              LDR      r0,|L2.388|
0000a2  6881              LDR      r1,[r0,#8]  ; AngE
0000a4  4838              LDR      r0,|L2.392|
0000a6  f7fffffe          BL       __aeabi_fsub
0000aa  4680              MOV      r8,r0
0000ac  4629              MOV      r1,r5
0000ae  f7fffffe          BL       __aeabi_fadd
0000b2  4604              MOV      r4,r0
0000b4  e005              B        |L2.194|
                  |L2.182|
;;;102    		}
;;;103        else  deviation_yaw = Goal.Yaw - AngE.Yaw;
0000b6  4a33              LDR      r2,|L2.388|
0000b8  6891              LDR      r1,[r2,#8]  ; AngE
0000ba  9802              LDR      r0,[sp,#8]
0000bc  f7fffffe          BL       __aeabi_fsub
0000c0  4604              MOV      r4,r0
                  |L2.194|
;;;104    		
;;;105    		// 角度误差积分
;;;106    		ctrl.pitch.shell.increment += deviation_pitch;
0000c2  492f              LDR      r1,|L2.384|
0000c4  6908              LDR      r0,[r1,#0x10]
0000c6  4631              MOV      r1,r6
0000c8  f7fffffe          BL       __aeabi_fadd
0000cc  492c              LDR      r1,|L2.384|
0000ce  6108              STR      r0,[r1,#0x10]
;;;107    		ctrl.roll.shell.increment  += deviation_roll;
0000d0  6d88              LDR      r0,[r1,#0x58]
0000d2  4639              MOV      r1,r7
0000d4  f7fffffe          BL       __aeabi_fadd
0000d8  4929              LDR      r1,|L2.384|
0000da  6588              STR      r0,[r1,#0x58]
;;;108    		
;;;109    		// 误差积分限幅
;;;110    		ctrl.pitch.shell.increment = data_limit(ctrl.pitch.shell.increment,ctrl.pitch.shell.increment_max,-ctrl.pitch.shell.increment_max);
0000dc  4608              MOV      r0,r1
0000de  6940              LDR      r0,[r0,#0x14]
0000e0  f0804500          EOR      r5,r0,#0x80000000
0000e4  460a              MOV      r2,r1
0000e6  6951              LDR      r1,[r2,#0x14]
0000e8  6910              LDR      r0,[r2,#0x10]
0000ea  462a              MOV      r2,r5
0000ec  f7fffffe          BL       data_limit
0000f0  4923              LDR      r1,|L2.384|
0000f2  6108              STR      r0,[r1,#0x10]
;;;111    		ctrl.roll.shell.increment  = data_limit(ctrl.roll.shell.increment,ctrl.pitch.shell.increment_max,-ctrl.pitch.shell.increment_max);
0000f4  4608              MOV      r0,r1
0000f6  6940              LDR      r0,[r0,#0x14]
0000f8  f0804500          EOR      r5,r0,#0x80000000
0000fc  460a              MOV      r2,r1
0000fe  6951              LDR      r1,[r2,#0x14]
000100  6d90              LDR      r0,[r2,#0x58]
000102  462a              MOV      r2,r5
000104  e000              B        |L2.264|
                  |L2.262|
000106  e02f              B        |L2.360|
                  |L2.264|
000108  f7fffffe          BL       data_limit
00010c  491c              LDR      r1,|L2.384|
00010e  6588              STR      r0,[r1,#0x58]
;;;112    		//= data_limit()
;;;113    
;;;114    
;;;115    		// 角度PID输出->作为内环角速度目标量
;;;116    		ctrl.pitch.shell.pid_out = ctrl.pitch.shell.kp * deviation_pitch + ctrl.pitch.shell.ki * ctrl.pitch.shell.increment;
000110  460a              MOV      r2,r1
000112  6911              LDR      r1,[r2,#0x10]
000114  6890              LDR      r0,[r2,#8]
000116  f7fffffe          BL       __aeabi_fmul
00011a  4605              MOV      r5,r0
00011c  4918              LDR      r1,|L2.384|
00011e  6848              LDR      r0,[r1,#4]  ; ctrl
000120  4631              MOV      r1,r6
000122  f7fffffe          BL       __aeabi_fmul
000126  4680              MOV      r8,r0
000128  4629              MOV      r1,r5
00012a  f7fffffe          BL       __aeabi_fadd
00012e  4914              LDR      r1,|L2.384|
000130  6248              STR      r0,[r1,#0x24]
;;;117    		ctrl.roll.shell.pid_out  = ctrl.roll.shell.kp * deviation_roll + ctrl.roll.shell.ki * ctrl.roll.shell.increment;
000132  460a              MOV      r2,r1
000134  6d91              LDR      r1,[r2,#0x58]
000136  6d10              LDR      r0,[r2,#0x50]
000138  f7fffffe          BL       __aeabi_fmul
00013c  4605              MOV      r5,r0
00013e  4910              LDR      r1,|L2.384|
000140  6cc8              LDR      r0,[r1,#0x4c]  ; ctrl
000142  4639              MOV      r1,r7
000144  f7fffffe          BL       __aeabi_fmul
000148  4680              MOV      r8,r0
00014a  4629              MOV      r1,r5
00014c  f7fffffe          BL       __aeabi_fadd
000150  490b              LDR      r1,|L2.384|
000152  66c8              STR      r0,[r1,#0x6c]
;;;118        ctrl.yaw.shell.pid_out   = ctrl.yaw.shell.kp * deviation_yaw;
000154  f8d10094          LDR      r0,[r1,#0x94]  ; ctrl
000158  4621              MOV      r1,r4
00015a  f7fffffe          BL       __aeabi_fmul
00015e  4908              LDR      r1,|L2.384|
000160  f8c100b4          STR      r0,[r1,#0xb4]
;;;119    		
;;;120        ctrl.ctrlRate = 0; 
000164  2000              MOVS     r0,#0
000166  7008              STRB     r0,[r1,#0]
                  |L2.360|
;;;121    	}
;;;122    	ctrl.ctrlRate ++;
000168  4805              LDR      r0,|L2.384|
00016a  7800              LDRB     r0,[r0,#0]  ; ctrl
00016c  1c40              ADDS     r0,r0,#1
00016e  4904              LDR      r1,|L2.384|
000170  7008              STRB     r0,[r1,#0]
;;;123    	Attitude_RatePID(0.002f);
000172  4807              LDR      r0,|L2.400|
000174  f7fffffe          BL       Attitude_RatePID
;;;124    //	if(baixu == 0)
;;;125    	Motor_Conter();
000178  f7fffffe          BL       Motor_Conter
;;;126    //	else
;;;127    //	Motor_Conter_1();
;;;128    }
00017c  e8bd81ff          POP      {r0-r8,pc}
;;;129    
                          ENDP

                  |L2.384|
                          DCD      ctrl
                  |L2.388|
                          DCD      AngE
                  |L2.392|
                          DCD      0x43340000
                  |L2.396|
                          DCD      0xc3340000
                  |L2.400|
                          DCD      0x3b03126f

                          AREA ||i.Calculate_Target||, CODE, READONLY, ALIGN=2

                  Calculate_Target PROC
;;;31     /*====================================================================================================*/
;;;32     void Calculate_Target(void) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;33     {
;;;34     	int16_t ftemp=0;
000004  2400              MOVS     r4,#0
;;;35     	static u8 al_flag=0;
;;;36     	
;;;37     	Target.Pitch = (1500-RC_Data.PITCH)/(20 + 7*RC_Data.SENSITIVITY);
000006  4871              LDR      r0,|L3.460|
000008  f9b0000e          LDRSH    r0,[r0,#0xe]  ; RC_Data
00000c  f24051dc          MOV      r1,#0x5dc
000010  1a09              SUBS     r1,r1,r0
000012  486e              LDR      r0,|L3.460|
000014  f9b00014          LDRSH    r0,[r0,#0x14]  ; RC_Data
000018  ebc000c0          RSB      r0,r0,r0,LSL #3
00001c  3014              ADDS     r0,r0,#0x14
00001e  fb91f5f0          SDIV     r5,r1,r0
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       __aeabi_i2f
000028  4969              LDR      r1,|L3.464|
00002a  6008              STR      r0,[r1,#0]  ; Target
;;;38     	Target.Roll = (RC_Data.ROLL-1500)/(20 + 7*RC_Data.SENSITIVITY);
00002c  4867              LDR      r0,|L3.460|
00002e  f9b0000c          LDRSH    r0,[r0,#0xc]  ; RC_Data
000032  f2a050dc          SUB      r0,r0,#0x5dc
000036  4965              LDR      r1,|L3.460|
000038  f9b11014          LDRSH    r1,[r1,#0x14]  ; RC_Data
00003c  ebc101c1          RSB      r1,r1,r1,LSL #3
000040  3114              ADDS     r1,r1,#0x14
000042  fb90f5f1          SDIV     r5,r0,r1
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       __aeabi_i2f
00004c  4960              LDR      r1,|L3.464|
00004e  6048              STR      r0,[r1,#4]  ; Target
;;;39     
;;;40       //目标航向控制。当油门大于最小检查值时，认为用户希望起飞。那么此时的航向做为目标航向
;;;41        if(RC_Data.THROTTLE > RC_MINCHECK ) 
000050  485e              LDR      r0,|L3.460|
000052  f9b00010          LDRSH    r0,[r0,#0x10]  ; RC_Data
000056  f5b06f96          CMP      r0,#0x4b0
00005a  dd0b              BLE      |L3.116|
;;;42        {
;;;43           if(flag.LockYaw != 1){  
00005c  485d              LDR      r0,|L3.468|
00005e  7900              LDRB     r0,[r0,#4]  ; flag
000060  2801              CMP      r0,#1
000062  d00e              BEQ      |L3.130|
;;;44     				 flag.LockYaw = 1;
000064  2001              MOVS     r0,#1
000066  495b              LDR      r1,|L3.468|
000068  7108              STRB     r0,[r1,#4]
;;;45     	       Target.Yaw = AngE.Yaw; //将当前的航向做为目标航向
00006a  485b              LDR      r0,|L3.472|
00006c  6880              LDR      r0,[r0,#8]  ; AngE
00006e  4958              LDR      r1,|L3.464|
000070  6088              STR      r0,[r1,#8]  ; Target
000072  e006              B        |L3.130|
                  |L3.116|
;;;46           }
;;;47        }
;;;48        else 
;;;49        {
;;;50     		 flag.LockYaw = 0;	
000074  2000              MOVS     r0,#0
000076  4957              LDR      r1,|L3.468|
000078  7108              STRB     r0,[r1,#4]
;;;51     		 Target.Yaw = AngE.Yaw;
00007a  4857              LDR      r0,|L3.472|
00007c  6880              LDR      r0,[r0,#8]  ; AngE
00007e  4954              LDR      r1,|L3.464|
000080  6088              STR      r0,[r1,#8]  ; Target
                  |L3.130|
;;;52         } 
;;;53     	//航向在中点设置一个死区
;;;54     	if((RC_Data.YAW > 1600)||(RC_Data.YAW < 1400)){
000082  4852              LDR      r0,|L3.460|
000084  f9b00012          LDRSH    r0,[r0,#0x12]  ; RC_Data
000088  f5b06fc8          CMP      r0,#0x640
00008c  dc05              BGT      |L3.154|
00008e  484f              LDR      r0,|L3.460|
000090  f9b00012          LDRSH    r0,[r0,#0x12]  ; RC_Data
000094  f5b06faf          CMP      r0,#0x578
000098  da32              BGE      |L3.256|
                  |L3.154|
;;;55     		ftemp = 1500 - RC_Data.YAW; 
00009a  484c              LDR      r0,|L3.460|
00009c  8a40              LDRH     r0,[r0,#0x12]  ; RC_Data
00009e  f24051dc          MOV      r1,#0x5dc
0000a2  1a08              SUBS     r0,r1,r0
0000a4  b204              SXTH     r4,r0
;;;56     	  Target.Yaw += (ftemp / 200.0f)*0.1f; 
0000a6  4620              MOV      r0,r4
0000a8  f7fffffe          BL       __aeabi_i2f
0000ac  4607              MOV      r7,r0
0000ae  494b              LDR      r1,|L3.476|
0000b0  f7fffffe          BL       __aeabi_fdiv
0000b4  4606              MOV      r6,r0
0000b6  494a              LDR      r1,|L3.480|
0000b8  f7fffffe          BL       __aeabi_fmul
0000bc  4605              MOV      r5,r0
0000be  4844              LDR      r0,|L3.464|
0000c0  6881              LDR      r1,[r0,#8]  ; Target
0000c2  4628              MOV      r0,r5
0000c4  f7fffffe          BL       __aeabi_fadd
0000c8  4941              LDR      r1,|L3.464|
0000ca  6088              STR      r0,[r1,#8]  ; Target
;;;57     		
;;;58     		//转[-180.0,+180.0]
;;;59     	  if(Target.Yaw >180.0f) Target.Yaw -= 360.0f;	
0000cc  6888              LDR      r0,[r1,#8]  ; Target
0000ce  4945              LDR      r1,|L3.484|
0000d0  f7fffffe          BL       __aeabi_cfrcmple
0000d4  d207              BCS      |L3.230|
0000d6  493e              LDR      r1,|L3.464|
0000d8  6888              LDR      r0,[r1,#8]  ; Target
0000da  4943              LDR      r1,|L3.488|
0000dc  f7fffffe          BL       __aeabi_fsub
0000e0  493b              LDR      r1,|L3.464|
0000e2  6088              STR      r0,[r1,#8]  ; Target
0000e4  e00c              B        |L3.256|
                  |L3.230|
;;;60     	  else if(Target.Yaw <-180.0f)Target.Yaw += 360.0f;
0000e6  493a              LDR      r1,|L3.464|
0000e8  6888              LDR      r0,[r1,#8]  ; Target
0000ea  4940              LDR      r1,|L3.492|
0000ec  f7fffffe          BL       __aeabi_cfcmple
0000f0  d206              BCS      |L3.256|
0000f2  4937              LDR      r1,|L3.464|
0000f4  6888              LDR      r0,[r1,#8]  ; Target
0000f6  493c              LDR      r1,|L3.488|
0000f8  f7fffffe          BL       __aeabi_fadd
0000fc  4934              LDR      r1,|L3.464|
0000fe  6088              STR      r0,[r1,#8]  ; Target
                  |L3.256|
;;;61     	}
;;;62     	if(flag.FlightMode){
000100  4834              LDR      r0,|L3.468|
000102  7a40              LDRB     r0,[r0,#9]  ; flag
000104  2800              CMP      r0,#0
000106  d05b              BEQ      |L3.448|
;;;63         if(al_flag !=1){
000108  4839              LDR      r0,|L3.496|
00010a  7800              LDRB     r0,[r0,#0]  ; al_flag
00010c  2801              CMP      r0,#1
00010e  d006              BEQ      |L3.286|
;;;64     		  al_flag =1;
000110  2001              MOVS     r0,#1
000112  4937              LDR      r1,|L3.496|
000114  7008              STRB     r0,[r1,#0]
;;;65     			Target.Altiude = US100_Alt;//20;
000116  4837              LDR      r0,|L3.500|
000118  6800              LDR      r0,[r0,#0]  ; US100_Alt
00011a  492d              LDR      r1,|L3.464|
00011c  60c8              STR      r0,[r1,#0xc]  ; Target
                  |L3.286|
;;;66     		}
;;;67     		if((RC_Data.THROTTLE > 1600)||(RC_Data.THROTTLE < 1400))
00011e  482b              LDR      r0,|L3.460|
000120  f9b00010          LDRSH    r0,[r0,#0x10]  ; RC_Data
000124  f5b06fc8          CMP      r0,#0x640
000128  dc05              BGT      |L3.310|
00012a  4828              LDR      r0,|L3.460|
00012c  f9b00010          LDRSH    r0,[r0,#0x10]  ; RC_Data
000130  f5b06faf          CMP      r0,#0x578
000134  da47              BGE      |L3.454|
                  |L3.310|
;;;68     		{
;;;69     			if(RC_Data.THROTTLE > 1600)		Target.Altiude +=  (float)(RC_Data.THROTTLE -1600)/500;
000136  4825              LDR      r0,|L3.460|
000138  f9b00010          LDRSH    r0,[r0,#0x10]  ; RC_Data
00013c  f5b06fc8          CMP      r0,#0x640
000140  dd12              BLE      |L3.360|
000142  4922              LDR      r1,|L3.460|
000144  f9b11010          LDRSH    r1,[r1,#0x10]  ; RC_Data
000148  f5a160c8          SUB      r0,r1,#0x640
00014c  f7fffffe          BL       __aeabi_i2f
000150  4606              MOV      r6,r0
000152  4929              LDR      r1,|L3.504|
000154  f7fffffe          BL       __aeabi_fdiv
000158  4605              MOV      r5,r0
00015a  481d              LDR      r0,|L3.464|
00015c  68c1              LDR      r1,[r0,#0xc]  ; Target
00015e  4628              MOV      r0,r5
000160  f7fffffe          BL       __aeabi_fadd
000164  491a              LDR      r1,|L3.464|
000166  60c8              STR      r0,[r1,#0xc]  ; Target
                  |L3.360|
;;;70     			if(RC_Data.THROTTLE < 1400)		Target.Altiude +=  (float)(RC_Data.THROTTLE -1400)/500;
000168  4818              LDR      r0,|L3.460|
00016a  f9b00010          LDRSH    r0,[r0,#0x10]  ; RC_Data
00016e  f5b06faf          CMP      r0,#0x578
000172  da12              BGE      |L3.410|
000174  4915              LDR      r1,|L3.460|
000176  f9b11010          LDRSH    r1,[r1,#0x10]  ; RC_Data
00017a  f5a160af          SUB      r0,r1,#0x578
00017e  f7fffffe          BL       __aeabi_i2f
000182  4606              MOV      r6,r0
000184  491c              LDR      r1,|L3.504|
000186  f7fffffe          BL       __aeabi_fdiv
00018a  4605              MOV      r5,r0
00018c  4810              LDR      r0,|L3.464|
00018e  68c1              LDR      r1,[r0,#0xc]  ; Target
000190  4628              MOV      r0,r5
000192  f7fffffe          BL       __aeabi_fadd
000196  490e              LDR      r1,|L3.464|
000198  60c8              STR      r0,[r1,#0xc]  ; Target
                  |L3.410|
;;;71     			if(Target.Altiude>50) Target.Altiude=50;
00019a  490d              LDR      r1,|L3.464|
00019c  68c8              LDR      r0,[r1,#0xc]  ; Target
00019e  4917              LDR      r1,|L3.508|
0001a0  f7fffffe          BL       __aeabi_cfrcmple
0001a4  d202              BCS      |L3.428|
0001a6  4815              LDR      r0,|L3.508|
0001a8  4909              LDR      r1,|L3.464|
0001aa  60c8              STR      r0,[r1,#0xc]  ; Target
                  |L3.428|
;;;72     			if(Target.Altiude<10) Target.Altiude=10;
0001ac  4908              LDR      r1,|L3.464|
0001ae  68c8              LDR      r0,[r1,#0xc]  ; Target
0001b0  4913              LDR      r1,|L3.512|
0001b2  f7fffffe          BL       __aeabi_cfcmple
0001b6  d206              BCS      |L3.454|
0001b8  4811              LDR      r0,|L3.512|
0001ba  4905              LDR      r1,|L3.464|
0001bc  60c8              STR      r0,[r1,#0xc]  ; Target
0001be  e002              B        |L3.454|
                  |L3.448|
;;;73     		}
;;;74     	}
;;;75     	else al_flag = 0;
0001c0  2000              MOVS     r0,#0
0001c2  490b              LDR      r1,|L3.496|
0001c4  7008              STRB     r0,[r1,#0]
                  |L3.454|
;;;76     }
0001c6  e8bd81f0          POP      {r4-r8,pc}
;;;77     
                          ENDP

0001ca  0000              DCW      0x0000
                  |L3.460|
                          DCD      RC_Data
                  |L3.464|
                          DCD      Target
                  |L3.468|
                          DCD      flag
                  |L3.472|
                          DCD      AngE
                  |L3.476|
                          DCD      0x43480000
                  |L3.480|
                          DCD      0x3dcccccd
                  |L3.484|
                          DCD      0x43340000
                  |L3.488|
                          DCD      0x43b40000
                  |L3.492|
                          DCD      0xc3340000
                  |L3.496|
                          DCD      al_flag
                  |L3.500|
                          DCD      US100_Alt
                  |L3.504|
                          DCD      0x43fa0000
                  |L3.508|
                          DCD      0x42480000
                  |L3.512|
                          DCD      0x41200000

                          AREA ||i.Motor_Conter||, CODE, READONLY, ALIGN=2

                  Motor_Conter PROC
;;;193    /*====================================================================================================*/
;;;194    void Motor_Conter(void)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;195    {
;;;196    	s16 pitch,roll,yaw;
;;;197    	
;;;198    	pitch = ctrl.pitch.core.pid_out;
000004  494c              LDR      r1,|L4.312|
000006  6c88              LDR      r0,[r1,#0x48]
000008  f7fffffe          BL       __aeabi_f2iz
00000c  b204              SXTH     r4,r0
;;;199    	roll  = ctrl.roll.core.pid_out;    
00000e  494a              LDR      r1,|L4.312|
000010  f8d10090          LDR      r0,[r1,#0x90]
000014  f7fffffe          BL       __aeabi_f2iz
000018  b205              SXTH     r5,r0
;;;200    	yaw   = -ctrl.yaw.core.pid_out;
00001a  4847              LDR      r0,|L4.312|
00001c  f8d000d8          LDR      r0,[r0,#0xd8]
000020  f0804700          EOR      r7,r0,#0x80000000
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       __aeabi_f2iz
00002a  b206              SXTH     r6,r0
;;;201    	
;;;202    	if(flag.FlightMode)
00002c  4843              LDR      r0,|L4.316|
00002e  7a40              LDRB     r0,[r0,#9]  ; flag
000030  2800              CMP      r0,#0
000032  d07b              BEQ      |L4.300|
;;;203    	{
;;;204    		Moto_duty[0] = g_HightPwm - pitch - roll + yaw;
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       __aeabi_i2f
00003a  4682              MOV      r10,r0
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       __aeabi_i2f
000042  4683              MOV      r11,r0
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       __aeabi_i2f
00004a  9000              STR      r0,[sp,#0]
00004c  483c              LDR      r0,|L4.320|
00004e  6801              LDR      r1,[r0,#0]  ; g_HightPwm
000050  9800              LDR      r0,[sp,#0]
000052  f7fffffe          BL       __aeabi_frsub
000056  4681              MOV      r9,r0
000058  4659              MOV      r1,r11
00005a  f7fffffe          BL       __aeabi_fsub
00005e  4680              MOV      r8,r0
000060  4651              MOV      r1,r10
000062  f7fffffe          BL       __aeabi_fadd
000066  4607              MOV      r7,r0
000068  f7fffffe          BL       __aeabi_f2iz
00006c  b200              SXTH     r0,r0
00006e  4935              LDR      r1,|L4.324|
000070  8008              STRH     r0,[r1,#0]
;;;205    		Moto_duty[1] = g_HightPwm - pitch + roll - yaw;
000072  4630              MOV      r0,r6
000074  f7fffffe          BL       __aeabi_i2f
000078  4682              MOV      r10,r0
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       __aeabi_i2f
000080  9000              STR      r0,[sp,#0]
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       __aeabi_i2f
000088  4683              MOV      r11,r0
00008a  482d              LDR      r0,|L4.320|
00008c  6801              LDR      r1,[r0,#0]  ; g_HightPwm
00008e  4658              MOV      r0,r11
000090  f7fffffe          BL       __aeabi_frsub
000094  4681              MOV      r9,r0
000096  9900              LDR      r1,[sp,#0]
000098  f7fffffe          BL       __aeabi_fadd
00009c  4680              MOV      r8,r0
00009e  4651              MOV      r1,r10
0000a0  f7fffffe          BL       __aeabi_fsub
0000a4  4607              MOV      r7,r0
0000a6  f7fffffe          BL       __aeabi_f2iz
0000aa  b200              SXTH     r0,r0
0000ac  4925              LDR      r1,|L4.324|
0000ae  8048              STRH     r0,[r1,#2]
;;;206    		Moto_duty[2] = g_HightPwm + pitch + roll + yaw;
0000b0  4630              MOV      r0,r6
0000b2  f7fffffe          BL       __aeabi_i2f
0000b6  9000              STR      r0,[sp,#0]
0000b8  4628              MOV      r0,r5
0000ba  f7fffffe          BL       __aeabi_i2f
0000be  4682              MOV      r10,r0
0000c0  4620              MOV      r0,r4
0000c2  f7fffffe          BL       __aeabi_i2f
0000c6  4683              MOV      r11,r0
0000c8  481d              LDR      r0,|L4.320|
0000ca  6801              LDR      r1,[r0,#0]  ; g_HightPwm
0000cc  4658              MOV      r0,r11
0000ce  f7fffffe          BL       __aeabi_fadd
0000d2  4681              MOV      r9,r0
0000d4  4651              MOV      r1,r10
0000d6  f7fffffe          BL       __aeabi_fadd
0000da  4680              MOV      r8,r0
0000dc  9900              LDR      r1,[sp,#0]
0000de  f7fffffe          BL       __aeabi_fadd
0000e2  4607              MOV      r7,r0
0000e4  f7fffffe          BL       __aeabi_f2iz
0000e8  b200              SXTH     r0,r0
0000ea  4916              LDR      r1,|L4.324|
0000ec  8088              STRH     r0,[r1,#4]
;;;207    		Moto_duty[3] = g_HightPwm + pitch - roll - yaw;
0000ee  4630              MOV      r0,r6
0000f0  f7fffffe          BL       __aeabi_i2f
0000f4  9000              STR      r0,[sp,#0]
0000f6  4628              MOV      r0,r5
0000f8  f7fffffe          BL       __aeabi_i2f
0000fc  4682              MOV      r10,r0
0000fe  4620              MOV      r0,r4
000100  f7fffffe          BL       __aeabi_i2f
000104  4683              MOV      r11,r0
000106  480e              LDR      r0,|L4.320|
000108  6801              LDR      r1,[r0,#0]  ; g_HightPwm
00010a  4658              MOV      r0,r11
00010c  f7fffffe          BL       __aeabi_fadd
000110  4681              MOV      r9,r0
000112  4651              MOV      r1,r10
000114  f7fffffe          BL       __aeabi_fsub
000118  4680              MOV      r8,r0
00011a  9900              LDR      r1,[sp,#0]
00011c  f7fffffe          BL       __aeabi_fsub
000120  4607              MOV      r7,r0
000122  f7fffffe          BL       __aeabi_f2iz
000126  b200              SXTH     r0,r0
000128  4906              LDR      r1,|L4.324|
00012a  80c8              STRH     r0,[r1,#6]
                  |L4.300|
;;;208    
;;;209    	}
;;;210    //	else if(RC_Data.THROTTLE > RC_MINCHECK) 
;;;211    //	{
;;;212    //		int date_throttle	= (RC_Data.THROTTLE-1000)/cos(AngE.Roll/RtA)/cos(AngE.Pitch/RtA);
;;;213    //		
;;;214    //		Moto_duty[0] = date_throttle - pitch - roll + yaw;
;;;215    //		Moto_duty[1] = date_throttle - pitch + roll - yaw;
;;;216    //		Moto_duty[2] = date_throttle + pitch + roll + yaw;
;;;217    //		Moto_duty[3] = date_throttle + pitch - roll - yaw;
;;;218    //	}
;;;219    //	else
;;;220    //	{	
;;;221    //	    Moto_duty[0] = Moto_duty[1] = Moto_duty[2] = Moto_duty[3] = IDLING;	
;;;222    //		Reset_Integral();		
;;;223    //	}
;;;224    //	if(flag.ARMED) //飞控上锁标志位(锁定飞控)
;;;225    	moto_PwmRflash(&Moto_duty[0]);		
00012c  4805              LDR      r0,|L4.324|
00012e  f7fffffe          BL       moto_PwmRflash
;;;226    //	else            moto_STOP();	
;;;227    }
000132  e8bd8ff8          POP      {r3-r11,pc}
;;;228    //
                          ENDP

000136  0000              DCW      0x0000
                  |L4.312|
                          DCD      ctrl
                  |L4.316|
                          DCD      flag
                  |L4.320|
                          DCD      g_HightPwm
                  |L4.324|
                          DCD      Moto_duty

                          AREA ||i.Reset_Integral||, CODE, READONLY, ALIGN=2

                  Reset_Integral PROC
;;;270    /*====================================================================================================*/
;;;271    void Reset_Integral(void)
000000  2100              MOVS     r1,#0
;;;272    {
;;;273    	ctrl.pitch.shell.increment = 0;
000002  4804              LDR      r0,|L5.20|
000004  6101              STR      r1,[r0,#0x10]
;;;274    	ctrl.roll.shell.increment= 0;	
000006  6581              STR      r1,[r0,#0x58]
;;;275    	ctrl.pitch.core.increment = 0;		
000008  6341              STR      r1,[r0,#0x34]
;;;276    	ctrl.roll.core.increment = 0;		
00000a  67c1              STR      r1,[r0,#0x7c]
;;;277    	ctrl.yaw.core.increment = 0;
00000c  f8c010c4          STR      r1,[r0,#0xc4]
;;;278    }
000010  4770              BX       lr
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      ctrl

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ctrl
                          %        220
                  Target
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  motor_array
                          DCD      Moto_duty
                  al_flag
000004  0000              DCB      0x00,0x00
                  Moto_duty
000006  0000              DCB      0x00,0x00
                          DCD      0x00000000
00000c  0000              DCB      0x00,0x00
