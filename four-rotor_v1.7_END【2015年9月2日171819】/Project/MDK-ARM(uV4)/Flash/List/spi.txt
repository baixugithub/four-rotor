; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\spi.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\spi.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\sys -ID:\KEIL\KEIL_Pro\KEIL_5\ARM\RV31\INC -ID:\KEIL\KEIL_Pro\KEIL_5\ARM\CMSIS\Include -ID:\KEIL\KEIL_Pro\KEIL_5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\spi.crf ..\..\User\Driver\SPI\Spi.c]
                          THUMB

                          AREA ||i.SPI3_Config||, CODE, READONLY, ALIGN=2

                  SPI3_Config PROC
;;;11     
;;;12     void SPI3_Config(void)
000000  b500              PUSH     {lr}
;;;13     { 
000002  b087              SUB      sp,sp,#0x1c
;;;14     		GPIO_InitTypeDef GPIO_InitStructure;
;;;15     		SPI_InitTypeDef  SPI_InitStructure;
;;;16     	  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3,ENABLE);  
000004  2101              MOVS     r1,#1
000006  03c8              LSLS     r0,r1,#15
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;17         RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|
00000c  2101              MOVS     r1,#1
00000e  202d              MOVS     r0,#0x2d
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;18     	                         RCC_APB2Periph_GPIOB|
;;;19     	                         RCC_APB2Periph_GPIOD|
;;;20     	                         RCC_APB2Periph_AFIO, ENABLE);  
;;;21         
;;;22         //  PA5--CLK  PA7--MOSI  
;;;23         GPIO_InitStructure.GPIO_Pin   =  GPIO_Pin_3|GPIO_Pin_5; 
000014  2028              MOVS     r0,#0x28
000016  f8ad0018          STRH     r0,[sp,#0x18]
;;;24         GPIO_InitStructure.GPIO_Speed =  GPIO_Speed_50MHz; 
00001a  2003              MOVS     r0,#3
00001c  f88d001a          STRB     r0,[sp,#0x1a]
;;;25         GPIO_InitStructure.GPIO_Mode  =  GPIO_Mode_AF_PP; 
000020  2018              MOVS     r0,#0x18
000022  f88d001b          STRB     r0,[sp,#0x1b]
;;;26         GPIO_Init(GPIOB, &GPIO_InitStructure);
000026  a906              ADD      r1,sp,#0x18
000028  482e              LDR      r0,|L1.228|
00002a  f7fffffe          BL       GPIO_Init
;;;27     	
;;;28         //PA6--MISO 
;;;29         GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_4; 
00002e  2010              MOVS     r0,#0x10
000030  f8ad0018          STRH     r0,[sp,#0x18]
;;;30         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; 
000034  2004              MOVS     r0,#4
000036  f88d001b          STRB     r0,[sp,#0x1b]
;;;31         GPIO_Init(GPIOB, &GPIO_InitStructure);
00003a  a906              ADD      r1,sp,#0x18
00003c  4829              LDR      r0,|L1.228|
00003e  f7fffffe          BL       GPIO_Init
;;;32     	
;;;33         //PA4--NSS
;;;34         GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_15; 
000042  f44f4000          MOV      r0,#0x8000
000046  f8ad0018          STRH     r0,[sp,#0x18]
;;;35         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
00004a  2003              MOVS     r0,#3
00004c  f88d001a          STRB     r0,[sp,#0x1a]
;;;36         GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP; 
000050  2010              MOVS     r0,#0x10
000052  f88d001b          STRB     r0,[sp,#0x1b]
;;;37         GPIO_Init(GPIOA, &GPIO_InitStructure);
000056  a906              ADD      r1,sp,#0x18
000058  4823              LDR      r0,|L1.232|
00005a  f7fffffe          BL       GPIO_Init
;;;38      
;;;39     		//PC2--CE
;;;40         GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_3; 
00005e  2008              MOVS     r0,#8
000060  f8ad0018          STRH     r0,[sp,#0x18]
;;;41         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
000064  2003              MOVS     r0,#3
000066  f88d001a          STRB     r0,[sp,#0x1a]
;;;42         GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP; 
00006a  2010              MOVS     r0,#0x10
00006c  f88d001b          STRB     r0,[sp,#0x1b]
;;;43         GPIO_Init(GPIOD, &GPIO_InitStructure);
000070  a906              ADD      r1,sp,#0x18
000072  481e              LDR      r0,|L1.236|
000074  f7fffffe          BL       GPIO_Init
;;;44     		
;;;45     		//PC3--IRQ  
;;;46         GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_4;   
000078  2010              MOVS     r0,#0x10
00007a  f8ad0018          STRH     r0,[sp,#0x18]
;;;47     		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
00007e  2003              MOVS     r0,#3
000080  f88d001a          STRB     r0,[sp,#0x1a]
;;;48         GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPU; //上拉输入
000084  2048              MOVS     r0,#0x48
000086  f88d001b          STRB     r0,[sp,#0x1b]
;;;49         GPIO_Init(GPIOD, &GPIO_InitStructure);
00008a  a906              ADD      r1,sp,#0x18
00008c  4817              LDR      r0,|L1.236|
00008e  f7fffffe          BL       GPIO_Init
;;;50      
;;;51     	                     
;;;52         SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex; //全双工
000092  2000              MOVS     r0,#0
000094  f8ad0004          STRH     r0,[sp,#4]
;;;53     		SPI_InitStructure.SPI_Mode = SPI_Mode_Master;                      //主模式
000098  f44f7082          MOV      r0,#0x104
00009c  f8ad0006          STRH     r0,[sp,#6]
;;;54     		SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;                  //一次转换8位
0000a0  2000              MOVS     r0,#0
0000a2  f8ad0008          STRH     r0,[sp,#8]
;;;55     		SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;                        //空闲电平低电平
0000a6  f8ad000a          STRH     r0,[sp,#0xa]
;;;56     		SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;                      //第一个上升沿采样
0000aa  f8ad000c          STRH     r0,[sp,#0xc]
;;;57     		SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;                         // NSS为软件模式
0000ae  f44f7000          MOV      r0,#0x200
0000b2  f8ad000e          STRH     r0,[sp,#0xe]
;;;58     		SPI_InitStructure.SPI_BaudRatePrescaler =SPI_BaudRatePrescaler_32; //
0000b6  2020              MOVS     r0,#0x20
0000b8  f8ad0010          STRH     r0,[sp,#0x10]
;;;59     		SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;        					//数据传输低位在前
0000bc  2000              MOVS     r0,#0
0000be  f8ad0012          STRH     r0,[sp,#0x12]
;;;60     		SPI_InitStructure.SPI_CRCPolynomial = 7;                           //CRC校验模式
0000c2  2007              MOVS     r0,#7
0000c4  f8ad0014          STRH     r0,[sp,#0x14]
;;;61         SPI_Init(SPI3, &SPI_InitStructure);                                //初始化
0000c8  a901              ADD      r1,sp,#4
0000ca  4809              LDR      r0,|L1.240|
0000cc  f7fffffe          BL       SPI_Init
;;;62         
;;;63        // SPI_NSSInternalSoftwareConfig(SPI1, SPI_NSSInternalSoft_Set);
;;;64         
;;;65         SPI_Cmd(SPI3, ENABLE); //SPI1
0000d0  2101              MOVS     r1,#1
0000d2  4807              LDR      r0,|L1.240|
0000d4  f7fffffe          BL       SPI_Cmd
;;;66     		SPI3_ReadWriteByte(0xff);//启动传输	
0000d8  20ff              MOVS     r0,#0xff
0000da  f7fffffe          BL       SPI3_ReadWriteByte
;;;67     }
0000de  b007              ADD      sp,sp,#0x1c
0000e0  bd00              POP      {pc}
;;;68     //SPI 速度设置函数
                          ENDP

0000e2  0000              DCW      0x0000
                  |L1.228|
                          DCD      0x40010c00
                  |L1.232|
                          DCD      0x40010800
                  |L1.236|
                          DCD      0x40011400
                  |L1.240|
                          DCD      0x40003c00

                          AREA ||i.SPI3_ReadWriteByte||, CODE, READONLY, ALIGN=2

                  SPI3_ReadWriteByte PROC
;;;87     //返回值:读取到的字节
;;;88     u8 SPI3_ReadWriteByte(u8 TxData)
000000  b570              PUSH     {r4-r6,lr}
;;;89     {		
000002  4605              MOV      r5,r0
;;;90     	u8 retry=0;				 	
000004  2400              MOVS     r4,#0
;;;91     	while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) == RESET) //检查指定的SPI标志位设置与否:发送缓存空标志位
000006  e005              B        |L2.20|
                  |L2.8|
;;;92     		{
;;;93     		retry++;
000008  1c60              ADDS     r0,r4,#1
00000a  b2c4              UXTB     r4,r0
;;;94     		if(retry>200)return 0;
00000c  2cc8              CMP      r4,#0xc8
00000e  dd01              BLE      |L2.20|
000010  2000              MOVS     r0,#0
                  |L2.18|
;;;95     		}			  
;;;96     	SPI_I2S_SendData(SPI3, TxData); //通过外设SPIx发送一个数据
;;;97     	retry=0;
;;;98     
;;;99     	while (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_RXNE) == RESET)//检查指定的SPI标志位设置与否:接受缓存非空标志位
;;;100    		{
;;;101    		retry++;
;;;102    		if(retry>200)return 0;
;;;103    		}	  						    
;;;104    	return SPI_I2S_ReceiveData(SPI3); //返回通过SPIx最近接收的数据					    
;;;105    }
000012  bd70              POP      {r4-r6,pc}
                  |L2.20|
000014  2102              MOVS     r1,#2                 ;91
000016  480e              LDR      r0,|L2.80|
000018  f7fffffe          BL       SPI_I2S_GetFlagStatus
00001c  2800              CMP      r0,#0                 ;91
00001e  d0f3              BEQ      |L2.8|
000020  4629              MOV      r1,r5                 ;96
000022  480b              LDR      r0,|L2.80|
000024  f7fffffe          BL       SPI_I2S_SendData
000028  2400              MOVS     r4,#0                 ;97
00002a  e005              B        |L2.56|
                  |L2.44|
00002c  1c60              ADDS     r0,r4,#1              ;101
00002e  b2c4              UXTB     r4,r0                 ;101
000030  2cc8              CMP      r4,#0xc8              ;102
000032  dd01              BLE      |L2.56|
000034  2000              MOVS     r0,#0                 ;102
000036  e7ec              B        |L2.18|
                  |L2.56|
000038  2101              MOVS     r1,#1                 ;99
00003a  4805              LDR      r0,|L2.80|
00003c  f7fffffe          BL       SPI_I2S_GetFlagStatus
000040  2800              CMP      r0,#0                 ;99
000042  d0f3              BEQ      |L2.44|
000044  4802              LDR      r0,|L2.80|
000046  f7fffffe          BL       SPI_I2S_ReceiveData
00004a  b2c0              UXTB     r0,r0                 ;104
00004c  e7e1              B        |L2.18|
;;;106    
                          ENDP

00004e  0000              DCW      0x0000
                  |L2.80|
                          DCD      0x40003c00

                          AREA ||i.SPI3_SetSpeed||, CODE, READONLY, ALIGN=2

                  SPI3_SetSpeed PROC
;;;74       
;;;75     void SPI3_SetSpeed(u8 SPI_BaudRatePrescaler)
000000  b510              PUSH     {r4,lr}
;;;76     {
000002  4604              MOV      r4,r0
;;;77       assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));
;;;78     	SPI3->CR1&=0XFFC7;
000004  4807              LDR      r0,|L3.36|
000006  8800              LDRH     r0,[r0,#0]
000008  f64f71c7          MOV      r1,#0xffc7
00000c  4008              ANDS     r0,r0,r1
00000e  4905              LDR      r1,|L3.36|
000010  8008              STRH     r0,[r1,#0]
;;;79     	SPI3->CR1|=SPI_BaudRatePrescaler;	//设置SPI3速度 
000012  4608              MOV      r0,r1
000014  8800              LDRH     r0,[r0,#0]
000016  4320              ORRS     r0,r0,r4
000018  8008              STRH     r0,[r1,#0]
;;;80     	SPI_Cmd(SPI3,ENABLE); 
00001a  2101              MOVS     r1,#1
00001c  4801              LDR      r0,|L3.36|
00001e  f7fffffe          BL       SPI_Cmd
;;;81     
;;;82     } 
000022  bd10              POP      {r4,pc}
;;;83     
                          ENDP

                  |L3.36|
                          DCD      0x40003c00
