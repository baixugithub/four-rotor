; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\multirotor_radio.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\multirotor_radio.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\sys -ID:\KEIL\KEIL_Pro\KEIL_5\ARM\RV31\INC -ID:\KEIL\KEIL_Pro\KEIL_5\ARM\CMSIS\Include -ID:\KEIL\KEIL_Pro\KEIL_5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\multirotor_radio.crf ..\..\User\Function\MultiRotor_radio\MultiRotor_radio.c]
                          THUMB

                          AREA ||i.Float2Byte||, CODE, READONLY, ALIGN=1

                  Float2Byte PROC
;;;82     //beg:指定从数组第几个元素开始写入
;;;83     void Float2Byte(float *target,unsigned char *buf,unsigned char beg)
000000  b530              PUSH     {r4,r5,lr}
;;;84     {
;;;85         unsigned char *point;
;;;86         point = (unsigned char*)target;	  //得到float的地址
000002  4603              MOV      r3,r0
;;;87         buf[beg]   = point[0];
000004  781c              LDRB     r4,[r3,#0]
000006  548c              STRB     r4,[r1,r2]
;;;88         buf[beg+1] = point[1];
000008  785d              LDRB     r5,[r3,#1]
00000a  1c54              ADDS     r4,r2,#1
00000c  550d              STRB     r5,[r1,r4]
;;;89         buf[beg+2] = point[2];
00000e  789d              LDRB     r5,[r3,#2]
000010  1c94              ADDS     r4,r2,#2
000012  550d              STRB     r5,[r1,r4]
;;;90         buf[beg+3] = point[3];
000014  78dd              LDRB     r5,[r3,#3]
000016  1cd4              ADDS     r4,r2,#3
000018  550d              STRB     r5,[r1,r4]
;;;91     }
00001a  bd30              POP      {r4,r5,pc}
;;;92     
                          ENDP


                          AREA ||i.HtoEs_Attitude_Data_Generate||, CODE, READONLY, ALIGN=2

                  HtoEs_Attitude_Data_Generate PROC
;;;194    //生成姿态数据帧
;;;195    unsigned char HtoEs_Attitude_Data_Generate(void)
000000  b510              PUSH     {r4,lr}
;;;196    {
;;;197    	  unsigned char i;
;;;198    	
;;;199    	  HtoEs_OutPut_Buffer[0] = 0x0F; //帧长度 15字节
000002  200f              MOVS     r0,#0xf
000004  4917              LDR      r1,|L2.100|
000006  7008              STRB     r0,[r1,#0]
;;;200    		HtoEs_OutPut_Buffer[1] = 0x03; //功能码
000008  2003              MOVS     r0,#3
00000a  7048              STRB     r0,[r1,#1]
;;;201    	
;;;202    	  Float2Byte(&AngE.Pitch,HtoEs_OutPut_Buffer,2);  //俯仰
00000c  2202              MOVS     r2,#2
00000e  4816              LDR      r0,|L2.104|
000010  f7fffffe          BL       Float2Byte
;;;203    	  Float2Byte(&AngE.Roll ,HtoEs_OutPut_Buffer,6);  //横滚
000014  2206              MOVS     r2,#6
000016  4913              LDR      r1,|L2.100|
000018  4813              LDR      r0,|L2.104|
00001a  1d00              ADDS     r0,r0,#4
00001c  f7fffffe          BL       Float2Byte
;;;204    	  Float2Byte(&AngE.Yaw  ,HtoEs_OutPut_Buffer,10); //航向
000020  220a              MOVS     r2,#0xa
000022  4910              LDR      r1,|L2.100|
000024  4810              LDR      r0,|L2.104|
000026  3008              ADDS     r0,r0,#8
000028  f7fffffe          BL       Float2Byte
;;;205    	  
;;;206    	//============================================================================	
;;;207    		
;;;208    		CHK_SUM =0; 
00002c  2000              MOVS     r0,#0
00002e  490f              LDR      r1,|L2.108|
000030  6008              STR      r0,[r1,#0]  ; CHK_SUM
;;;209    	
;;;210    	  for(i = 0 ; i < 14; i++)  //计算和
000032  2400              MOVS     r4,#0
000034  e008              B        |L2.72|
                  |L2.54|
;;;211    			CHK_SUM += HtoEs_OutPut_Buffer[i];
000036  480b              LDR      r0,|L2.100|
000038  5d00              LDRB     r0,[r0,r4]
00003a  490c              LDR      r1,|L2.108|
00003c  6809              LDR      r1,[r1,#0]  ; CHK_SUM
00003e  4408              ADD      r0,r0,r1
000040  490a              LDR      r1,|L2.108|
000042  6008              STR      r0,[r1,#0]  ; CHK_SUM
000044  1c60              ADDS     r0,r4,#1              ;210
000046  b2c4              UXTB     r4,r0                 ;210
                  |L2.72|
000048  2c0e              CMP      r4,#0xe               ;210
00004a  dbf4              BLT      |L2.54|
;;;212    		
;;;213    		HtoEs_OutPut_Buffer[14] = CHK_SUM % 255; //计算校验值
00004c  4807              LDR      r0,|L2.108|
00004e  6800              LDR      r0,[r0,#0]  ; CHK_SUM
000050  21ff              MOVS     r1,#0xff
000052  fbb0f2f1          UDIV     r2,r0,r1
000056  fb010012          MLS      r0,r1,r2,r0
00005a  4902              LDR      r1,|L2.100|
00005c  7388              STRB     r0,[r1,#0xe]
;;;214    		
;;;215    	  return 15; 
00005e  200f              MOVS     r0,#0xf
;;;216    }
000060  bd10              POP      {r4,pc}
;;;217    
                          ENDP

000062  0000              DCW      0x0000
                  |L2.100|
                          DCD      HtoEs_OutPut_Buffer
                  |L2.104|
                          DCD      AngE
                  |L2.108|
                          DCD      CHK_SUM

                          AREA ||i.HtoEs_Chart_Data_Generate||, CODE, READONLY, ALIGN=2

                  HtoEs_Chart_Data_Generate PROC
;;;93     //生成独立通道数据帧
;;;94     unsigned char HtoEs_Chart_Data_Generate(void)
000000  b510              PUSH     {r4,lr}
;;;95     {
;;;96     	  unsigned char i;
;;;97     	
;;;98     	  HtoEs_OutPut_Buffer[0] = 0x3F; //帧长度 63字节
000002  203f              MOVS     r0,#0x3f
000004  4959              LDR      r1,|L3.364|
000006  7008              STRB     r0,[r1,#0]
;;;99     		HtoEs_OutPut_Buffer[1] = 0x01; //功能码
000008  2001              MOVS     r0,#1
00000a  7048              STRB     r0,[r1,#1]
;;;100    		
;;;101    	  CH1_data = (float)sensor.acc.origin.x;
00000c  4958              LDR      r1,|L3.368|
00000e  f9b10000          LDRSH    r0,[r1,#0]  ; sensor
000012  f7fffffe          BL       __aeabi_i2f
000016  4957              LDR      r1,|L3.372|
000018  6008              STR      r0,[r1,#0]  ; CH1_data
;;;102    	  CH2_data = (float)sensor.acc.origin.y;
00001a  4955              LDR      r1,|L3.368|
00001c  f9b10002          LDRSH    r0,[r1,#2]  ; sensor
000020  f7fffffe          BL       __aeabi_i2f
000024  4954              LDR      r1,|L3.376|
000026  6008              STR      r0,[r1,#0]  ; CH2_data
;;;103    	  CH3_data = (float)sensor.acc.origin.z;
000028  4951              LDR      r1,|L3.368|
00002a  f9b10004          LDRSH    r0,[r1,#4]  ; sensor
00002e  f7fffffe          BL       __aeabi_i2f
000032  4952              LDR      r1,|L3.380|
000034  6008              STR      r0,[r1,#0]  ; CH3_data
;;;104    	  CH4_data = (float)sensor.gyro.origin.x;
000036  494e              LDR      r1,|L3.368|
000038  f9b10034          LDRSH    r0,[r1,#0x34]  ; sensor
00003c  f7fffffe          BL       __aeabi_i2f
000040  494f              LDR      r1,|L3.384|
000042  6008              STR      r0,[r1,#0]  ; CH4_data
;;;105    	  CH5_data = (float)sensor.gyro.origin.y;
000044  494a              LDR      r1,|L3.368|
000046  f9b10036          LDRSH    r0,[r1,#0x36]
00004a  f7fffffe          BL       __aeabi_i2f
00004e  494d              LDR      r1,|L3.388|
000050  6008              STR      r0,[r1,#0]  ; CH5_data
;;;106    	  CH6_data = (float)sensor.gyro.origin.z;
000052  4947              LDR      r1,|L3.368|
000054  f9b10038          LDRSH    r0,[r1,#0x38]
000058  f7fffffe          BL       __aeabi_i2f
00005c  494a              LDR      r1,|L3.392|
00005e  6008              STR      r0,[r1,#0]  ; CH6_data
;;;107    	  CH7_data = (float)MAG[0];
000060  494a              LDR      r1,|L3.396|
000062  f9b10000          LDRSH    r0,[r1,#0]  ; MAG
000066  f7fffffe          BL       __aeabi_i2f
00006a  4949              LDR      r1,|L3.400|
00006c  6008              STR      r0,[r1,#0]  ; CH7_data
;;;108    	  CH8_data = (float)MAG[1];
00006e  4947              LDR      r1,|L3.396|
000070  f9b10002          LDRSH    r0,[r1,#2]  ; MAG
000074  f7fffffe          BL       __aeabi_i2f
000078  4946              LDR      r1,|L3.404|
00007a  6008              STR      r0,[r1,#0]  ; CH8_data
;;;109    	  CH9_data = (float)MAG[2];
00007c  4943              LDR      r1,|L3.396|
00007e  f9b10004          LDRSH    r0,[r1,#4]  ; MAG
000082  f7fffffe          BL       __aeabi_i2f
000086  4944              LDR      r1,|L3.408|
000088  6008              STR      r0,[r1,#0]  ; CH9_data
;;;110    	  CH10_data = (float)US100_Alt;
00008a  4844              LDR      r0,|L3.412|
00008c  6800              LDR      r0,[r0,#0]  ; US100_Alt
00008e  4944              LDR      r1,|L3.416|
000090  6008              STR      r0,[r1,#0]  ; CH10_data
;;;111    	  CH11_data = (float)0;
000092  2000              MOVS     r0,#0
000094  4943              LDR      r1,|L3.420|
000096  6008              STR      r0,[r1,#0]  ; CH11_data
;;;112    	  CH12_data = (float)0;
000098  4943              LDR      r1,|L3.424|
00009a  6008              STR      r0,[r1,#0]  ; CH12_data
;;;113    	
;;;114    		Float2Byte(&CH1_data ,HtoEs_OutPut_Buffer,2);
00009c  2202              MOVS     r2,#2
00009e  4933              LDR      r1,|L3.364|
0000a0  4834              LDR      r0,|L3.372|
0000a2  f7fffffe          BL       Float2Byte
;;;115    		Float2Byte(&CH2_data ,HtoEs_OutPut_Buffer,6);
0000a6  2206              MOVS     r2,#6
0000a8  4930              LDR      r1,|L3.364|
0000aa  4833              LDR      r0,|L3.376|
0000ac  f7fffffe          BL       Float2Byte
;;;116    		Float2Byte(&CH3_data ,HtoEs_OutPut_Buffer,10);
0000b0  220a              MOVS     r2,#0xa
0000b2  492e              LDR      r1,|L3.364|
0000b4  4831              LDR      r0,|L3.380|
0000b6  f7fffffe          BL       Float2Byte
;;;117    		Float2Byte(&CH4_data ,HtoEs_OutPut_Buffer,14);
0000ba  220e              MOVS     r2,#0xe
0000bc  492b              LDR      r1,|L3.364|
0000be  4830              LDR      r0,|L3.384|
0000c0  f7fffffe          BL       Float2Byte
;;;118    		Float2Byte(&CH5_data ,HtoEs_OutPut_Buffer,18);
0000c4  2212              MOVS     r2,#0x12
0000c6  4929              LDR      r1,|L3.364|
0000c8  482e              LDR      r0,|L3.388|
0000ca  f7fffffe          BL       Float2Byte
;;;119    		Float2Byte(&CH6_data ,HtoEs_OutPut_Buffer,22);
0000ce  2216              MOVS     r2,#0x16
0000d0  4926              LDR      r1,|L3.364|
0000d2  482d              LDR      r0,|L3.392|
0000d4  f7fffffe          BL       Float2Byte
;;;120    		Float2Byte(&CH7_data ,HtoEs_OutPut_Buffer,26);
0000d8  221a              MOVS     r2,#0x1a
0000da  4924              LDR      r1,|L3.364|
0000dc  482c              LDR      r0,|L3.400|
0000de  f7fffffe          BL       Float2Byte
;;;121    		Float2Byte(&CH8_data ,HtoEs_OutPut_Buffer,30);
0000e2  221e              MOVS     r2,#0x1e
0000e4  4921              LDR      r1,|L3.364|
0000e6  482b              LDR      r0,|L3.404|
0000e8  f7fffffe          BL       Float2Byte
;;;122    		Float2Byte(&CH9_data ,HtoEs_OutPut_Buffer,34);
0000ec  2222              MOVS     r2,#0x22
0000ee  491f              LDR      r1,|L3.364|
0000f0  4829              LDR      r0,|L3.408|
0000f2  f7fffffe          BL       Float2Byte
;;;123    		Float2Byte(&CH10_data,HtoEs_OutPut_Buffer,38);
0000f6  2226              MOVS     r2,#0x26
0000f8  491c              LDR      r1,|L3.364|
0000fa  4829              LDR      r0,|L3.416|
0000fc  f7fffffe          BL       Float2Byte
;;;124    		Float2Byte(&CH11_data,HtoEs_OutPut_Buffer,42);
000100  222a              MOVS     r2,#0x2a
000102  491a              LDR      r1,|L3.364|
000104  4827              LDR      r0,|L3.420|
000106  f7fffffe          BL       Float2Byte
;;;125    		Float2Byte(&CH12_data,HtoEs_OutPut_Buffer,46);
00010a  222e              MOVS     r2,#0x2e
00010c  4917              LDR      r1,|L3.364|
00010e  4826              LDR      r0,|L3.424|
000110  f7fffffe          BL       Float2Byte
;;;126    		Float2Byte(&CH13_data,HtoEs_OutPut_Buffer,50);
000114  2232              MOVS     r2,#0x32
000116  4915              LDR      r1,|L3.364|
000118  4824              LDR      r0,|L3.428|
00011a  f7fffffe          BL       Float2Byte
;;;127    		Float2Byte(&CH14_data,HtoEs_OutPut_Buffer,54);
00011e  2236              MOVS     r2,#0x36
000120  4912              LDR      r1,|L3.364|
000122  4823              LDR      r0,|L3.432|
000124  f7fffffe          BL       Float2Byte
;;;128    		Float2Byte(&CH15_data,HtoEs_OutPut_Buffer,58);
000128  223a              MOVS     r2,#0x3a
00012a  4910              LDR      r1,|L3.364|
00012c  4821              LDR      r0,|L3.436|
00012e  f7fffffe          BL       Float2Byte
;;;129    		
;;;130    		CHK_SUM =0; 
000132  2000              MOVS     r0,#0
000134  4920              LDR      r1,|L3.440|
000136  6008              STR      r0,[r1,#0]  ; CHK_SUM
;;;131    	
;;;132    	  for(i = 0 ; i < 62; i++)  //计算和
000138  2400              MOVS     r4,#0
00013a  e008              B        |L3.334|
                  |L3.316|
;;;133    			CHK_SUM += HtoEs_OutPut_Buffer[i];
00013c  480b              LDR      r0,|L3.364|
00013e  5d00              LDRB     r0,[r0,r4]
000140  491d              LDR      r1,|L3.440|
000142  6809              LDR      r1,[r1,#0]  ; CHK_SUM
000144  4408              ADD      r0,r0,r1
000146  491c              LDR      r1,|L3.440|
000148  6008              STR      r0,[r1,#0]  ; CHK_SUM
00014a  1c60              ADDS     r0,r4,#1              ;132
00014c  b2c4              UXTB     r4,r0                 ;132
                  |L3.334|
00014e  2c3e              CMP      r4,#0x3e              ;132
000150  dbf4              BLT      |L3.316|
;;;134    		
;;;135    		HtoEs_OutPut_Buffer[62] = CHK_SUM % 255; //计算校验值
000152  4819              LDR      r0,|L3.440|
000154  6800              LDR      r0,[r0,#0]  ; CHK_SUM
000156  21ff              MOVS     r1,#0xff
000158  fbb0f2f1          UDIV     r2,r0,r1
00015c  fb010012          MLS      r0,r1,r2,r0
000160  4902              LDR      r1,|L3.364|
000162  f881003e          STRB     r0,[r1,#0x3e]
;;;136     
;;;137    	  return 63; 
000166  203f              MOVS     r0,#0x3f
;;;138    }
000168  bd10              POP      {r4,pc}
;;;139    
                          ENDP

00016a  0000              DCW      0x0000
                  |L3.364|
                          DCD      HtoEs_OutPut_Buffer
                  |L3.368|
                          DCD      sensor
                  |L3.372|
                          DCD      CH1_data
                  |L3.376|
                          DCD      CH2_data
                  |L3.380|
                          DCD      CH3_data
                  |L3.384|
                          DCD      CH4_data
                  |L3.388|
                          DCD      CH5_data
                  |L3.392|
                          DCD      CH6_data
                  |L3.396|
                          DCD      MAG
                  |L3.400|
                          DCD      CH7_data
                  |L3.404|
                          DCD      CH8_data
                  |L3.408|
                          DCD      CH9_data
                  |L3.412|
                          DCD      US100_Alt
                  |L3.416|
                          DCD      CH10_data
                  |L3.420|
                          DCD      CH11_data
                  |L3.424|
                          DCD      CH12_data
                  |L3.428|
                          DCD      CH13_data
                  |L3.432|
                          DCD      CH14_data
                  |L3.436|
                          DCD      CH15_data
                  |L3.440|
                          DCD      CHK_SUM

                          AREA ||i.HtoEs_GPS_Data_Generate||, CODE, READONLY, ALIGN=2

                  HtoEs_GPS_Data_Generate PROC
;;;140    //生成GPS数据帧
;;;141    unsigned char HtoEs_GPS_Data_Generate(void)
000000  b510              PUSH     {r4,lr}
;;;142    {
;;;143    	  unsigned char i;
;;;144    	
;;;145    	  HtoEs_OutPut_Buffer[0] = 0x1D; //帧长度 29字节
000002  201d              MOVS     r0,#0x1d
000004  4941              LDR      r1,|L4.268|
000006  7008              STRB     r0,[r1,#0]
;;;146    		HtoEs_OutPut_Buffer[1] = 0x02; //功能码
000008  2002              MOVS     r0,#2
00000a  7048              STRB     r0,[r1,#1]
;;;147    	
;;;148    	  Float2Byte(&Longitude_val ,HtoEs_OutPut_Buffer,2);  //经度
00000c  2202              MOVS     r2,#2
00000e  4840              LDR      r0,|L4.272|
000010  f7fffffe          BL       Float2Byte
;;;149    	  Float2Byte(&Latitude_Val  ,HtoEs_OutPut_Buffer,6);  //纬度
000014  2206              MOVS     r2,#6
000016  493d              LDR      r1,|L4.268|
000018  483e              LDR      r0,|L4.276|
00001a  f7fffffe          BL       Float2Byte
;;;150    	  Float2Byte(&Altitude_Val  ,HtoEs_OutPut_Buffer,10); //高度
00001e  220a              MOVS     r2,#0xa
000020  493a              LDR      r1,|L4.268|
000022  483d              LDR      r0,|L4.280|
000024  f7fffffe          BL       Float2Byte
;;;151    	  Float2Byte(&Dir_Val ,HtoEs_OutPut_Buffer,14);       //方位角
000028  220e              MOVS     r2,#0xe
00002a  4938              LDR      r1,|L4.268|
00002c  483b              LDR      r0,|L4.284|
00002e  f7fffffe          BL       Float2Byte
;;;152    	  Float2Byte(&SPD_Val ,HtoEs_OutPut_Buffer,18);       //速度
000032  2212              MOVS     r2,#0x12
000034  4935              LDR      r1,|L4.268|
000036  483a              LDR      r0,|L4.288|
000038  f7fffffe          BL       Float2Byte
;;;153    	
;;;154    	  HtoEs_OutPut_Buffer[22] = (Voltage_Val & 0xFF00) >> 8 ; //取高8位
00003c  4839              LDR      r0,|L4.292|
00003e  8800              LDRH     r0,[r0,#0]  ; Voltage_Val
000040  0a00              LSRS     r0,r0,#8
000042  4932              LDR      r1,|L4.268|
000044  7588              STRB     r0,[r1,#0x16]
;;;155    	  HtoEs_OutPut_Buffer[23] = (Voltage_Val & 0x00FF) ;      //取低8位
000046  4837              LDR      r0,|L4.292|
000048  7800              LDRB     r0,[r0,#0]  ; Voltage_Val
00004a  75c8              STRB     r0,[r1,#0x17]
;;;156    	
;;;157    	  HtoEs_OutPut_Buffer[24] = (Temperture_Val & 0xFF00) >> 8 ; //取高8位
00004c  4836              LDR      r0,|L4.296|
00004e  8800              LDRH     r0,[r0,#0]  ; Temperture_Val
000050  0a00              LSRS     r0,r0,#8
000052  7608              STRB     r0,[r1,#0x18]
;;;158    	  HtoEs_OutPut_Buffer[25] = (Temperture_Val & 0x00FF) ;      //取低8位
000054  4834              LDR      r0,|L4.296|
000056  7800              LDRB     r0,[r0,#0]  ; Temperture_Val
000058  7648              STRB     r0,[r1,#0x19]
;;;159    	
;;;160    	  HtoEs_OutPut_Buffer[26] = Satellite_Val; //卫星个数
00005a  4834              LDR      r0,|L4.300|
00005c  7800              LDRB     r0,[r0,#0]  ; Satellite_Val
00005e  7688              STRB     r0,[r1,#0x1a]
;;;161    	
;;;162    	//============================================================================
;;;163    	  
;;;164    		HtoEs_OutPut_Buffer[27] = 0; //先将状态标识清除
000060  2000              MOVS     r0,#0
000062  76c8              STRB     r0,[r1,#0x1b]
;;;165    		
;;;166    		if( Location_Sta ) //定位模式
000064  4832              LDR      r0,|L4.304|
000066  7800              LDRB     r0,[r0,#0]  ; Location_Sta
000068  b128              CBZ      r0,|L4.118|
;;;167    			HtoEs_OutPut_Buffer[27] |= 0x01; //置高
00006a  4608              MOV      r0,r1
00006c  7ec0              LDRB     r0,[r0,#0x1b]  ; HtoEs_OutPut_Buffer
00006e  f0400001          ORR      r0,r0,#1
000072  76c8              STRB     r0,[r1,#0x1b]
000074  e005              B        |L4.130|
                  |L4.118|
;;;168    		else               //导航模式
;;;169    			HtoEs_OutPut_Buffer[27] &= 0xFE; //清零
000076  4825              LDR      r0,|L4.268|
000078  7ec0              LDRB     r0,[r0,#0x1b]  ; HtoEs_OutPut_Buffer
00007a  f00000fe          AND      r0,r0,#0xfe
00007e  4923              LDR      r1,|L4.268|
000080  76c8              STRB     r0,[r1,#0x1b]
                  |L4.130|
;;;170    		
;;;171    		
;;;172    		if( Longitude_WE == 'W' )  //经度方向
000082  482c              LDR      r0,|L4.308|
000084  7800              LDRB     r0,[r0,#0]  ; Longitude_WE
000086  2857              CMP      r0,#0x57
000088  d106              BNE      |L4.152|
;;;173    			HtoEs_OutPut_Buffer[27] |= 0x02;  //W,西经
00008a  4820              LDR      r0,|L4.268|
00008c  7ec0              LDRB     r0,[r0,#0x1b]  ; HtoEs_OutPut_Buffer
00008e  f0400002          ORR      r0,r0,#2
000092  491e              LDR      r1,|L4.268|
000094  76c8              STRB     r0,[r1,#0x1b]
000096  e009              B        |L4.172|
                  |L4.152|
;;;174    		else if( Longitude_WE == 'E' ) 
000098  4826              LDR      r0,|L4.308|
00009a  7800              LDRB     r0,[r0,#0]  ; Longitude_WE
00009c  2845              CMP      r0,#0x45
00009e  d105              BNE      |L4.172|
;;;175    			HtoEs_OutPut_Buffer[27] &= 0xFD;  //E,东经
0000a0  481a              LDR      r0,|L4.268|
0000a2  7ec0              LDRB     r0,[r0,#0x1b]  ; HtoEs_OutPut_Buffer
0000a4  f00000fd          AND      r0,r0,#0xfd
0000a8  4918              LDR      r1,|L4.268|
0000aa  76c8              STRB     r0,[r1,#0x1b]
                  |L4.172|
;;;176     
;;;177    		if( Latitude_NS == 'N' )  //纬度方向
0000ac  4822              LDR      r0,|L4.312|
0000ae  7800              LDRB     r0,[r0,#0]  ; Latitude_NS
0000b0  284e              CMP      r0,#0x4e
0000b2  d106              BNE      |L4.194|
;;;178    			HtoEs_OutPut_Buffer[27] |= 0x04;  //N,北纬
0000b4  4815              LDR      r0,|L4.268|
0000b6  7ec0              LDRB     r0,[r0,#0x1b]  ; HtoEs_OutPut_Buffer
0000b8  f0400004          ORR      r0,r0,#4
0000bc  4913              LDR      r1,|L4.268|
0000be  76c8              STRB     r0,[r1,#0x1b]
0000c0  e009              B        |L4.214|
                  |L4.194|
;;;179    		else if( Latitude_NS == 'S' ) 
0000c2  481d              LDR      r0,|L4.312|
0000c4  7800              LDRB     r0,[r0,#0]  ; Latitude_NS
0000c6  2853              CMP      r0,#0x53
0000c8  d105              BNE      |L4.214|
;;;180    			HtoEs_OutPut_Buffer[27] &= 0xFB;  //S,南纬
0000ca  4810              LDR      r0,|L4.268|
0000cc  7ec0              LDRB     r0,[r0,#0x1b]  ; HtoEs_OutPut_Buffer
0000ce  f00000fb          AND      r0,r0,#0xfb
0000d2  490e              LDR      r1,|L4.268|
0000d4  76c8              STRB     r0,[r1,#0x1b]
                  |L4.214|
;;;181    		
;;;182    	//============================================================================	
;;;183    		
;;;184    		CHK_SUM =0; 
0000d6  2000              MOVS     r0,#0
0000d8  4918              LDR      r1,|L4.316|
0000da  6008              STR      r0,[r1,#0]  ; CHK_SUM
;;;185    	
;;;186    	  for(i = 0 ; i < 28; i++)  //计算和
0000dc  2400              MOVS     r4,#0
0000de  e008              B        |L4.242|
                  |L4.224|
;;;187    			CHK_SUM += HtoEs_OutPut_Buffer[i];
0000e0  480a              LDR      r0,|L4.268|
0000e2  5d00              LDRB     r0,[r0,r4]
0000e4  4915              LDR      r1,|L4.316|
0000e6  6809              LDR      r1,[r1,#0]  ; CHK_SUM
0000e8  4408              ADD      r0,r0,r1
0000ea  4914              LDR      r1,|L4.316|
0000ec  6008              STR      r0,[r1,#0]  ; CHK_SUM
0000ee  1c60              ADDS     r0,r4,#1              ;186
0000f0  b2c4              UXTB     r4,r0                 ;186
                  |L4.242|
0000f2  2c1c              CMP      r4,#0x1c              ;186
0000f4  dbf4              BLT      |L4.224|
;;;188    		
;;;189    		HtoEs_OutPut_Buffer[28] = CHK_SUM % 255; //计算校验值
0000f6  4811              LDR      r0,|L4.316|
0000f8  6800              LDR      r0,[r0,#0]  ; CHK_SUM
0000fa  21ff              MOVS     r1,#0xff
0000fc  fbb0f2f1          UDIV     r2,r0,r1
000100  fb010012          MLS      r0,r1,r2,r0
000104  4901              LDR      r1,|L4.268|
000106  7708              STRB     r0,[r1,#0x1c]
;;;190    	
;;;191    	  return 29; 
000108  201d              MOVS     r0,#0x1d
;;;192    }
00010a  bd10              POP      {r4,pc}
;;;193    
                          ENDP

                  |L4.268|
                          DCD      HtoEs_OutPut_Buffer
                  |L4.272|
                          DCD      Longitude_val
                  |L4.276|
                          DCD      Latitude_Val
                  |L4.280|
                          DCD      Altitude_Val
                  |L4.284|
                          DCD      Dir_Val
                  |L4.288|
                          DCD      SPD_Val
                  |L4.292|
                          DCD      Voltage_Val
                  |L4.296|
                          DCD      Temperture_Val
                  |L4.300|
                          DCD      Satellite_Val
                  |L4.304|
                          DCD      Location_Sta
                  |L4.308|
                          DCD      Longitude_WE
                  |L4.312|
                          DCD      Latitude_NS
                  |L4.316|
                          DCD      CHK_SUM

                          AREA ||i.HtoEs_PID_Data_Generate||, CODE, READONLY, ALIGN=2

                  HtoEs_PID_Data_Generate PROC
;;;265    //生成PID数据帧
;;;266    unsigned char HtoEs_PID_Data_Generate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;267    {
;;;268    	  unsigned char i;
;;;269    	
;;;270    	  Pitch_PID_P = ctrl.pitch.core.kp * 100;
000002  4973              LDR      r1,|L5.464|
000004  6a88              LDR      r0,[r1,#0x28]
000006  4973              LDR      r1,|L5.468|
000008  f7fffffe          BL       __aeabi_fmul
00000c  4605              MOV      r5,r0
00000e  f7fffffe          BL       __aeabi_f2iz
000012  4971              LDR      r1,|L5.472|
000014  6008              STR      r0,[r1,#0]  ; Pitch_PID_P
;;;271    	  Pitch_PID_I = ctrl.pitch.core.ki * 100;
000016  496e              LDR      r1,|L5.464|
000018  6ac8              LDR      r0,[r1,#0x2c]
00001a  496e              LDR      r1,|L5.468|
00001c  f7fffffe          BL       __aeabi_fmul
000020  4605              MOV      r5,r0
000022  f7fffffe          BL       __aeabi_f2iz
000026  496d              LDR      r1,|L5.476|
000028  6008              STR      r0,[r1,#0]  ; Pitch_PID_I
;;;272    	  Pitch_PID_D = ctrl.pitch.core.kd * 100;
00002a  4969              LDR      r1,|L5.464|
00002c  6b08              LDR      r0,[r1,#0x30]
00002e  4969              LDR      r1,|L5.468|
000030  f7fffffe          BL       __aeabi_fmul
000034  4605              MOV      r5,r0
000036  f7fffffe          BL       __aeabi_f2iz
00003a  4969              LDR      r1,|L5.480|
00003c  6008              STR      r0,[r1,#0]  ; Pitch_PID_D
;;;273    	  Roll_PID_P  = ctrl.roll.core.kp * 100;
00003e  4964              LDR      r1,|L5.464|
000040  6f08              LDR      r0,[r1,#0x70]
000042  4964              LDR      r1,|L5.468|
000044  f7fffffe          BL       __aeabi_fmul
000048  4605              MOV      r5,r0
00004a  f7fffffe          BL       __aeabi_f2iz
00004e  4965              LDR      r1,|L5.484|
000050  6008              STR      r0,[r1,#0]  ; Roll_PID_P
;;;274    	  Roll_PID_I  = ctrl.roll.core.ki * 100;
000052  495f              LDR      r1,|L5.464|
000054  6f48              LDR      r0,[r1,#0x74]
000056  495f              LDR      r1,|L5.468|
000058  f7fffffe          BL       __aeabi_fmul
00005c  4605              MOV      r5,r0
00005e  f7fffffe          BL       __aeabi_f2iz
000062  4961              LDR      r1,|L5.488|
000064  6008              STR      r0,[r1,#0]  ; Roll_PID_I
;;;275    	  Roll_PID_D  = ctrl.roll.core.kd * 100;
000066  495a              LDR      r1,|L5.464|
000068  6f88              LDR      r0,[r1,#0x78]
00006a  495a              LDR      r1,|L5.468|
00006c  f7fffffe          BL       __aeabi_fmul
000070  4605              MOV      r5,r0
000072  f7fffffe          BL       __aeabi_f2iz
000076  495d              LDR      r1,|L5.492|
000078  6008              STR      r0,[r1,#0]  ; Roll_PID_D
;;;276    	  Yaw_PID_P   = ctrl.yaw.core.kp * 100;
00007a  4955              LDR      r1,|L5.464|
00007c  f8d100b8          LDR      r0,[r1,#0xb8]
000080  4954              LDR      r1,|L5.468|
000082  f7fffffe          BL       __aeabi_fmul
000086  4605              MOV      r5,r0
000088  f7fffffe          BL       __aeabi_f2iz
00008c  4958              LDR      r1,|L5.496|
00008e  6008              STR      r0,[r1,#0]  ; Yaw_PID_P
;;;277    	  Yaw_PID_I   = ctrl.yaw.core.ki * 100;
000090  494f              LDR      r1,|L5.464|
000092  f8d100bc          LDR      r0,[r1,#0xbc]
000096  494f              LDR      r1,|L5.468|
000098  f7fffffe          BL       __aeabi_fmul
00009c  4605              MOV      r5,r0
00009e  f7fffffe          BL       __aeabi_f2iz
0000a2  4954              LDR      r1,|L5.500|
0000a4  6008              STR      r0,[r1,#0]  ; Yaw_PID_I
;;;278    	  Yaw_PID_D   = ctrl.yaw.core.kd * 100;
0000a6  494a              LDR      r1,|L5.464|
0000a8  f8d100c0          LDR      r0,[r1,#0xc0]
0000ac  4949              LDR      r1,|L5.468|
0000ae  f7fffffe          BL       __aeabi_fmul
0000b2  4605              MOV      r5,r0
0000b4  f7fffffe          BL       __aeabi_f2iz
0000b8  494f              LDR      r1,|L5.504|
0000ba  6008              STR      r0,[r1,#0]  ; Yaw_PID_D
;;;279    	
;;;280    	  HtoEs_OutPut_Buffer[0] = 0x21; //帧长度 15字节
0000bc  2021              MOVS     r0,#0x21
0000be  494f              LDR      r1,|L5.508|
0000c0  7008              STRB     r0,[r1,#0]
;;;281    		HtoEs_OutPut_Buffer[1] = 0x05; //功能码
0000c2  2005              MOVS     r0,#5
0000c4  7048              STRB     r0,[r1,#1]
;;;282    	
;;;283    	  HtoEs_OutPut_Buffer[2] = (Pitch_PID_P & 0xFF00) >> 8 ; //取高8位
0000c6  4844              LDR      r0,|L5.472|
0000c8  8800              LDRH     r0,[r0,#0]  ; Pitch_PID_P
0000ca  0a00              LSRS     r0,r0,#8
0000cc  7088              STRB     r0,[r1,#2]
;;;284    	  HtoEs_OutPut_Buffer[3] = (Pitch_PID_P & 0x00FF) ;      //取低8位
0000ce  4842              LDR      r0,|L5.472|
0000d0  7800              LDRB     r0,[r0,#0]  ; Pitch_PID_P
0000d2  70c8              STRB     r0,[r1,#3]
;;;285    	  HtoEs_OutPut_Buffer[4] = (Pitch_PID_I & 0xFF00) >> 8 ; //取高8位
0000d4  4841              LDR      r0,|L5.476|
0000d6  8800              LDRH     r0,[r0,#0]  ; Pitch_PID_I
0000d8  0a00              LSRS     r0,r0,#8
0000da  7108              STRB     r0,[r1,#4]
;;;286    	  HtoEs_OutPut_Buffer[5] = (Pitch_PID_I & 0x00FF) ;      //取低8位
0000dc  483f              LDR      r0,|L5.476|
0000de  7800              LDRB     r0,[r0,#0]  ; Pitch_PID_I
0000e0  7148              STRB     r0,[r1,#5]
;;;287    	  HtoEs_OutPut_Buffer[6] = (Pitch_PID_D & 0xFF00) >> 8 ; //取高8位
0000e2  483f              LDR      r0,|L5.480|
0000e4  8800              LDRH     r0,[r0,#0]  ; Pitch_PID_D
0000e6  0a00              LSRS     r0,r0,#8
0000e8  7188              STRB     r0,[r1,#6]
;;;288    	  HtoEs_OutPut_Buffer[7] = (Pitch_PID_D & 0x00FF) ;      //取低8位
0000ea  483d              LDR      r0,|L5.480|
0000ec  7800              LDRB     r0,[r0,#0]  ; Pitch_PID_D
0000ee  71c8              STRB     r0,[r1,#7]
;;;289    	
;;;290    	  HtoEs_OutPut_Buffer[8] = (Roll_PID_P & 0xFF00) >> 8 ; //取高8位
0000f0  483c              LDR      r0,|L5.484|
0000f2  8800              LDRH     r0,[r0,#0]  ; Roll_PID_P
0000f4  0a00              LSRS     r0,r0,#8
0000f6  7208              STRB     r0,[r1,#8]
;;;291    	  HtoEs_OutPut_Buffer[9] = (Roll_PID_P & 0x00FF) ;      //取低8位
0000f8  483a              LDR      r0,|L5.484|
0000fa  7800              LDRB     r0,[r0,#0]  ; Roll_PID_P
0000fc  7248              STRB     r0,[r1,#9]
;;;292    	  HtoEs_OutPut_Buffer[10] = (Roll_PID_I & 0xFF00) >> 8 ; //取高8位
0000fe  483a              LDR      r0,|L5.488|
000100  8800              LDRH     r0,[r0,#0]  ; Roll_PID_I
000102  0a00              LSRS     r0,r0,#8
000104  7288              STRB     r0,[r1,#0xa]
;;;293    	  HtoEs_OutPut_Buffer[11] = (Roll_PID_I & 0x00FF) ;      //取低8位
000106  4838              LDR      r0,|L5.488|
000108  7800              LDRB     r0,[r0,#0]  ; Roll_PID_I
00010a  72c8              STRB     r0,[r1,#0xb]
;;;294    	  HtoEs_OutPut_Buffer[12] = (Roll_PID_D & 0xFF00) >> 8 ; //取高8位
00010c  4837              LDR      r0,|L5.492|
00010e  8800              LDRH     r0,[r0,#0]  ; Roll_PID_D
000110  0a00              LSRS     r0,r0,#8
000112  7308              STRB     r0,[r1,#0xc]
;;;295    	  HtoEs_OutPut_Buffer[13] = (Roll_PID_D & 0x00FF) ;      //取低8位
000114  4835              LDR      r0,|L5.492|
000116  7800              LDRB     r0,[r0,#0]  ; Roll_PID_D
000118  7348              STRB     r0,[r1,#0xd]
;;;296    		
;;;297    		HtoEs_OutPut_Buffer[14] = (Yaw_PID_P & 0xFF00) >> 8 ; //取高8位
00011a  4835              LDR      r0,|L5.496|
00011c  8800              LDRH     r0,[r0,#0]  ; Yaw_PID_P
00011e  0a00              LSRS     r0,r0,#8
000120  7388              STRB     r0,[r1,#0xe]
;;;298    	  HtoEs_OutPut_Buffer[15] = (Yaw_PID_P & 0x00FF) ;      //取低8位
000122  4833              LDR      r0,|L5.496|
000124  7800              LDRB     r0,[r0,#0]  ; Yaw_PID_P
000126  73c8              STRB     r0,[r1,#0xf]
;;;299    	  HtoEs_OutPut_Buffer[16] = (Yaw_PID_I & 0xFF00) >> 8 ; //取高8位
000128  4832              LDR      r0,|L5.500|
00012a  8800              LDRH     r0,[r0,#0]  ; Yaw_PID_I
00012c  0a00              LSRS     r0,r0,#8
00012e  7408              STRB     r0,[r1,#0x10]
;;;300    	  HtoEs_OutPut_Buffer[17] = (Yaw_PID_I & 0x00FF) ;      //取低8位
000130  4830              LDR      r0,|L5.500|
000132  7800              LDRB     r0,[r0,#0]  ; Yaw_PID_I
000134  7448              STRB     r0,[r1,#0x11]
;;;301    	  HtoEs_OutPut_Buffer[18] = (Yaw_PID_D & 0xFF00) >> 8 ; //取高8位
000136  4830              LDR      r0,|L5.504|
000138  8800              LDRH     r0,[r0,#0]  ; Yaw_PID_D
00013a  0a00              LSRS     r0,r0,#8
00013c  7488              STRB     r0,[r1,#0x12]
;;;302    	  HtoEs_OutPut_Buffer[19] = (Yaw_PID_D & 0x00FF) ;      //取低8位
00013e  482e              LDR      r0,|L5.504|
000140  7800              LDRB     r0,[r0,#0]  ; Yaw_PID_D
000142  74c8              STRB     r0,[r1,#0x13]
;;;303    		
;;;304    		HtoEs_OutPut_Buffer[20] = (Alt_PID_P & 0xFF00) >> 8 ; //取高8位
000144  482e              LDR      r0,|L5.512|
000146  8800              LDRH     r0,[r0,#0]  ; Alt_PID_P
000148  0a00              LSRS     r0,r0,#8
00014a  7508              STRB     r0,[r1,#0x14]
;;;305    	  HtoEs_OutPut_Buffer[21] = (Alt_PID_P & 0x00FF) ;      //取低8位
00014c  482c              LDR      r0,|L5.512|
00014e  7800              LDRB     r0,[r0,#0]  ; Alt_PID_P
000150  7548              STRB     r0,[r1,#0x15]
;;;306    	  HtoEs_OutPut_Buffer[22] = (Alt_PID_I & 0xFF00) >> 8 ; //取高8位
000152  482c              LDR      r0,|L5.516|
000154  8800              LDRH     r0,[r0,#0]  ; Alt_PID_I
000156  0a00              LSRS     r0,r0,#8
000158  7588              STRB     r0,[r1,#0x16]
;;;307    	  HtoEs_OutPut_Buffer[23] = (Alt_PID_I & 0x00FF) ;      //取低8位
00015a  482a              LDR      r0,|L5.516|
00015c  7800              LDRB     r0,[r0,#0]  ; Alt_PID_I
00015e  75c8              STRB     r0,[r1,#0x17]
;;;308    	  HtoEs_OutPut_Buffer[24] = (Alt_PID_D & 0xFF00) >> 8 ; //取高8位
000160  4829              LDR      r0,|L5.520|
000162  8800              LDRH     r0,[r0,#0]  ; Alt_PID_D
000164  0a00              LSRS     r0,r0,#8
000166  7608              STRB     r0,[r1,#0x18]
;;;309    	  HtoEs_OutPut_Buffer[25] = (Alt_PID_D & 0x00FF) ;      //取低8位
000168  4827              LDR      r0,|L5.520|
00016a  7800              LDRB     r0,[r0,#0]  ; Alt_PID_D
00016c  7648              STRB     r0,[r1,#0x19]
;;;310    		
;;;311    		HtoEs_OutPut_Buffer[26] = (Pos_PID_P & 0xFF00) >> 8 ; //取高8位
00016e  4827              LDR      r0,|L5.524|
000170  8800              LDRH     r0,[r0,#0]  ; Pos_PID_P
000172  0a00              LSRS     r0,r0,#8
000174  7688              STRB     r0,[r1,#0x1a]
;;;312    	  HtoEs_OutPut_Buffer[27] = (Pos_PID_P & 0x00FF) ;      //取低8位
000176  4825              LDR      r0,|L5.524|
000178  7800              LDRB     r0,[r0,#0]  ; Pos_PID_P
00017a  76c8              STRB     r0,[r1,#0x1b]
;;;313    	  HtoEs_OutPut_Buffer[28] = (Pos_PID_I & 0xFF00) >> 8 ; //取高8位
00017c  4824              LDR      r0,|L5.528|
00017e  8800              LDRH     r0,[r0,#0]  ; Pos_PID_I
000180  0a00              LSRS     r0,r0,#8
000182  7708              STRB     r0,[r1,#0x1c]
;;;314    	  HtoEs_OutPut_Buffer[29] = (Pos_PID_I & 0x00FF) ;      //取低8位
000184  4822              LDR      r0,|L5.528|
000186  7800              LDRB     r0,[r0,#0]  ; Pos_PID_I
000188  7748              STRB     r0,[r1,#0x1d]
;;;315    	  HtoEs_OutPut_Buffer[30] = (Pos_PID_D & 0xFF00) >> 8 ; //取高8位
00018a  4822              LDR      r0,|L5.532|
00018c  8800              LDRH     r0,[r0,#0]  ; Pos_PID_D
00018e  0a00              LSRS     r0,r0,#8
000190  7788              STRB     r0,[r1,#0x1e]
;;;316    	  HtoEs_OutPut_Buffer[31] = (Pos_PID_D & 0x00FF) ;      //取低8位
000192  4820              LDR      r0,|L5.532|
000194  7800              LDRB     r0,[r0,#0]  ; Pos_PID_D
000196  77c8              STRB     r0,[r1,#0x1f]
;;;317    		
;;;318    	//============================================================================	
;;;319    		
;;;320    		CHK_SUM =0; 
000198  2000              MOVS     r0,#0
00019a  491f              LDR      r1,|L5.536|
00019c  6008              STR      r0,[r1,#0]  ; CHK_SUM
;;;321    	
;;;322    	  for(i = 0 ; i < 32; i++)  //计算和
00019e  2400              MOVS     r4,#0
0001a0  e008              B        |L5.436|
                  |L5.418|
;;;323    			CHK_SUM += HtoEs_OutPut_Buffer[i];
0001a2  4816              LDR      r0,|L5.508|
0001a4  5d00              LDRB     r0,[r0,r4]
0001a6  491c              LDR      r1,|L5.536|
0001a8  6809              LDR      r1,[r1,#0]  ; CHK_SUM
0001aa  4408              ADD      r0,r0,r1
0001ac  491a              LDR      r1,|L5.536|
0001ae  6008              STR      r0,[r1,#0]  ; CHK_SUM
0001b0  1c60              ADDS     r0,r4,#1              ;322
0001b2  b2c4              UXTB     r4,r0                 ;322
                  |L5.436|
0001b4  2c20              CMP      r4,#0x20              ;322
0001b6  dbf4              BLT      |L5.418|
;;;324    		
;;;325    		HtoEs_OutPut_Buffer[32] = CHK_SUM % 255; //计算校验值
0001b8  4817              LDR      r0,|L5.536|
0001ba  6800              LDR      r0,[r0,#0]  ; CHK_SUM
0001bc  21ff              MOVS     r1,#0xff
0001be  fbb0f2f1          UDIV     r2,r0,r1
0001c2  fb010012          MLS      r0,r1,r2,r0
0001c6  490d              LDR      r1,|L5.508|
0001c8  f8810020          STRB     r0,[r1,#0x20]
;;;326    	
;;;327    	  return 33; 
0001cc  2021              MOVS     r0,#0x21
;;;328    }
0001ce  bd70              POP      {r4-r6,pc}
;;;329    
                          ENDP

                  |L5.464|
                          DCD      ctrl
                  |L5.468|
                          DCD      0x42c80000
                  |L5.472|
                          DCD      Pitch_PID_P
                  |L5.476|
                          DCD      Pitch_PID_I
                  |L5.480|
                          DCD      Pitch_PID_D
                  |L5.484|
                          DCD      Roll_PID_P
                  |L5.488|
                          DCD      Roll_PID_I
                  |L5.492|
                          DCD      Roll_PID_D
                  |L5.496|
                          DCD      Yaw_PID_P
                  |L5.500|
                          DCD      Yaw_PID_I
                  |L5.504|
                          DCD      Yaw_PID_D
                  |L5.508|
                          DCD      HtoEs_OutPut_Buffer
                  |L5.512|
                          DCD      Alt_PID_P
                  |L5.516|
                          DCD      Alt_PID_I
                  |L5.520|
                          DCD      Alt_PID_D
                  |L5.524|
                          DCD      Pos_PID_P
                  |L5.528|
                          DCD      Pos_PID_I
                  |L5.532|
                          DCD      Pos_PID_D
                  |L5.536|
                          DCD      CHK_SUM

                          AREA ||i.HtoEs_RC_Data_Generate||, CODE, READONLY, ALIGN=2

                  HtoEs_RC_Data_Generate PROC
;;;218    //生成RC通道数据帧
;;;219    unsigned char HtoEs_RC_Data_Generate(void)
000000  2015              MOVS     r0,#0x15
;;;220    {
;;;221    	  unsigned char i;
;;;222    	
;;;223    	  HtoEs_OutPut_Buffer[0] = 0x15; //帧长度 15字节
000002  4a2f              LDR      r2,|L6.192|
000004  7010              STRB     r0,[r2,#0]
;;;224    		HtoEs_OutPut_Buffer[1] = 0x04; //功能码
000006  2004              MOVS     r0,#4
000008  7050              STRB     r0,[r2,#1]
;;;225    	 
;;;226    	  HtoEs_OutPut_Buffer[2] = (RC_Data.rc_data[0] & 0xFF00) >> 8 ; //取高8位
00000a  482e              LDR      r0,|L6.196|
00000c  8800              LDRH     r0,[r0,#0]  ; RC_Data
00000e  0a00              LSRS     r0,r0,#8
000010  7090              STRB     r0,[r2,#2]
;;;227    	  HtoEs_OutPut_Buffer[3] = (RC_Data.rc_data[0] & 0x00FF) ;      //取低8位
000012  482c              LDR      r0,|L6.196|
000014  7800              LDRB     r0,[r0,#0]  ; RC_Data
000016  70d0              STRB     r0,[r2,#3]
;;;228    	
;;;229    	  HtoEs_OutPut_Buffer[4] = (RC_Data.rc_data[1] & 0xFF00) >> 8 ; //取高8位
000018  482a              LDR      r0,|L6.196|
00001a  8840              LDRH     r0,[r0,#2]  ; RC_Data
00001c  0a00              LSRS     r0,r0,#8
00001e  7110              STRB     r0,[r2,#4]
;;;230    	  HtoEs_OutPut_Buffer[5] = (RC_Data.rc_data[1] & 0x00FF) ;      //取低8位
000020  4828              LDR      r0,|L6.196|
000022  7880              LDRB     r0,[r0,#2]  ; RC_Data
000024  7150              STRB     r0,[r2,#5]
;;;231    	
;;;232    	  HtoEs_OutPut_Buffer[6] = (RC_Data.rc_data[2] & 0xFF00) >> 8 ; //取高8位
000026  4827              LDR      r0,|L6.196|
000028  8880              LDRH     r0,[r0,#4]  ; RC_Data
00002a  0a00              LSRS     r0,r0,#8
00002c  7190              STRB     r0,[r2,#6]
;;;233    	  HtoEs_OutPut_Buffer[7] = (RC_Data.rc_data[2] & 0x00FF) ;      //取低8位
00002e  4825              LDR      r0,|L6.196|
000030  7900              LDRB     r0,[r0,#4]  ; RC_Data
000032  71d0              STRB     r0,[r2,#7]
;;;234    	
;;;235    	  HtoEs_OutPut_Buffer[8] = (RC_Data.rc_data[3] & 0xFF00) >> 8 ; //取高8位
000034  4823              LDR      r0,|L6.196|
000036  88c0              LDRH     r0,[r0,#6]  ; RC_Data
000038  0a00              LSRS     r0,r0,#8
00003a  7210              STRB     r0,[r2,#8]
;;;236    	  HtoEs_OutPut_Buffer[9] = (RC_Data.rc_data[3] & 0x00FF) ;      //取低8位
00003c  4821              LDR      r0,|L6.196|
00003e  7980              LDRB     r0,[r0,#6]  ; RC_Data
000040  7250              STRB     r0,[r2,#9]
;;;237    	
;;;238    	  HtoEs_OutPut_Buffer[10] = (RC_Data.rc_data[0] & 0xFF00) >> 8 ; //取高8位
000042  4820              LDR      r0,|L6.196|
000044  8800              LDRH     r0,[r0,#0]  ; RC_Data
000046  0a00              LSRS     r0,r0,#8
000048  7290              STRB     r0,[r2,#0xa]
;;;239    	  HtoEs_OutPut_Buffer[11] = (RC_Data.rc_data[0] & 0x00FF) ;      //取低8位
00004a  481e              LDR      r0,|L6.196|
00004c  7800              LDRB     r0,[r0,#0]  ; RC_Data
00004e  72d0              STRB     r0,[r2,#0xb]
;;;240    	
;;;241    	  HtoEs_OutPut_Buffer[12] = (RC_Data.rc_data[0] & 0xFF00) >> 8 ; //取高8位
000050  481c              LDR      r0,|L6.196|
000052  8800              LDRH     r0,[r0,#0]  ; RC_Data
000054  0a00              LSRS     r0,r0,#8
000056  7310              STRB     r0,[r2,#0xc]
;;;242    	  HtoEs_OutPut_Buffer[13] = (RC_Data.rc_data[0] & 0x00FF) ;      //取低8位
000058  481a              LDR      r0,|L6.196|
00005a  7800              LDRB     r0,[r0,#0]  ; RC_Data
00005c  7350              STRB     r0,[r2,#0xd]
;;;243    		
;;;244    		HtoEs_OutPut_Buffer[14] = (RC_Data.rc_data[0] & 0xFF00) >> 8 ; //取高8位
00005e  4819              LDR      r0,|L6.196|
000060  8800              LDRH     r0,[r0,#0]  ; RC_Data
000062  0a00              LSRS     r0,r0,#8
000064  7390              STRB     r0,[r2,#0xe]
;;;245    	  HtoEs_OutPut_Buffer[15] = (RC_Data.rc_data[0] & 0x00FF) ;      //取低8位
000066  4817              LDR      r0,|L6.196|
000068  7800              LDRB     r0,[r0,#0]  ; RC_Data
00006a  73d0              STRB     r0,[r2,#0xf]
;;;246    		
;;;247    		HtoEs_OutPut_Buffer[16] = (RC_Data.rc_data[0] & 0xFF00) >> 8 ; //取高8位
00006c  4815              LDR      r0,|L6.196|
00006e  8800              LDRH     r0,[r0,#0]  ; RC_Data
000070  0a00              LSRS     r0,r0,#8
000072  7410              STRB     r0,[r2,#0x10]
;;;248    	  HtoEs_OutPut_Buffer[17] = (RC_Data.rc_data[0] & 0x00FF) ;      //取低8位
000074  4813              LDR      r0,|L6.196|
000076  7800              LDRB     r0,[r0,#0]  ; RC_Data
000078  7450              STRB     r0,[r2,#0x11]
;;;249    		
;;;250    		HtoEs_OutPut_Buffer[18] = (RC_Data.rc_data[0] & 0xFF00) >> 8 ; //取高8位
00007a  4812              LDR      r0,|L6.196|
00007c  8800              LDRH     r0,[r0,#0]  ; RC_Data
00007e  0a00              LSRS     r0,r0,#8
000080  7490              STRB     r0,[r2,#0x12]
;;;251    	  HtoEs_OutPut_Buffer[19] = (RC_Data.rc_data[0] & 0x00FF) ;      //取低8位
000082  4810              LDR      r0,|L6.196|
000084  7800              LDRB     r0,[r0,#0]  ; RC_Data
000086  74d0              STRB     r0,[r2,#0x13]
;;;252    	 
;;;253    	//============================================================================	
;;;254    		
;;;255    		CHK_SUM =0; 
000088  2000              MOVS     r0,#0
00008a  4a0f              LDR      r2,|L6.200|
00008c  6010              STR      r0,[r2,#0]  ; CHK_SUM
;;;256    	
;;;257    	  for(i = 0 ; i < 20; i++)  //计算和
00008e  2100              MOVS     r1,#0
000090  e008              B        |L6.164|
                  |L6.146|
;;;258    			CHK_SUM += HtoEs_OutPut_Buffer[i];
000092  480b              LDR      r0,|L6.192|
000094  5c40              LDRB     r0,[r0,r1]
000096  4a0c              LDR      r2,|L6.200|
000098  6812              LDR      r2,[r2,#0]  ; CHK_SUM
00009a  4410              ADD      r0,r0,r2
00009c  4a0a              LDR      r2,|L6.200|
00009e  6010              STR      r0,[r2,#0]  ; CHK_SUM
0000a0  1c48              ADDS     r0,r1,#1              ;257
0000a2  b2c1              UXTB     r1,r0                 ;257
                  |L6.164|
0000a4  2914              CMP      r1,#0x14              ;257
0000a6  dbf4              BLT      |L6.146|
;;;259    		
;;;260    		HtoEs_OutPut_Buffer[20] = CHK_SUM % 255; //计算校验值
0000a8  4807              LDR      r0,|L6.200|
0000aa  6800              LDR      r0,[r0,#0]  ; CHK_SUM
0000ac  22ff              MOVS     r2,#0xff
0000ae  fbb0f3f2          UDIV     r3,r0,r2
0000b2  fb020013          MLS      r0,r2,r3,r0
0000b6  4a02              LDR      r2,|L6.192|
0000b8  7510              STRB     r0,[r2,#0x14]
;;;261    	
;;;262    	  return 21; 
0000ba  2015              MOVS     r0,#0x15
;;;263    }
0000bc  4770              BX       lr
;;;264    
                          ENDP

0000be  0000              DCW      0x0000
                  |L6.192|
                          DCD      HtoEs_OutPut_Buffer
                  |L6.196|
                          DCD      RC_Data
                  |L6.200|
                          DCD      CHK_SUM

                          AREA ||i.UsbCmdPro||, CODE, READONLY, ALIGN=2

                  UsbCmdPro PROC
;;;393    /*====================================================================================================*/
;;;394    void UsbCmdPro(void)
000000  b538              PUSH     {r3-r5,lr}
;;;395    {
;;;396      u8 ucData,ucNum;
;;;397      static u16 aCmdBuf[32];
;;;398    	static u16 usPos;
;;;399    	static u16 Free_heart=0;
;;;400    	
;;;401    	// 空闲心跳
;;;402    	Free_heart++;  
000002  481d              LDR      r0,|L7.120|
000004  8800              LDRH     r0,[r0,#0]  ; Free_heart
000006  1c40              ADDS     r0,r0,#1
000008  491b              LDR      r1,|L7.120|
00000a  8008              STRH     r0,[r1,#0]
;;;403    	if(Free_heart>=60) {
00000c  4608              MOV      r0,r1
00000e  8800              LDRH     r0,[r0,#0]  ; Free_heart
000010  283c              CMP      r0,#0x3c
000012  db0a              BLT      |L7.42|
;;;404    		usPos = 0;
000014  2000              MOVS     r0,#0
000016  4919              LDR      r1,|L7.124|
000018  8008              STRH     r0,[r1,#0]
;;;405    		Free_heart = 60;
00001a  203c              MOVS     r0,#0x3c
00001c  4916              LDR      r1,|L7.120|
00001e  8008              STRH     r0,[r1,#0]
;;;406     		array_assign(aCmdBuf,0,32);
000020  2220              MOVS     r2,#0x20
000022  2100              MOVS     r1,#0
000024  4816              LDR      r0,|L7.128|
000026  f7fffffe          BL       array_assign
                  |L7.42|
;;;407      }
;;;408    	
;;;409    	// 从USB口读取一个字节 ucNum存放读到的字节个数 
;;;410    	ucData = usb_GetRxByte(&ucNum);	
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       usb_GetRxByte
000030  4604              MOV      r4,r0
;;;411    	
;;;412    	// 没有接收到输出 退出
;;;413    	if (ucNum == 0)		return;
000032  f89d0000          LDRB     r0,[sp,#0]
000036  b900              CBNZ     r0,|L7.58|
                  |L7.56|
;;;414    	
;;;415    	Free_heart=0;
;;;416    	
;;;417     	// 接收到的数据放入缓存
;;;418     	aCmdBuf[usPos++] = ucData;
;;;419      
;;;420    	if(usPos>=31) usPos=31;
;;;421    	
;;;422    	// 数据解析
;;;423    	if(fg!=10) Data_Parser(aCmdBuf);
;;;424    	fg=5;
;;;425    }
000038  bd38              POP      {r3-r5,pc}
                  |L7.58|
00003a  2000              MOVS     r0,#0                 ;415
00003c  490e              LDR      r1,|L7.120|
00003e  8008              STRH     r0,[r1,#0]            ;415
000040  480e              LDR      r0,|L7.124|
000042  8801              LDRH     r1,[r0,#0]            ;418  ; usPos
000044  8800              LDRH     r0,[r0,#0]            ;418  ; usPos
000046  1c40              ADDS     r0,r0,#1              ;418
000048  4a0c              LDR      r2,|L7.124|
00004a  8010              STRH     r0,[r2,#0]            ;418
00004c  480c              LDR      r0,|L7.128|
00004e  f8204011          STRH     r4,[r0,r1,LSL #1]     ;418
000052  4610              MOV      r0,r2                 ;420
000054  8800              LDRH     r0,[r0,#0]            ;420  ; usPos
000056  281f              CMP      r0,#0x1f              ;420
000058  db02              BLT      |L7.96|
00005a  201f              MOVS     r0,#0x1f              ;420
00005c  4611              MOV      r1,r2                 ;420
00005e  8008              STRH     r0,[r1,#0]            ;420
                  |L7.96|
000060  4808              LDR      r0,|L7.132|
000062  7800              LDRB     r0,[r0,#0]            ;423  ; fg
000064  280a              CMP      r0,#0xa               ;423
000066  d002              BEQ      |L7.110|
000068  4805              LDR      r0,|L7.128|
00006a  f7fffffe          BL       Data_Parser
                  |L7.110|
00006e  2005              MOVS     r0,#5                 ;424
000070  4904              LDR      r1,|L7.132|
000072  7008              STRB     r0,[r1,#0]            ;424
000074  bf00              NOP      
000076  e7df              B        |L7.56|
;;;426    
                          ENDP

                  |L7.120|
                          DCD      Free_heart
                  |L7.124|
                          DCD      usPos
                  |L7.128|
                          DCD      aCmdBuf
                  |L7.132|
                          DCD      ||fg||

                          AREA ||i.mavlink||, CODE, READONLY, ALIGN=2

                  mavlink PROC
;;;361    
;;;362    void mavlink(void)
000000  b510              PUSH     {r4,lr}
;;;363    {
;;;364    	switch(sw) //循环发送各模块数据
000002  4826              LDR      r0,|L8.156|
000004  6800              LDR      r0,[r0,#0]  ; sw
000006  2807              CMP      r0,#7
000008  d23a              BCS      |L8.128|
00000a  e8dff000          TBB      [pc,r0]
00000e  3904              DCB      0x39,0x04
000010  090e1330          DCB      0x09,0x0e,0x13,0x30
000014  3500              DCB      0x35,0x00
;;;365    	{
;;;366    			case 1: F = HtoEs_Chart_Data_Generate();    break;  //测试独立通道,返回需发送字节数
000016  f7fffffe          BL       HtoEs_Chart_Data_Generate
00001a  4921              LDR      r1,|L8.160|
00001c  6008              STR      r0,[r1,#0]  ; F
00001e  e02f              B        |L8.128|
;;;367    			case 2: F = HtoEs_RC_Data_Generate();       break;  //测试RC通道，返回需发送字节数		 
000020  f7fffffe          BL       HtoEs_RC_Data_Generate
000024  491e              LDR      r1,|L8.160|
000026  6008              STR      r0,[r1,#0]  ; F
000028  e02a              B        |L8.128|
;;;368          case 3: F = HtoEs_Attitude_Data_Generate(); break;  //测试姿态,返回需发送字节数	
00002a  f7fffffe          BL       HtoEs_Attitude_Data_Generate
00002e  491c              LDR      r1,|L8.160|
000030  6008              STR      r0,[r1,#0]  ; F
000032  e025              B        |L8.128|
;;;369          case 4: if(fg ==10 ) F = HtoEs_PID_Data_Generate(); 
000034  481b              LDR      r0,|L8.164|
000036  7800              LDRB     r0,[r0,#0]  ; fg
000038  280a              CMP      r0,#0xa
00003a  d103              BNE      |L8.68|
00003c  f7fffffe          BL       HtoEs_PID_Data_Generate
000040  4917              LDR      r1,|L8.160|
000042  6008              STR      r0,[r1,#0]  ; F
                  |L8.68|
;;;370    				      if(fg<10 && fg >0){
000044  4817              LDR      r0,|L8.164|
000046  f9900000          LDRSB    r0,[r0,#0]  ; fg
00004a  280a              CMP      r0,#0xa
00004c  da0e              BGE      |L8.108|
00004e  4815              LDR      r0,|L8.164|
000050  f9900000          LDRSB    r0,[r0,#0]  ; fg
000054  2800              CMP      r0,#0
000056  dd09              BLE      |L8.108|
;;;371    								fg--; 
000058  4812              LDR      r0,|L8.164|
00005a  7800              LDRB     r0,[r0,#0]  ; fg
00005c  1e40              SUBS     r0,r0,#1
00005e  b240              SXTB     r0,r0
000060  4910              LDR      r1,|L8.164|
000062  7008              STRB     r0,[r1,#0]
;;;372    								F = HtoEs_PID_Data_Generate();       //测试PID参数，返回需发送字节数		
000064  f7fffffe          BL       HtoEs_PID_Data_Generate
000068  490d              LDR      r1,|L8.160|
00006a  6008              STR      r0,[r1,#0]  ; F
                  |L8.108|
;;;373    			        }				
;;;374    							break;  
00006c  e008              B        |L8.128|
;;;375          case 5: F = HtoEs_GPS_Data_Generate(); 		  break;     //测试GPS,返回需发送字节数
00006e  f7fffffe          BL       HtoEs_GPS_Data_Generate
000072  490b              LDR      r1,|L8.160|
000074  6008              STR      r0,[r1,#0]  ; F
000076  e003              B        |L8.128|
;;;376        //case 6: F = HtoEs_Senosrs_Data_Generate();  break;  //测试传感器标定，返回需发送字节数					
;;;377    			case 6: sw = 0; break; 
000078  2000              MOVS     r0,#0
00007a  4908              LDR      r1,|L8.156|
00007c  6008              STR      r0,[r1,#0]  ; sw
00007e  bf00              NOP      
                  |L8.128|
000080  bf00              NOP                            ;366
;;;378    	}
;;;379    	sw++; 
000082  4806              LDR      r0,|L8.156|
000084  6800              LDR      r0,[r0,#0]  ; sw
000086  1c40              ADDS     r0,r0,#1
000088  4904              LDR      r1,|L8.156|
00008a  6008              STR      r0,[r1,#0]  ; sw
;;;380    		
;;;381    	usb_SendDataToHost(&HtoEs_OutPut_Buffer[0], F);
00008c  4804              LDR      r0,|L8.160|
00008e  8800              LDRH     r0,[r0,#0]  ; F
000090  b281              UXTH     r1,r0
000092  4805              LDR      r0,|L8.168|
000094  f7fffffe          BL       usb_SendDataToHost
;;;382    }
000098  bd10              POP      {r4,pc}
;;;383    
                          ENDP

00009a  0000              DCW      0x0000
                  |L8.156|
                          DCD      ||sw||
                  |L8.160|
                          DCD      F
                  |L8.164|
                          DCD      ||fg||
                  |L8.168|
                          DCD      HtoEs_OutPut_Buffer

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  HtoEs_OutPut_Buffer
                          %        64
                  aCmdBuf
                          %        64

                          AREA ||.data||, DATA, ALIGN=2

                  CH1_data
000000  00000000          DCFS     0x00000000 ; 0
                  CH2_data
000004  00000000          DCFS     0x00000000 ; 0
                  CH3_data
000008  00000000          DCFS     0x00000000 ; 0
                  CH4_data
00000c  00000000          DCFS     0x00000000 ; 0
                  CH5_data
000010  00000000          DCFS     0x00000000 ; 0
                  CH6_data
000014  00000000          DCFS     0x00000000 ; 0
                  CH7_data
000018  00000000          DCFS     0x00000000 ; 0
                  CH8_data
00001c  00000000          DCFS     0x00000000 ; 0
                  CH9_data
000020  00000000          DCFS     0x00000000 ; 0
                  CH10_data
000024  00000000          DCFS     0x00000000 ; 0
                  CH11_data
000028  00000000          DCFS     0x00000000 ; 0
                  CH12_data
00002c  00000000          DCFS     0x00000000 ; 0
                  CH13_data
000030  00000000          DCFS     0x00000000 ; 0
                  CH14_data
000034  00000000          DCFS     0x00000000 ; 0
                  CH15_data
000038  00000000          DCFS     0x00000000 ; 0
                  ||fg||
00003c  0a00              DCB      0x0a,0x00
                  usPos
00003e  0000              DCB      0x00,0x00
                  Free_heart
000040  0000              DCW      0x0000
000042  0000              DCB      0x00,0x00
                  i
                          DCD      0x00000000
                  F
                          DCD      0x00000000
                  ||sw||
                          DCD      0x00000000
                  CHK_SUM
                          DCD      0x00000000
                  Longitude_val
                          DCD      0x00000000
                  Latitude_Val
                          DCD      0x00000000
                  Altitude_Val
                          DCD      0x00000000
                  Dir_Val
                          DCD      0x00000000
                  SPD_Val
                          DCD      0x00000000
                  Satellite_Val
000068  00000000          DCB      0x00,0x00,0x00,0x00
                  Voltage_Val
                          DCD      0x00000000
                  Temperture_Val
                          DCD      0x00000000
                  Longitude_WE
000074  00                DCB      0x00
                  Latitude_NS
000075  00                DCB      0x00
                  Location_Sta
000076  0000              DCB      0x00,0x00
                  Pitch_PID_P
                          DCD      0x00000000
                  Pitch_PID_I
                          DCD      0x00000000
                  Pitch_PID_D
                          DCD      0x00000000
                  Roll_PID_P
                          DCD      0x00000000
                  Roll_PID_I
                          DCD      0x00000000
                  Roll_PID_D
                          DCD      0x00000000
                  Yaw_PID_P
                          DCD      0x00000000
                  Yaw_PID_I
                          DCD      0x00000000
                  Yaw_PID_D
                          DCD      0x00000000
                  Alt_PID_P
                          DCD      0x00000000
                  Alt_PID_I
                          DCD      0x00000000
                  Alt_PID_D
                          DCD      0x00000000
                  Pos_PID_P
                          DCD      0x00000000
                  Pos_PID_I
                          DCD      0x00000000
                  Pos_PID_D
                          DCD      0x00000000
