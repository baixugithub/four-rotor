; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\Flash\Obj\moto.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\Flash\Obj\moto.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Modules\Modules_ultrasonic -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Flash\Obj\moto.crf ..\..\User\Driver\MOTOR\moto.c]
                          THUMB

                          AREA ||i.PWM_OUT_Config||, CODE, READONLY, ALIGN=2

                  PWM_OUT_Config PROC
;;;47     
;;;48     void PWM_OUT_Config(void)
000000  b508              PUSH     {r3,lr}
;;;49     {
;;;50     	GPIO_InitTypeDef GPIO_InitStructure;
;;;51     
;;;52       /* GPIOA and GPIOC clock enable */
;;;53       RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); 
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;54     
;;;55     	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
00000a  f44f7070          MOV      r0,#0x3c0
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;56       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;		    // 复用推挽输出
000012  2018              MOVS     r0,#0x18
000014  f88d0003          STRB     r0,[sp,#3]
;;;57       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000018  2003              MOVS     r0,#3
00001a  f88d0002          STRB     r0,[sp,#2]
;;;58     	GPIO_Init(GPIOB, &GPIO_InitStructure);
00001e  4669              MOV      r1,sp
000020  4802              LDR      r0,|L1.44|
000022  f7fffffe          BL       GPIO_Init
;;;59     	Tim4_init();	
000026  f7fffffe          BL       Tim4_init
;;;60     }
00002a  bd08              POP      {r3,pc}
;;;61     
                          ENDP

                  |L1.44|
                          DCD      0x40010c00

                          AREA ||i.Tim4_init||, CODE, READONLY, ALIGN=2

                  Tim4_init PROC
;;;11     
;;;12     void Tim4_init(void)
000000  b500              PUSH     {lr}
;;;13     {
000002  b087              SUB      sp,sp,#0x1c
;;;14     	TIM_TimeBaseInitTypeDef		TIM_TimeBaseStructure;
;;;15     	TIM_OCInitTypeDef  				TIM_OCInitStructure;
;;;16     	
;;;17     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
000004  2101              MOVS     r1,#1
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;18     	/**********************************************************
;;;19     	72 000 000/72=1M
;;;20     	1000 000/2500=400Hz
;;;21     	所以产生的PWM为400Hz
;;;22     	周期为2.5ms，对应2500的计算值，1ms~2ms对应的计算值为1000~2000；
;;;23     	**********************************************************/
;;;24     	TIM_TimeBaseStructure.TIM_Period = 2499;		//计数上线	
00000c  f64010c3          MOV      r0,#0x9c3
000010  f8ad0014          STRH     r0,[sp,#0x14]
;;;25     	TIM_TimeBaseStructure.TIM_Prescaler = 71;	//pwm时钟分频
000014  2047              MOVS     r0,#0x47
000016  f8ad0010          STRH     r0,[sp,#0x10]
;;;26     	TIM_TimeBaseStructure.TIM_ClockDivision = 0;	
00001a  2000              MOVS     r0,#0
00001c  f8ad0016          STRH     r0,[sp,#0x16]
;;;27     	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;		//向上计数
000020  f8ad0012          STRH     r0,[sp,#0x12]
;;;28     	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
000024  a904              ADD      r1,sp,#0x10
000026  481d              LDR      r0,|L2.156|
000028  f7fffffe          BL       TIM_TimeBaseInit
;;;29     	
;;;30     	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
00002c  2060              MOVS     r0,#0x60
00002e  f8ad0000          STRH     r0,[sp,#0]
;;;31     	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
000032  2001              MOVS     r0,#1
000034  f8ad0002          STRH     r0,[sp,#2]
;;;32     	TIM_OCInitStructure.TIM_Pulse = 1000;
000038  f44f707a          MOV      r0,#0x3e8
00003c  f8ad0006          STRH     r0,[sp,#6]
;;;33     	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
000040  2000              MOVS     r0,#0
000042  f8ad0008          STRH     r0,[sp,#8]
;;;34     	
;;;35     	TIM_OC1Init(TIM4, &TIM_OCInitStructure);
000046  4669              MOV      r1,sp
000048  4814              LDR      r0,|L2.156|
00004a  f7fffffe          BL       TIM_OC1Init
;;;36     	TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
00004e  2108              MOVS     r1,#8
000050  4812              LDR      r0,|L2.156|
000052  f7fffffe          BL       TIM_OC1PreloadConfig
;;;37     	TIM_OC2Init(TIM4, &TIM_OCInitStructure);
000056  4669              MOV      r1,sp
000058  4810              LDR      r0,|L2.156|
00005a  f7fffffe          BL       TIM_OC2Init
;;;38     	TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
00005e  2108              MOVS     r1,#8
000060  480e              LDR      r0,|L2.156|
000062  f7fffffe          BL       TIM_OC2PreloadConfig
;;;39     	TIM_OC3Init(TIM4, &TIM_OCInitStructure);
000066  4669              MOV      r1,sp
000068  480c              LDR      r0,|L2.156|
00006a  f7fffffe          BL       TIM_OC3Init
;;;40     	TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
00006e  2108              MOVS     r1,#8
000070  480a              LDR      r0,|L2.156|
000072  f7fffffe          BL       TIM_OC3PreloadConfig
;;;41     	TIM_OC4Init(TIM4, &TIM_OCInitStructure);
000076  4669              MOV      r1,sp
000078  4808              LDR      r0,|L2.156|
00007a  f7fffffe          BL       TIM_OC4Init
;;;42     	TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);
00007e  2108              MOVS     r1,#8
000080  4806              LDR      r0,|L2.156|
000082  f7fffffe          BL       TIM_OC4PreloadConfig
;;;43     	
;;;44     	TIM_ARRPreloadConfig(TIM4, ENABLE);
000086  2101              MOVS     r1,#1
000088  4804              LDR      r0,|L2.156|
00008a  f7fffffe          BL       TIM_ARRPreloadConfig
;;;45     	TIM_Cmd(TIM4, ENABLE);
00008e  2101              MOVS     r1,#1
000090  4802              LDR      r0,|L2.156|
000092  f7fffffe          BL       TIM_Cmd
;;;46     }
000096  b007              ADD      sp,sp,#0x1c
000098  bd00              POP      {pc}
;;;47     
                          ENDP

00009a  0000              DCW      0x0000
                  |L2.156|
                          DCD      0x40000800

                          AREA ||i.moto_PwmRflash||, CODE, READONLY, ALIGN=2

                  moto_PwmRflash PROC
;;;90     
;;;91     void moto_PwmRflash(int16_t *Moter)
000000  2100              MOVS     r1,#0
;;;92     {		
;;;93     	for(u8 i=0;i<4;i++)
000002  e00a              B        |L3.26|
                  |L3.4|
;;;94     	{
;;;95          if(*(Moter+i) > Moto_PwmMax)  *(Moter+i) = Moto_PwmMax;
000004  f9302011          LDRSH    r2,[r0,r1,LSL #1]
000008  f5b27f7a          CMP      r2,#0x3e8
00000c  dd03              BLE      |L3.22|
00000e  f44f727a          MOV      r2,#0x3e8
000012  f8202011          STRH     r2,[r0,r1,LSL #1]
                  |L3.22|
000016  1c4a              ADDS     r2,r1,#1              ;93
000018  b2d1              UXTB     r1,r2                 ;93
                  |L3.26|
00001a  2904              CMP      r1,#4                 ;93
00001c  dbf2              BLT      |L3.4|
;;;96       }
;;;97     	for(u8 i=0;i<4;i++)
00001e  2100              MOVS     r1,#0
000020  e008              B        |L3.52|
                  |L3.34|
;;;98     	{
;;;99          if(*(Moter+i) <= 0 )  *(Moter+i) = 0;
000022  f9302011          LDRSH    r2,[r0,r1,LSL #1]
000026  2a00              CMP      r2,#0
000028  dc02              BGT      |L3.48|
00002a  2200              MOVS     r2,#0
00002c  f8202011          STRH     r2,[r0,r1,LSL #1]
                  |L3.48|
000030  1c4a              ADDS     r2,r1,#1              ;97
000032  b2d1              UXTB     r1,r2                 ;97
                  |L3.52|
000034  2904              CMP      r1,#4                 ;97
000036  dbf4              BLT      |L3.34|
;;;100      }
;;;101    	TIM4->CCR1 = 1000 + *(Moter++);
000038  f8301b02          LDRH     r1,[r0],#2
00003c  f501717a          ADD      r1,r1,#0x3e8
000040  4a09              LDR      r2,|L3.104|
000042  8011              STRH     r1,[r2,#0]
;;;102    	TIM4->CCR2 = 1000 + *(Moter++);
000044  f8301b02          LDRH     r1,[r0],#2
000048  f501717a          ADD      r1,r1,#0x3e8
00004c  1d12              ADDS     r2,r2,#4
00004e  8011              STRH     r1,[r2,#0]
;;;103    	TIM4->CCR3 = 1000 + *(Moter++);
000050  f8301b02          LDRH     r1,[r0],#2
000054  f501717a          ADD      r1,r1,#0x3e8
000058  1d12              ADDS     r2,r2,#4
00005a  8011              STRH     r1,[r2,#0]
;;;104    	TIM4->CCR4 = 1000 + *Moter;
00005c  8801              LDRH     r1,[r0,#0]
00005e  f501717a          ADD      r1,r1,#0x3e8
000062  1d12              ADDS     r2,r2,#4
000064  8011              STRH     r1,[r2,#0]
;;;105    }
000066  4770              BX       lr
;;;106    
                          ENDP

                  |L3.104|
                          DCD      0x40000834

                          AREA ||i.moto_STOP||, CODE, READONLY, ALIGN=2

                  moto_STOP PROC
;;;106    
;;;107    void moto_STOP(void)
000000  f44f707a          MOV      r0,#0x3e8
;;;108    {
;;;109      TIM4->CCR1 = 1000;
000004  4904              LDR      r1,|L4.24|
000006  8008              STRH     r0,[r1,#0]
;;;110    	TIM4->CCR2 = 1000;
000008  1d09              ADDS     r1,r1,#4
00000a  8008              STRH     r0,[r1,#0]
;;;111    	TIM4->CCR3 = 1000;
00000c  1d09              ADDS     r1,r1,#4
00000e  8008              STRH     r0,[r1,#0]
;;;112    	TIM4->CCR4 = 1000;
000010  1d09              ADDS     r1,r1,#4
000012  8008              STRH     r0,[r1,#0]
;;;113    }
000014  4770              BX       lr
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x40000834

                          AREA ||i.pwmWriteMotor||, CODE, READONLY, ALIGN=1

                  pwmWriteMotor PROC
;;;71     /*====================================================================================================*/
;;;72     void pwmWriteMotor(uint8_t index, uint16_t value)
000000  f5b17f7a          CMP      r1,#0x3e8
;;;73     {    
;;;74     	if(value > Moto_PwmMax)  value = Moto_PwmMax;
000004  dd01              BLE      |L5.10|
000006  f44f717a          MOV      r1,#0x3e8
                  |L5.10|
;;;75     	if(value <= 0)           value = 0;
00000a  2900              CMP      r1,#0
00000c  dc00              BGT      |L5.16|
00000e  2100              MOVS     r1,#0
                  |L5.16|
;;;76     	// pwmWritePtr(index, value);
;;;77     }
000010  4770              BX       lr
;;;78     
                          ENDP


                          AREA ||i.writeMotors||, CODE, READONLY, ALIGN=1

                  writeMotors PROC
;;;78     
;;;79     void writeMotors(int16_t *Moter)
000000  b510              PUSH     {r4,lr}
;;;80     {
000002  4604              MOV      r4,r0
;;;81         uint8_t i;
;;;82     
;;;83         for (i = 0; i < 4; i++)
000004  2300              MOVS     r3,#0
000006  e007              B        |L6.24|
                  |L6.8|
;;;84             pwmWriteMotor(i, Moter[i]);
000008  f8340013          LDRH     r0,[r4,r3,LSL #1]
00000c  b281              UXTH     r1,r0
00000e  4618              MOV      r0,r3
000010  f7fffffe          BL       pwmWriteMotor
000014  1c58              ADDS     r0,r3,#1              ;83
000016  b2c3              UXTB     r3,r0                 ;83
                  |L6.24|
000018  2b04              CMP      r3,#4                 ;83
00001a  dbf5              BLT      |L6.8|
;;;85     }
00001c  bd10              POP      {r4,pc}
;;;86     
                          ENDP

