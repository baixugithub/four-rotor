; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -o.\Flash\Obj\usb_sil.o --depend=.\Flash\Obj\usb_sil.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\sys -ID:\KEIL\KEIL_Pro\keil安装\ARM\INC -ID:\KEIL\KEIL_Pro\keil安装\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Flash\Obj\usb_sil.crf ..\..\Libraries\STM32_USB-FS-Device_Driver\src\usb_sil.c]
                          THUMB

                          AREA ||i.USB_SIL_Init||, CODE, READONLY, ALIGN=2

                  USB_SIL_Init PROC
;;;34     *******************************************************************************/
;;;35     uint32_t USB_SIL_Init(void)
000000  2000              MOVS     r0,#0
;;;36     {
;;;37     #ifndef STM32F10X_CL
;;;38       
;;;39       /* USB interrupts initialization */
;;;40       /* clear pending interrupts */
;;;41       _SetISTR(0);
000002  4907              LDR      r1,|L1.32|
000004  6008              STR      r0,[r1,#0]
;;;42       wInterrupt_Mask = IMR_MSK;
000006  f44f4006          MOV      r0,#0x8600
00000a  4906              LDR      r1,|L1.36|
00000c  8008              STRH     r0,[r1,#0]
;;;43       /* set interrupts mask */
;;;44       _SetCNTR(wInterrupt_Mask);
00000e  4608              MOV      r0,r1
000010  8800              LDRH     r0,[r0,#0]  ; wInterrupt_Mask
000012  4905              LDR      r1,|L1.40|
000014  f8c10c40          STR      r0,[r1,#0xc40]
;;;45       
;;;46     #else
;;;47       
;;;48       /* Perform OTG Device initialization procedure (including EP0 init) */
;;;49       OTG_DEV_Init();
;;;50       
;;;51     #endif /* STM32F10X_CL */
;;;52     
;;;53       return 0;
000018  f04f0000          MOV      r0,#0
;;;54     }
00001c  4770              BX       lr
;;;55     
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      0x40005c44
                  |L1.36|
                          DCD      wInterrupt_Mask
                  |L1.40|
                          DCD      0x40005000

                          AREA ||i.USB_SIL_Read||, CODE, READONLY, ALIGN=1

                  USB_SIL_Read PROC
;;;94     *******************************************************************************/
;;;95     uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;96     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;97       uint32_t DataLength = 0;
000008  2500              MOVS     r5,#0
;;;98     
;;;99     #ifndef STM32F10X_CL
;;;100    
;;;101      /* Get the number of received data on the selected Endpoint */
;;;102      DataLength = GetEPRxCount(bEpAddr & 0x7F);
00000a  f004007f          AND      r0,r4,#0x7f
00000e  f7fffffe          BL       GetEPRxCount
000012  4605              MOV      r5,r0
;;;103      
;;;104      /* Use the memory interface function to write to the selected endpoint */
;;;105      PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
000014  f004007f          AND      r0,r4,#0x7f
000018  f7fffffe          BL       GetEPRxAddr
00001c  4607              MOV      r7,r0
00001e  462a              MOV      r2,r5
000020  4601              MOV      r1,r0
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       PMAToUserBufferCopy
;;;106    
;;;107    #else
;;;108      
;;;109      USB_OTG_EP *ep;
;;;110    
;;;111      /* Get the structure pointer of the selected Endpoint */
;;;112      ep = PCD_GetOutEP(bEpAddr);
;;;113      
;;;114      /* Get the number of received data */
;;;115      DataLength = ep->xfer_len;
;;;116      
;;;117      /* Use the PCD interface layer function to read the selected endpoint */
;;;118      PCD_EP_Read (bEpAddr, pBufferPointer, DataLength);
;;;119      
;;;120    #endif /* STM32F10X_CL */
;;;121    
;;;122      /* Return the number of received data */
;;;123      return DataLength;
000028  4628              MOV      r0,r5
;;;124    }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;125    
                          ENDP


                          AREA ||i.USB_SIL_Write||, CODE, READONLY, ALIGN=1

                  USB_SIL_Write PROC
;;;65     *******************************************************************************/
;;;66     uint32_t USB_SIL_Write(uint8_t bEpAddr, uint8_t* pBufferPointer, uint32_t wBufferSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;67     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;68     #ifndef STM32F10X_CL
;;;69     
;;;70       /* Use the memory interface function to write to the selected endpoint */
;;;71       UserToPMABufferCopy(pBufferPointer, GetEPTxAddr(bEpAddr & 0x7F), wBufferSize);
00000a  f004007f          AND      r0,r4,#0x7f
00000e  f7fffffe          BL       GetEPTxAddr
000012  4607              MOV      r7,r0
000014  b2aa              UXTH     r2,r5
000016  4601              MOV      r1,r0
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       UserToPMABufferCopy
;;;72     
;;;73       /* Update the data length in the control register */
;;;74       SetEPTxCount((bEpAddr & 0x7F), wBufferSize);
00001e  f004007f          AND      r0,r4,#0x7f
000022  b2a9              UXTH     r1,r5
000024  f7fffffe          BL       SetEPTxCount
;;;75       
;;;76     #else
;;;77       
;;;78        /* Use the PCD interface layer function to write to the selected endpoint */
;;;79        PCD_EP_Write (bEpAddr, pBufferPointer, wBufferSize); 
;;;80        
;;;81     #endif /* STM32F10X_CL */
;;;82     
;;;83       return 0;
000028  2000              MOVS     r0,#0
;;;84     }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;85     
                          ENDP

