; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -o.\Flash\Obj\stmflash.o --depend=.\Flash\Obj\stmflash.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\sys -ID:\KEIL\KEIL_Pro\keil安装\ARM\INC -ID:\KEIL\KEIL_Pro\keil安装\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Flash\Obj\stmflash.crf ..\..\User\Driver\STMFLASH\stmflash.c]
                          THUMB

                          AREA ||i.STMFLASH_Read||, CODE, READONLY, ALIGN=1

                  STMFLASH_Read PROC
;;;85     //NumToWrite:半字(16位)数
;;;86     void STMFLASH_Read(u32 ReadAddr,u16 *pBuffer,u16 NumToRead)   	
000000  b530              PUSH     {r4,r5,lr}
;;;87     {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;88     	u16 i;
;;;89     	for(i=0;i<NumToRead;i++)
000008  2200              MOVS     r2,#0
00000a  e007              B        |L1.28|
                  |L1.12|
;;;90     	{
;;;91     		pBuffer[i]=STMFLASH_ReadHalfWord(ReadAddr);//读取2个字节.
00000c  4618              MOV      r0,r3
00000e  f7fffffe          BL       STMFLASH_ReadHalfWord
000012  f8240012          STRH     r0,[r4,r2,LSL #1]
;;;92     		ReadAddr+=2;//偏移2个字节.	
000016  1c9b              ADDS     r3,r3,#2
000018  1c50              ADDS     r0,r2,#1              ;89
00001a  b282              UXTH     r2,r0                 ;89
                  |L1.28|
00001c  42aa              CMP      r2,r5                 ;89
00001e  dbf5              BLT      |L1.12|
;;;93     	}
;;;94     }
000020  bd30              POP      {r4,r5,pc}
;;;95     
                          ENDP


                          AREA ||i.STMFLASH_ReadHalfWord||, CODE, READONLY, ALIGN=1

                  STMFLASH_ReadHalfWord PROC
;;;7      //返回值:对应数据.
;;;8      u16 STMFLASH_ReadHalfWord(u32 faddr)
000000  4601              MOV      r1,r0
;;;9      {
;;;10     	return *(vu16*)faddr; 
000002  8808              LDRH     r0,[r1,#0]
;;;11     }
000004  4770              BX       lr
;;;12     #if STM32_FLASH_WREN	//如果使能了写   
                          ENDP


                          AREA ||i.STMFLASH_Write||, CODE, READONLY, ALIGN=2

                  STMFLASH_Write PROC
;;;35     u16 STMFLASH_BUF[STM_SECTOR_SIZE/2];//最多是2K字节
;;;36     void STMFLASH_Write(u32 WriteAddr,u16 *pBuffer,u16 NumToWrite)	
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;37     {
000004  4680              MOV      r8,r0
000006  468a              MOV      r10,r1
000008  4617              MOV      r7,r2
;;;38     	u32 secpos;	   //扇区地址
;;;39     	u16 secoff;	   //扇区内偏移地址(16位字计算)
;;;40     	u16 secremain; //扇区内剩余地址(16位字计算)	   
;;;41      	u16 i;    
;;;42     	u32 offaddr;   //去掉0X08000000后的地址
;;;43     	if(WriteAddr<STM32_FLASH_BASE||(WriteAddr>=(STM32_FLASH_BASE+1024*STM32_FLASH_SIZE)))return;//非法地址
00000a  f1b86f00          CMP      r8,#0x8000000
00000e  d302              BCC      |L3.22|
000010  4833              LDR      r0,|L3.224|
000012  4580              CMP      r8,r0
000014  d301              BCC      |L3.26|
                  |L3.22|
;;;44     	FLASH_Unlock();						//解锁
;;;45     	offaddr=WriteAddr-STM32_FLASH_BASE;		//实际偏移地址.
;;;46     	secpos=offaddr/STM_SECTOR_SIZE;			//扇区地址  0~127 for STM32F103RBT6
;;;47     	secoff=(offaddr%STM_SECTOR_SIZE)/2;		//在扇区内的偏移(2个字节为基本单位.)
;;;48     	secremain=STM_SECTOR_SIZE/2-secoff;		//扇区剩余空间大小   
;;;49     	if(NumToWrite<=secremain)secremain=NumToWrite;//不大于该扇区范围
;;;50     	while(1) 
;;;51     	{	
;;;52     		STMFLASH_Read(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);//读出整个扇区的内容
;;;53     		for(i=0;i<secremain;i++)//校验数据
;;;54     		{
;;;55     			if(STMFLASH_BUF[secoff+i]!=0XFFFF)break;//需要擦除  	  
;;;56     		}
;;;57     		if(i<secremain)//需要擦除
;;;58     		{
;;;59     			FLASH_ErasePage(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE);//擦除这个扇区
;;;60     			for(i=0;i<secremain;i++)//复制
;;;61     			{
;;;62     				STMFLASH_BUF[i+secoff]=pBuffer[i];	  
;;;63     			}
;;;64     			STMFLASH_Write_NoCheck(secpos*STM_SECTOR_SIZE+STM32_FLASH_BASE,STMFLASH_BUF,STM_SECTOR_SIZE/2);//写入整个扇区  
;;;65     		}else STMFLASH_Write_NoCheck(WriteAddr,pBuffer,secremain);//写已经擦除了的,直接写入扇区剩余区间. 				   
;;;66     		if(NumToWrite==secremain)break;//写入结束了
;;;67     		else//写入未结束
;;;68     		{
;;;69     			secpos++;				//扇区地址增1
;;;70     			secoff=0;				//偏移位置为0 	 
;;;71     		   	pBuffer+=secremain;  	//指针偏移
;;;72     			WriteAddr+=secremain;	//写地址偏移	   
;;;73     		   	NumToWrite-=secremain;	//字节(16位)数递减
;;;74     			if(NumToWrite>(STM_SECTOR_SIZE/2))secremain=STM_SECTOR_SIZE/2;//下一个扇区还是写不完
;;;75     			else secremain=NumToWrite;//下一个扇区可以写完了
;;;76     		}	 
;;;77     	};	
;;;78     	FLASH_Lock();//上锁
;;;79     }
000016  e8bd9ff0          POP      {r4-r12,pc}
                  |L3.26|
00001a  f7fffffe          BL       FLASH_Unlock
00001e  f1a86b00          SUB      r11,r8,#0x8000000     ;45
000022  ea4f25db          LSR      r5,r11,#11            ;46
000026  f3cb0949          UBFX     r9,r11,#1,#10         ;47
00002a  f5c96480          RSB      r4,r9,#0x400          ;48
00002e  42a7              CMP      r7,r4                 ;49
000030  dc00              BGT      |L3.52|
000032  463c              MOV      r4,r7                 ;49
                  |L3.52|
000034  e04d              B        |L3.210|
                  |L3.54|
000036  f04f6100          MOV      r1,#0x8000000         ;52
00003a  eb0120c5          ADD      r0,r1,r5,LSL #11      ;52
00003e  144a              ASRS     r2,r1,#17             ;52
000040  4928              LDR      r1,|L3.228|
000042  f7fffffe          BL       STMFLASH_Read
000046  2600              MOVS     r6,#0                 ;53
000048  e00b              B        |L3.98|
                  |L3.74|
00004a  eb090006          ADD      r0,r9,r6              ;55
00004e  4925              LDR      r1,|L3.228|
000050  f8310010          LDRH     r0,[r1,r0,LSL #1]     ;55
000054  f5a0417f          SUB      r1,r0,#0xff00         ;55
000058  39ff              SUBS     r1,r1,#0xff           ;55
00005a  d000              BEQ      |L3.94|
00005c  e003              B        |L3.102|
                  |L3.94|
00005e  1c70              ADDS     r0,r6,#1              ;53
000060  b286              UXTH     r6,r0                 ;53
                  |L3.98|
000062  42a6              CMP      r6,r4                 ;53
000064  dbf1              BLT      |L3.74|
                  |L3.102|
000066  bf00              NOP                            ;55
000068  42a6              CMP      r6,r4                 ;57
00006a  da1b              BGE      |L3.164|
00006c  f04f6100          MOV      r1,#0x8000000         ;59
000070  eb0120c5          ADD      r0,r1,r5,LSL #11      ;59
000074  f7fffffe          BL       FLASH_ErasePage
000078  2600              MOVS     r6,#0                 ;60
00007a  e008              B        |L3.142|
                  |L3.124|
00007c  f83a0016          LDRH     r0,[r10,r6,LSL #1]    ;62
000080  eb060109          ADD      r1,r6,r9              ;62
000084  4a17              LDR      r2,|L3.228|
000086  f8220011          STRH     r0,[r2,r1,LSL #1]     ;62
00008a  1c70              ADDS     r0,r6,#1              ;60
00008c  b286              UXTH     r6,r0                 ;60
                  |L3.142|
00008e  42a6              CMP      r6,r4                 ;60
000090  dbf4              BLT      |L3.124|
000092  f04f6100          MOV      r1,#0x8000000         ;64
000096  eb0120c5          ADD      r0,r1,r5,LSL #11      ;64
00009a  144a              ASRS     r2,r1,#17             ;64
00009c  4911              LDR      r1,|L3.228|
00009e  f7fffffe          BL       STMFLASH_Write_NoCheck
0000a2  e004              B        |L3.174|
                  |L3.164|
0000a4  4622              MOV      r2,r4                 ;65
0000a6  4651              MOV      r1,r10                ;65
0000a8  4640              MOV      r0,r8                 ;65
0000aa  f7fffffe          BL       STMFLASH_Write_NoCheck
                  |L3.174|
0000ae  42a7              CMP      r7,r4                 ;66
0000b0  d100              BNE      |L3.180|
0000b2  e00f              B        |L3.212|
                  |L3.180|
0000b4  1c6d              ADDS     r5,r5,#1              ;69
0000b6  f04f0900          MOV      r9,#0                 ;70
0000ba  eb0a0a44          ADD      r10,r10,r4,LSL #1     ;71
0000be  44a0              ADD      r8,r8,r4              ;72
0000c0  1b38              SUBS     r0,r7,r4              ;73
0000c2  b287              UXTH     r7,r0                 ;73
0000c4  f5b76f80          CMP      r7,#0x400             ;74
0000c8  dd02              BLE      |L3.208|
0000ca  f44f6480          MOV      r4,#0x400             ;74
0000ce  e000              B        |L3.210|
                  |L3.208|
0000d0  463c              MOV      r4,r7                 ;75
                  |L3.210|
0000d2  e7b0              B        |L3.54|
                  |L3.212|
0000d4  bf00              NOP                            ;66
0000d6  f7fffffe          BL       FLASH_Lock
0000da  bf00              NOP      
0000dc  e79b              B        |L3.22|
;;;80     #endif
                          ENDP

0000de  0000              DCW      0x0000
                  |L3.224|
                          DCD      0x08080000
                  |L3.228|
                          DCD      STMFLASH_BUF

                          AREA ||i.STMFLASH_Write_NoCheck||, CODE, READONLY, ALIGN=1

                  STMFLASH_Write_NoCheck PROC
;;;16     //NumToWrite:半字(16位)数   
;;;17     void STMFLASH_Write_NoCheck(u32 WriteAddr,u16 *pBuffer,u16 NumToWrite)   
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;18     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;19     	u16 i;
;;;20     	for(i=0;i<NumToWrite;i++)
00000a  2400              MOVS     r4,#0
00000c  e007              B        |L4.30|
                  |L4.14|
;;;21     	{
;;;22     		FLASH_ProgramHalfWord(WriteAddr,pBuffer[i]);
00000e  f8361014          LDRH     r1,[r6,r4,LSL #1]
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       FLASH_ProgramHalfWord
;;;23     	    WriteAddr+=2;//地址增加2.
000018  1cad              ADDS     r5,r5,#2
00001a  1c60              ADDS     r0,r4,#1              ;20
00001c  b284              UXTH     r4,r0                 ;20
                  |L4.30|
00001e  42bc              CMP      r4,r7                 ;20
000020  dbf5              BLT      |L4.14|
;;;24     	}  
;;;25     } 
000022  e8bd81f0          POP      {r4-r8,pc}
;;;26     //从指定地址开始写入指定长度的数据
                          ENDP


                          AREA ||i.Test_Write||, CODE, READONLY, ALIGN=1

                  Test_Write PROC
;;;98     //WriteData:要写入的数据
;;;99     void Test_Write(u32 WriteAddr,u16 WriteData)   	
000000  b513              PUSH     {r0,r1,r4,lr}
;;;100    {
000002  4604              MOV      r4,r0
;;;101    	STMFLASH_Write(WriteAddr,&WriteData,1);//写入一个字 
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       STMFLASH_Write
;;;102    }
00000e  bd1c              POP      {r2-r4,pc}
;;;103    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  STMFLASH_BUF
                          %        2048
