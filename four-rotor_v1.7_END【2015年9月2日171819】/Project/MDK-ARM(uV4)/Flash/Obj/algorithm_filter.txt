; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -o.\Flash\Obj\algorithm_filter.o --depend=.\Flash\Obj\algorithm_filter.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\sys -ID:\KEIL\KEIL_Pro\keil安装\ARM\INC -ID:\KEIL\KEIL_Pro\keil安装\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Flash\Obj\algorithm_filter.crf ..\..\User\Algorithm\Algorithm_filter\Algorithm_filter.c]
                          THUMB

                          AREA ||i.IIR_I_Filter||, CODE, READONLY, ALIGN=1

                  IIR_I_Filter PROC
;;;31     /*====================================================================================================*/
;;;32     double IIR_I_Filter(double InData, double *x, double *y, double *b, short nb, double *a, short na)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;33     {
000004  b088              SUB      sp,sp,#0x20
000006  4692              MOV      r10,r2
000008  4699              MOV      r9,r3
00000a  f8ddb05c          LDR      r11,[sp,#0x5c]
;;;34       double z1,z2;
;;;35       short i;
;;;36       double OutData;
;;;37       
;;;38       for(i=nb-1; i>0; i--)
00000e  f1ab0001          SUB      r0,r11,#1
000012  fa0ff880          SXTH     r8,r0
000016  e00b              B        |L1.48|
                  |L1.24|
;;;39       {
;;;40         x[i]=x[i-1];
000018  f1a80001          SUB      r0,r8,#1
00001c  eb0a01c0          ADD      r1,r10,r0,LSL #3
000020  c903              LDM      r1,{r0,r1}
000022  eb0a02c8          ADD      r2,r10,r8,LSL #3
000026  c203              STM      r2!,{r0,r1}
000028  f1a80001          SUB      r0,r8,#1              ;38
00002c  fa0ff880          SXTH     r8,r0                 ;38
                  |L1.48|
000030  f1b80f00          CMP      r8,#0                 ;38
000034  dcf0              BGT      |L1.24|
;;;41       }
;;;42       
;;;43       x[0] = InData;
000036  e9dd0108          LDRD     r0,r1,[sp,#0x20]
00003a  e9ca0100          STRD     r0,r1,[r10,#0]
;;;44       
;;;45       for(z1=0,i=0; i<nb; i++)
00003e  2400              MOVS     r4,#0
000040  4625              MOV      r5,r4
000042  46a0              MOV      r8,r4
000044  e01a              B        |L1.124|
                  |L1.70|
;;;46       {
;;;47         z1 += x[i]*b[i];
000046  9816              LDR      r0,[sp,#0x58]
000048  eb0000c8          ADD      r0,r0,r8,LSL #3
00004c  c803              LDM      r0,{r0,r1}
00004e  e9cd0102          STRD     r0,r1,[sp,#8]
000052  eb0a00c8          ADD      r0,r10,r8,LSL #3
000056  c803              LDM      r0,{r0,r1}
000058  e9cd0100          STRD     r0,r1,[sp,#0]
00005c  e9dd2302          LDRD     r2,r3,[sp,#8]
000060  f7fffffe          BL       __aeabi_dmul
000064  4622              MOV      r2,r4
000066  462b              MOV      r3,r5
000068  e9cd0104          STRD     r0,r1,[sp,#0x10]
00006c  f7fffffe          BL       __aeabi_dadd
000070  4604              MOV      r4,r0
000072  460d              MOV      r5,r1
000074  f1080001          ADD      r0,r8,#1              ;45
000078  fa0ff880          SXTH     r8,r0                 ;45
                  |L1.124|
00007c  45d8              CMP      r8,r11                ;45
00007e  dbe2              BLT      |L1.70|
;;;48       }
;;;49       
;;;50       for(i=na-1; i>0; i--)
000080  9819              LDR      r0,[sp,#0x64]
000082  1e40              SUBS     r0,r0,#1
000084  fa0ff880          SXTH     r8,r0
000088  e00b              B        |L1.162|
                  |L1.138|
;;;51       {
;;;52         y[i]=y[i-1];
00008a  f1a80001          SUB      r0,r8,#1
00008e  eb0901c0          ADD      r1,r9,r0,LSL #3
000092  c903              LDM      r1,{r0,r1}
000094  eb0902c8          ADD      r2,r9,r8,LSL #3
000098  c203              STM      r2!,{r0,r1}
00009a  f1a80001          SUB      r0,r8,#1              ;50
00009e  fa0ff880          SXTH     r8,r0                 ;50
                  |L1.162|
0000a2  f1b80f00          CMP      r8,#0                 ;50
0000a6  dcf0              BGT      |L1.138|
;;;53       }
;;;54       
;;;55       for(z2=0,i=1; i<na; i++)
0000a8  2600              MOVS     r6,#0
0000aa  4637              MOV      r7,r6
0000ac  f04f0801          MOV      r8,#1
0000b0  e01a              B        |L1.232|
                  |L1.178|
;;;56       {
;;;57         z2 += y[i]*a[i];
0000b2  9818              LDR      r0,[sp,#0x60]
0000b4  eb0001c8          ADD      r1,r0,r8,LSL #3
0000b8  c903              LDM      r1,{r0,r1}
0000ba  e9cd0102          STRD     r0,r1,[sp,#8]
0000be  eb0900c8          ADD      r0,r9,r8,LSL #3
0000c2  c803              LDM      r0,{r0,r1}
0000c4  e9cd0100          STRD     r0,r1,[sp,#0]
0000c8  e9dd2302          LDRD     r2,r3,[sp,#8]
0000cc  f7fffffe          BL       __aeabi_dmul
0000d0  4632              MOV      r2,r6
0000d2  463b              MOV      r3,r7
0000d4  e9cd0104          STRD     r0,r1,[sp,#0x10]
0000d8  f7fffffe          BL       __aeabi_dadd
0000dc  4606              MOV      r6,r0
0000de  460f              MOV      r7,r1
0000e0  f1080001          ADD      r0,r8,#1              ;55
0000e4  fa0ff880          SXTH     r8,r0                 ;55
                  |L1.232|
0000e8  9819              LDR      r0,[sp,#0x64]         ;55
0000ea  4580              CMP      r8,r0                 ;55
0000ec  dbe1              BLT      |L1.178|
;;;58       }
;;;59       
;;;60       y[0] = z1 - z2; 
0000ee  4632              MOV      r2,r6
0000f0  463b              MOV      r3,r7
0000f2  4620              MOV      r0,r4
0000f4  4629              MOV      r1,r5
0000f6  f7fffffe          BL       __aeabi_dsub
0000fa  e9c90100          STRD     r0,r1,[r9,#0]
;;;61       OutData = y[0];
0000fe  e9d90100          LDRD     r0,r1,[r9,#0]
000102  e9cd0106          STRD     r0,r1,[sp,#0x18]
;;;62         
;;;63       return OutData;
000106  e9dd0106          LDRD     r0,r1,[sp,#0x18]
;;;64     }
00010a  b00c              ADD      sp,sp,#0x30
00010c  e8bd9ff0          POP      {r4-r12,pc}
;;;65     
                          ENDP


                          AREA ||i.KalmanFilter||, CODE, READONLY, ALIGN=2

                  KalmanFilter PROC
;;;74     /*====================================================================================================*/
;;;75     double KalmanFilter(const double ResrcData,double ProcessNiose_Q,double MeasureNoise_R,double x_last,double p_last)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;76     {
000004  b08e              SUB      sp,sp,#0x38
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  e9ddab1c          LDRD     r10,r11,[sp,#0x70]
;;;77        double R = MeasureNoise_R;
00000e  e9cdab0c          STRD     r10,r11,[sp,#0x30]
;;;78        double Q = ProcessNiose_Q;
000012  e9cd450a          STRD     r4,r5,[sp,#0x28]
;;;79        double x_mid = x_last;
000016  bf00              NOP      
;;;80        double x_now;
;;;81        double p_mid ;
;;;82        double p_now;
;;;83        double kg;        
;;;84     
;;;85        x_mid=x_last;          //x_last=x(k-1|k-1),x_mid=x(k|k-1)
000018  e9dd011e          LDRD     r0,r1,[sp,#0x78]
00001c  e9cd0108          STRD     r0,r1,[sp,#0x20]
;;;86        p_mid=p_last+Q;        //p_mid=p(k|k-1),p_last=p(k-1|k-1),Q=噪声
000020  e9dd230a          LDRD     r2,r3,[sp,#0x28]
000024  e9dd0120          LDRD     r0,r1,[sp,#0x80]
000028  f7fffffe          BL       __aeabi_dadd
00002c  4680              MOV      r8,r0
00002e  4689              MOV      r9,r1
;;;87        kg=p_mid/(p_mid+R);    //kg为kalman filter，R为噪声
000030  4640              MOV      r0,r8
000032  4649              MOV      r1,r9
000034  e9dd230c          LDRD     r2,r3,[sp,#0x30]
000038  f7fffffe          BL       __aeabi_dadd
00003c  4602              MOV      r2,r0
00003e  460b              MOV      r3,r1
000040  e9cd0102          STRD     r0,r1,[sp,#8]
000044  4640              MOV      r0,r8
000046  4649              MOV      r1,r9
000048  f7fffffe          BL       __aeabi_ddiv
00004c  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;88        x_now=x_mid+kg*(ResrcData-x_mid);//估计出的最优值
000050  e9dd2308          LDRD     r2,r3,[sp,#0x20]
000054  e9dd010e          LDRD     r0,r1,[sp,#0x38]
000058  f7fffffe          BL       __aeabi_dsub
00005c  e9cd0100          STRD     r0,r1,[sp,#0]
000060  e9dd2304          LDRD     r2,r3,[sp,#0x10]
000064  f7fffffe          BL       __aeabi_dmul
000068  e9cd0102          STRD     r0,r1,[sp,#8]
00006c  e9dd2308          LDRD     r2,r3,[sp,#0x20]
000070  f7fffffe          BL       __aeabi_dadd
000074  4606              MOV      r6,r0
000076  460f              MOV      r7,r1
;;;89                     
;;;90        p_now=(1-kg)*p_mid;   //最优值对应的covariance       
000078  2000              MOVS     r0,#0
00007a  490c              LDR      r1,|L2.172|
00007c  e9dd2304          LDRD     r2,r3,[sp,#0x10]
000080  f7fffffe          BL       __aeabi_dsub
000084  4642              MOV      r2,r8
000086  464b              MOV      r3,r9
000088  e9cd0102          STRD     r0,r1,[sp,#8]
00008c  f7fffffe          BL       __aeabi_dmul
000090  e9cd0106          STRD     r0,r1,[sp,#0x18]
;;;91        p_last = p_now;       //更新covariance值
000094  e9dd0106          LDRD     r0,r1,[sp,#0x18]
000098  e9cd0120          STRD     r0,r1,[sp,#0x80]
;;;92        x_last = x_now;       //更新系统状态值
00009c  e9cd671e          STRD     r6,r7,[sp,#0x78]
;;;93        return x_now;                
0000a0  4630              MOV      r0,r6
0000a2  4639              MOV      r1,r7
;;;94     }
0000a4  b012              ADD      sp,sp,#0x48
0000a6  e8bd9ff0          POP      {r4-r12,pc}
;;;95     /*====================================================================================================*/
                          ENDP

0000aa  0000              DCW      0x0000
                  |L2.172|
                          DCD      0x3ff00000

                          AREA ||i.LPF_1st||, CODE, READONLY, ALIGN=1

                  LPF_1st PROC
;;;103    /*====================================================================================================*/
;;;104    fp32 LPF_1st(fp32 oldData, fp32 newData, fp32 lpf_factor)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;105    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;106    	return oldData * (1 - lpf_factor) + newData * lpf_factor;
00000a  4631              MOV      r1,r6
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       __aeabi_fmul
000012  4680              MOV      r8,r0
000014  4631              MOV      r1,r6
000016  f04f507e          MOV      r0,#0x3f800000
00001a  f7fffffe          BL       __aeabi_fsub
00001e  4681              MOV      r9,r0
000020  4621              MOV      r1,r4
000022  f7fffffe          BL       __aeabi_fmul
000026  4607              MOV      r7,r0
000028  4641              MOV      r1,r8
00002a  f7fffffe          BL       __aeabi_fadd
;;;107    }
00002e  e8bd87f0          POP      {r4-r10,pc}
;;;108    
                          ENDP

