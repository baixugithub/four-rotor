; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -o.\Flash\Obj\multirotor_rc.o --depend=.\Flash\Obj\multirotor_rc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\sys -ID:\KEIL\KEIL_Pro\keil安装\ARM\INC -ID:\KEIL\KEIL_Pro\keil安装\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Flash\Obj\multirotor_rc.crf ..\..\User\Function\MultiRotor_rc\MultiRotor_rc.c]
                          THUMB

                          AREA ||i.RC_Data_Refine||, CODE, READONLY, ALIGN=2

                  RC_Data_Refine PROC
;;;97     /*====================================================================================================*/
;;;98     void RC_Data_Refine(void)
000000  b530              PUSH     {r4,r5,lr}
;;;99     {
000002  b086              SUB      sp,sp,#0x18
;;;100    	u8 chan,a;	
;;;101    
;;;102    	u16 rcDataMax[6], rcDataMin[6];
;;;103    	static int16_t rcDataCache[6][4], rcDataMean[6];
;;;104    	static uint8_t rcValuesIndex = 0;
;;;105    
;;;106    	rcValuesIndex++;
000004  4a51              LDR      r2,|L1.332|
000006  7812              LDRB     r2,[r2,#0]  ; rcValuesIndex
000008  1c52              ADDS     r2,r2,#1
00000a  4b50              LDR      r3,|L1.332|
00000c  701a              STRB     r2,[r3,#0]
;;;107    	for (chan = 0; chan < 6; chan++) 
00000e  2000              MOVS     r0,#0
000010  e07c              B        |L1.268|
                  |L1.18|
;;;108    	{
;;;109    		//滑动平均值滤波，4次
;;;110    		if(RC_Pwm_In[chan]>2800 || RC_Pwm_In[chan]<800) 
000012  4a4f              LDR      r2,|L1.336|
000014  f8322010          LDRH     r2,[r2,r0,LSL #1]
000018  f5b26f2f          CMP      r2,#0xaf0
00001c  dc05              BGT      |L1.42|
00001e  4a4c              LDR      r2,|L1.336|
000020  f8322010          LDRH     r2,[r2,r0,LSL #1]
000024  f5b27f48          CMP      r2,#0x320
000028  da05              BGE      |L1.54|
                  |L1.42|
;;;111    			RC_Pwm_In[chan] = RC_Pwm_In_his[chan];
00002a  4a4a              LDR      r2,|L1.340|
00002c  f8322010          LDRH     r2,[r2,r0,LSL #1]
000030  4b47              LDR      r3,|L1.336|
000032  f8232010          STRH     r2,[r3,r0,LSL #1]
                  |L1.54|
;;;112    	
;;;113    		rcDataCache[chan][rcValuesIndex % 4] = RC_Pwm_In[chan] ;		
000036  4b46              LDR      r3,|L1.336|
000038  f8333010          LDRH     r3,[r3,r0,LSL #1]
00003c  b21b              SXTH     r3,r3
00003e  4c43              LDR      r4,|L1.332|
000040  7822              LDRB     r2,[r4,#0]  ; rcValuesIndex
000042  17d4              ASRS     r4,r2,#31
000044  eb027494          ADD      r4,r2,r4,LSR #30
000048  10a4              ASRS     r4,r4,#2
00004a  eba20484          SUB      r4,r2,r4,LSL #2
00004e  4d42              LDR      r5,|L1.344|
000050  eb0505c0          ADD      r5,r5,r0,LSL #3
000054  f8253014          STRH     r3,[r5,r4,LSL #1]
;;;114    		RC_Pwm_In_his[chan] = RC_Pwm_In[chan];
000058  4a3d              LDR      r2,|L1.336|
00005a  f8322010          LDRH     r2,[r2,r0,LSL #1]
00005e  4b3d              LDR      r3,|L1.340|
000060  f8232010          STRH     r2,[r3,r0,LSL #1]
;;;115    		
;;;116    		rcDataMean[chan] = 0;
000064  2200              MOVS     r2,#0
000066  4b3d              LDR      r3,|L1.348|
000068  f8232010          STRH     r2,[r3,r0,LSL #1]
;;;117    		rcDataMax[chan] = 0;
00006c  ab03              ADD      r3,sp,#0xc
00006e  f8232010          STRH     r2,[r3,r0,LSL #1]
;;;118    		rcDataMin[chan] = 25000;
000072  f24612a8          MOV      r2,#0x61a8
000076  f82d2010          STRH     r2,[sp,r0,LSL #1]
;;;119    		
;;;120    		for (a = 0; a < 4; a++)
00007a  2100              MOVS     r1,#0
00007c  e031              B        |L1.226|
                  |L1.126|
;;;121    		{
;;;122    			// 记录缓存中最大值 && 最小值
;;;123    			if(rcDataCache[chan][a] > rcDataMax[chan])  rcDataMax[chan] = rcDataCache[chan][a];     
00007e  4a36              LDR      r2,|L1.344|
000080  eb0202c0          ADD      r2,r2,r0,LSL #3
000084  f9322011          LDRSH    r2,[r2,r1,LSL #1]
000088  ab03              ADD      r3,sp,#0xc
00008a  f8333010          LDRH     r3,[r3,r0,LSL #1]
00008e  429a              CMP      r2,r3
000090  dd07              BLE      |L1.162|
000092  4a31              LDR      r2,|L1.344|
000094  eb0202c0          ADD      r2,r2,r0,LSL #3
000098  f8322011          LDRH     r2,[r2,r1,LSL #1]
00009c  ab03              ADD      r3,sp,#0xc
00009e  f8232010          STRH     r2,[r3,r0,LSL #1]
                  |L1.162|
;;;124    			if(rcDataCache[chan][a] < rcDataMin[chan])	rcDataMin[chan] = rcDataCache[chan][a]; 
0000a2  4a2d              LDR      r2,|L1.344|
0000a4  eb0202c0          ADD      r2,r2,r0,LSL #3
0000a8  f9322011          LDRSH    r2,[r2,r1,LSL #1]
0000ac  f83d3010          LDRH     r3,[sp,r0,LSL #1]
0000b0  429a              CMP      r2,r3
0000b2  da07              BGE      |L1.196|
0000b4  4a28              LDR      r2,|L1.344|
0000b6  eb0202c0          ADD      r2,r2,r0,LSL #3
0000ba  f8322011          LDRH     r2,[r2,r1,LSL #1]
0000be  b292              UXTH     r2,r2
0000c0  f82d2010          STRH     r2,[sp,r0,LSL #1]
                  |L1.196|
;;;125    			// 求和
;;;126    			rcDataMean[chan] += rcDataCache[chan][a];  
0000c4  4a24              LDR      r2,|L1.344|
0000c6  eb0202c0          ADD      r2,r2,r0,LSL #3
0000ca  f8322011          LDRH     r2,[r2,r1,LSL #1]
0000ce  4b23              LDR      r3,|L1.348|
0000d0  f8333010          LDRH     r3,[r3,r0,LSL #1]
0000d4  441a              ADD      r2,r2,r3
0000d6  b212              SXTH     r2,r2
0000d8  4b20              LDR      r3,|L1.348|
0000da  f8232010          STRH     r2,[r3,r0,LSL #1]
0000de  1c4a              ADDS     r2,r1,#1              ;120
0000e0  b2d1              UXTB     r1,r2                 ;120
                  |L1.226|
0000e2  2904              CMP      r1,#4                 ;120
0000e4  dbcb              BLT      |L1.126|
;;;127    		}
;;;128    		// 剔除缓存中 最大值 && 最小值 
;;;129    		rcDataMean[chan] = (rcDataMean[chan] - (rcDataMax[chan] + rcDataMin[chan])) / 2;
0000e6  ab03              ADD      r3,sp,#0xc
0000e8  f8333010          LDRH     r3,[r3,r0,LSL #1]
0000ec  f83d4010          LDRH     r4,[sp,r0,LSL #1]
0000f0  4423              ADD      r3,r3,r4
0000f2  4c1a              LDR      r4,|L1.348|
0000f4  f9344010          LDRSH    r4,[r4,r0,LSL #1]
0000f8  1ae2              SUBS     r2,r4,r3
0000fa  eb0273d2          ADD      r3,r2,r2,LSR #31
0000fe  105b              ASRS     r3,r3,#1
000100  b21b              SXTH     r3,r3
000102  4c16              LDR      r4,|L1.348|
000104  f8243010          STRH     r3,[r4,r0,LSL #1]
000108  1c42              ADDS     r2,r0,#1              ;107
00010a  b2d0              UXTB     r0,r2                 ;107
                  |L1.268|
00010c  2806              CMP      r0,#6                 ;107
00010e  db80              BLT      |L1.18|
;;;130    	} 
;;;131    
;;;132    	RC_Data.ROLL  = RC_Data.rc_data[0] = rcDataMean[0];//横滚角
000110  4a12              LDR      r2,|L1.348|
000112  f9b22000          LDRSH    r2,[r2,#0]  ; rcDataMean
000116  4b12              LDR      r3,|L1.352|
000118  801a              STRH     r2,[r3,#0]
00011a  819a              STRH     r2,[r3,#0xc]
;;;133    	RC_Data.PITCH = RC_Data.rc_data[1] = rcDataMean[1];//俯仰角
00011c  4a0f              LDR      r2,|L1.348|
00011e  f9b22002          LDRSH    r2,[r2,#2]  ; rcDataMean
000122  805a              STRH     r2,[r3,#2]
000124  81da              STRH     r2,[r3,#0xe]
;;;134    	RC_Data.YAW   = RC_Data.rc_data[2] =rcDataMean[3]; //航向角
000126  4a0d              LDR      r2,|L1.348|
000128  f9b22006          LDRSH    r2,[r2,#6]  ; rcDataMean
00012c  809a              STRH     r2,[r3,#4]
00012e  825a              STRH     r2,[r3,#0x12]
;;;135    	RC_Data.THROTTLE  = RC_Data.rc_data[3] =rcDataMean[2];//油门
000130  4a0a              LDR      r2,|L1.348|
000132  f9b22004          LDRSH    r2,[r2,#4]  ; rcDataMean
000136  80da              STRH     r2,[r3,#6]
000138  821a              STRH     r2,[r3,#0x10]
;;;136    	RC_Data.rc_data[4] =rcDataMean[4];
00013a  4a08              LDR      r2,|L1.348|
00013c  8912              LDRH     r2,[r2,#8]  ; rcDataMean
00013e  811a              STRH     r2,[r3,#8]
;;;137    	RC_Data.rc_data[5] =rcDataMean[5];
000140  4a06              LDR      r2,|L1.348|
000142  8952              LDRH     r2,[r2,#0xa]  ; rcDataMean
000144  815a              STRH     r2,[r3,#0xa]
;;;138    }
000146  b006              ADD      sp,sp,#0x18
000148  bd30              POP      {r4,r5,pc}
;;;139    
                          ENDP

00014a  0000              DCW      0x0000
                  |L1.332|
                          DCD      rcValuesIndex
                  |L1.336|
                          DCD      RC_Pwm_In
                  |L1.340|
                          DCD      RC_Pwm_In_his
                  |L1.344|
                          DCD      rcDataCache
                  |L1.348|
                          DCD      rcDataMean
                  |L1.352|
                          DCD      RC_Data

                          AREA ||i.RC_directive||, CODE, READONLY, ALIGN=2

                  RC_directive PROC
;;;32     /*====================================================================================================*/
;;;33     void RC_directive(void)
000000  4809              LDR      r0,|L2.40|
;;;34     {
;;;35     //	u8 stTmp = 0,i;
;;;36     //	static u8  rcSticks;
;;;37     //	static u8  rcDelayCommand;
;;;38     //	static u16 seltLockCommend;	
;;;39     //	
;;;40     //	for (i = 0; i < 4; i++) {
;;;41     //			stTmp >>= 2;
;;;42     //			if (RC_Data.rc_data[i] > RC_MINCHECK)
;;;43     //					stTmp |= 0x80;  // check for MIN
;;;44     //			if (RC_Data.rc_data[i] < RC_MAXCHECK)
;;;45     //					stTmp |= 0x40;  // check for MAX
;;;46     //	}
;;;47     //	if (stTmp == rcSticks) {
;;;48     //			if (rcDelayCommand < 250)
;;;49     //					rcDelayCommand++;
;;;50     //	} else
;;;51     //	rcDelayCommand = 0;
;;;52     //	rcSticks = stTmp;
;;;53     //	
;;;54     //	if (rcDelayCommand == 150)
;;;55     //	{
;;;56     //		if (flag.ARMED){
;;;57     //			 if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE)   //上锁 
;;;58     //				  flag.ARMED=0;
;;;59     //		}
;;;60     //		else{
;;;61     //	if (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE)    //解锁   
;;;62     //		flag.ARMED=1;
;;;63     //	if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_HI)    //加速度矫正  
;;;64     //		flag.calibratingA = 1;
;;;65     //	if ((rcSticks == THR_HI + YAW_LO + PIT_LO + ROL_HI) && flag.calibratingM_pre)  //指南针矫正 
;;;66     //	  flag.calibratingM = 1;
;;;67     //	if (rcSticks == THR_HI + YAW_HI + PIT_LO + ROL_LO)    
;;;68     //		flag.calibratingM_pre = 1;
;;;69     //	else flag.calibratingM_pre = 0;
;;;70     //			
;;;71     //    }
;;;72     //	}
;;;73     //	//武装之后一段时间油门保持最低  则自动解除武装
;;;74     //	if (flag.ARMED)
;;;75     //	{
;;;76     //	   if (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_CE) {
;;;77     //		    if (seltLockCommend < AUTODISARMDE_TIME)
;;;78     //					 seltLockCommend++;
;;;79     //				else 
;;;80     //					 flag.ARMED=0;
;;;81     //		 }
;;;82     //		 else 
;;;83     //        seltLockCommend = 0;			 
;;;84     //	}
;;;85     	if(RC_Data.rc_data[4]<RC_MINCHECK)flag.FlightMode=1;// 
000002  f9b00008          LDRSH    r0,[r0,#8]  ; RC_Data
000006  f5b06f96          CMP      r0,#0x4b0
00000a  da02              BGE      |L2.18|
00000c  2001              MOVS     r0,#1
00000e  4907              LDR      r1,|L2.44|
000010  7248              STRB     r0,[r1,#9]
                  |L2.18|
;;;86     	if(RC_Data.rc_data[4]>RC_MAXCHECK) flag.FlightMode=0;
000012  4805              LDR      r0,|L2.40|
000014  f9b00008          LDRSH    r0,[r0,#8]  ; RC_Data
000018  f5b06fe1          CMP      r0,#0x708
00001c  dd02              BLE      |L2.36|
00001e  2000              MOVS     r0,#0
000020  4902              LDR      r1,|L2.44|
000022  7248              STRB     r0,[r1,#9]
                  |L2.36|
;;;87     //	
;;;88     }
000024  4770              BX       lr
;;;89     /*====================================================================================================*/
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      RC_Data
                  |L2.44|
                          DCD      flag

                          AREA ||i.RDAU||, CODE, READONLY, ALIGN=2

                  RDAU PROC
;;;17     
;;;18     void RDAU(void)
000000  b510              PUSH     {r4,lr}
;;;19     {
;;;20     	RC_directive();
000002  f7fffffe          BL       RC_directive
;;;21     	rcReadRawFunc();
000006  4802              LDR      r0,|L3.16|
000008  6800              LDR      r0,[r0,#0]  ; rcReadRawFunc
00000a  4780              BLX      r0
;;;22     }
00000c  bd10              POP      {r4,pc}
;;;23     
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      rcReadRawFunc

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  rcDataCache
                          %        48
                  rcDataMean
                          %        12
                  RC_Data
                          %        22

                          AREA ||.data||, DATA, ALIGN=2

                  rcReadRawFunc
                          DCD      RC_Data_Refine
                  rcValuesIndex
000004  00                DCB      0x00
