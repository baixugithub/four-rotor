; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -o.\Flash\Obj\eeprom.o --depend=.\Flash\Obj\eeprom.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\sys -ID:\KEIL\KEIL_Pro\keil安装\ARM\INC -ID:\KEIL\KEIL_Pro\keil安装\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Flash\Obj\eeprom.crf ..\..\User\Driver\EEPROM\eeprom.c]
                          THUMB

                          AREA ||i.EE_FindValidPage||, CODE, READONLY, ALIGN=2

                  EE_FindValidPage PROC
;;;445      */
;;;446    static uint16_t EE_FindValidPage(uint8_t Operation)
000000  4603              MOV      r3,r0
;;;447    {
;;;448      uint16_t PageStatus0 = 6, PageStatus1 = 6;
000002  2106              MOVS     r1,#6
000004  2206              MOVS     r2,#6
;;;449    
;;;450      /* Get Page0 actual status */
;;;451      PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
000006  4812              LDR      r0,|L1.80|
000008  8801              LDRH     r1,[r0,#0]
;;;452    
;;;453      /* Get Page1 actual status */
;;;454      PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
00000a  4812              LDR      r0,|L1.84|
00000c  8802              LDRH     r2,[r0,#0]
;;;455    
;;;456      /* Write or read operation */
;;;457      switch (Operation)
00000e  b1a3              CBZ      r3,|L1.58|
000010  2b01              CMP      r3,#1
000012  d11a              BNE      |L1.74|
;;;458      {
;;;459        case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
;;;460          if (PageStatus1 == VALID_PAGE)
000014  b932              CBNZ     r2,|L1.36|
;;;461          {
;;;462            /* Page0 receiving data */
;;;463            if (PageStatus0 == RECEIVE_DATA)
000016  f5a1406e          SUB      r0,r1,#0xee00
00001a  38ee              SUBS     r0,r0,#0xee
00001c  d100              BNE      |L1.32|
                  |L1.30|
;;;464            {
;;;465              return PAGE0;         /* Page0 valid */
;;;466            }
;;;467            else
;;;468            {
;;;469              return PAGE1;         /* Page1 valid */
;;;470            }
;;;471          }
;;;472          else if (PageStatus0 == VALID_PAGE)
;;;473          {
;;;474            /* Page1 receiving data */
;;;475            if (PageStatus1 == RECEIVE_DATA)
;;;476            {
;;;477              return PAGE1;         /* Page1 valid */
;;;478            }
;;;479            else
;;;480            {
;;;481              return PAGE0;         /* Page0 valid */
;;;482            }
;;;483          }
;;;484          else
;;;485          {
;;;486            return NO_VALID_PAGE;   /* No valid Page */
;;;487          }
;;;488    
;;;489        case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
;;;490          if (PageStatus0 == VALID_PAGE)
;;;491          {
;;;492            return PAGE0;           /* Page0 valid */
;;;493          }
;;;494          else if (PageStatus1 == VALID_PAGE)
;;;495          {
;;;496            return PAGE1;           /* Page1 valid */
;;;497          }
;;;498          else
;;;499          {
;;;500            return NO_VALID_PAGE ;  /* No valid Page */
;;;501          }
;;;502    
;;;503        default:
;;;504          return PAGE0;             /* Page0 valid */
;;;505      }
;;;506    }
00001e  4770              BX       lr
                  |L1.32|
000020  2001              MOVS     r0,#1                 ;469
000022  e7fc              B        |L1.30|
                  |L1.36|
000024  b939              CBNZ     r1,|L1.54|
000026  f5a2406e          SUB      r0,r2,#0xee00         ;475
00002a  38ee              SUBS     r0,r0,#0xee           ;475
00002c  d101              BNE      |L1.50|
00002e  2001              MOVS     r0,#1                 ;477
000030  e7f5              B        |L1.30|
                  |L1.50|
000032  2000              MOVS     r0,#0                 ;481
000034  e7f3              B        |L1.30|
                  |L1.54|
000036  20ab              MOVS     r0,#0xab              ;486
000038  e7f1              B        |L1.30|
                  |L1.58|
00003a  b909              CBNZ     r1,|L1.64|
00003c  2000              MOVS     r0,#0                 ;492
00003e  e7ee              B        |L1.30|
                  |L1.64|
000040  b90a              CBNZ     r2,|L1.70|
000042  2001              MOVS     r0,#1                 ;496
000044  e7eb              B        |L1.30|
                  |L1.70|
000046  20ab              MOVS     r0,#0xab              ;500
000048  e7e9              B        |L1.30|
                  |L1.74|
00004a  2000              MOVS     r0,#0                 ;504
00004c  e7e7              B        |L1.30|
;;;507    
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      0x08010000
                  |L1.84|
                          DCD      0x08010800

                          AREA ||i.EE_Format||, CODE, READONLY, ALIGN=2

                  EE_Format PROC
;;;407      */
;;;408    static FLASH_Status EE_Format(void)
000000  b510              PUSH     {r4,lr}
;;;409    {
;;;410      FLASH_Status FlashStatus = FLASH_COMPLETE;
000002  2404              MOVS     r4,#4
;;;411    
;;;412      /* Erase Page0 */
;;;413      FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
000004  480b              LDR      r0,|L2.52|
000006  f7fffffe          BL       FLASH_ErasePage
00000a  4604              MOV      r4,r0
;;;414    
;;;415      /* If erase operation was failed, a Flash error code is returned */
;;;416      if (FlashStatus != FLASH_COMPLETE)
00000c  2c04              CMP      r4,#4
00000e  d001              BEQ      |L2.20|
;;;417      {
;;;418        return FlashStatus;
000010  4620              MOV      r0,r4
                  |L2.18|
;;;419      }
;;;420    
;;;421      /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
;;;422      FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
;;;423    
;;;424      /* If program operation was failed, a Flash error code is returned */
;;;425      if (FlashStatus != FLASH_COMPLETE)
;;;426      {
;;;427        return FlashStatus;
;;;428      }
;;;429    
;;;430      /* Erase Page1 */
;;;431      FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
;;;432    
;;;433      /* Return Page1 erase operation status */
;;;434      return FlashStatus;
;;;435    }
000012  bd10              POP      {r4,pc}
                  |L2.20|
000014  2100              MOVS     r1,#0                 ;422
000016  4807              LDR      r0,|L2.52|
000018  f7fffffe          BL       FLASH_ProgramHalfWord
00001c  4604              MOV      r4,r0                 ;422
00001e  2c04              CMP      r4,#4                 ;425
000020  d001              BEQ      |L2.38|
000022  4620              MOV      r0,r4                 ;427
000024  e7f5              B        |L2.18|
                  |L2.38|
000026  4804              LDR      r0,|L2.56|
000028  f7fffffe          BL       FLASH_ErasePage
00002c  4604              MOV      r4,r0                 ;431
00002e  4620              MOV      r0,r4                 ;434
000030  e7ef              B        |L2.18|
;;;436    
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x08010000
                  |L2.56|
                          DCD      0x08010800

                          AREA ||i.EE_Init||, CODE, READONLY, ALIGN=1

                  EE_Init PROC
;;;303    
;;;304    uint16_t EE_Init(void)
000000  b510              PUSH     {r4,lr}
;;;305    {
;;;306    uint16_t FlashStatus;
;;;307       
;;;308       FlashStatus=__EE_Init();
000002  f7fffffe          BL       __EE_Init
000006  4604              MOV      r4,r0
;;;309       
;;;310       InitCurrWrAddress();
000008  f7fffffe          BL       InitCurrWrAddress
;;;311       
;;;312       return(FlashStatus);
00000c  4620              MOV      r0,r4
;;;313    }
00000e  bd10              POP      {r4,pc}
;;;314    /**
                          ENDP


                          AREA ||i.EE_PageTransfer||, CODE, READONLY, ALIGN=2

                  EE_PageTransfer PROC
;;;582      */
;;;583    static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;584    {
000004  4607              MOV      r7,r0
000006  4689              MOV      r9,r1
;;;585      FLASH_Status FlashStatus = FLASH_COMPLETE;
000008  2504              MOVS     r5,#4
;;;586      uint32_t NewPageAddress = 0x080103FF, OldPageAddress = 0x08010000;
00000a  f8dfa0d4          LDR      r10,|L4.224|
00000e  4835              LDR      r0,|L4.228|
000010  9000              STR      r0,[sp,#0]
;;;587      uint16_t ValidPage = PAGE0, VarIdx = 0;
000012  f04f0800          MOV      r8,#0
000016  2400              MOVS     r4,#0
;;;588      uint16_t EepromStatus = 0, ReadStatus = 0;
000018  2600              MOVS     r6,#0
00001a  f04f0b00          MOV      r11,#0
;;;589    
;;;590      /* Get active Page for read operation */
;;;591      ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       EE_FindValidPage
000024  4680              MOV      r8,r0
;;;592    
;;;593      if (ValidPage == PAGE1)       /* Page1 valid */
000026  f1b80f01          CMP      r8,#1
00002a  d104              BNE      |L4.54|
;;;594      {
;;;595        /* New page address where variable will be moved to */
;;;596        NewPageAddress = PAGE0_BASE_ADDRESS;
00002c  f8dfa0b4          LDR      r10,|L4.228|
;;;597    
;;;598        /* Old page address where variable will be taken from */
;;;599        OldPageAddress = PAGE1_BASE_ADDRESS;
000030  482d              LDR      r0,|L4.232|
000032  9000              STR      r0,[sp,#0]
000034  e00a              B        |L4.76|
                  |L4.54|
;;;600      }
;;;601      else if (ValidPage == PAGE0)  /* Page0 valid */
000036  f1b80f00          CMP      r8,#0
00003a  d104              BNE      |L4.70|
;;;602      {
;;;603        /* New page address where variable will be moved to */
;;;604        NewPageAddress = PAGE1_BASE_ADDRESS;
00003c  f8dfa0a8          LDR      r10,|L4.232|
;;;605    
;;;606        /* Old page address where variable will be taken from */
;;;607        OldPageAddress = PAGE0_BASE_ADDRESS;
000040  4828              LDR      r0,|L4.228|
000042  9000              STR      r0,[sp,#0]
000044  e002              B        |L4.76|
                  |L4.70|
;;;608      }
;;;609      else
;;;610      {
;;;611        return NO_VALID_PAGE;       /* No valid Page */
000046  20ab              MOVS     r0,#0xab
                  |L4.72|
;;;612      }
;;;613    
;;;614      /* Set the new Page status to RECEIVE_DATA status */
;;;615      FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, RECEIVE_DATA);
;;;616      /* If program operation was failed, a Flash error code is returned */
;;;617      if (FlashStatus != FLASH_COMPLETE)
;;;618      {
;;;619        return FlashStatus;
;;;620      }
;;;621    
;;;622      InitCurrWrAddress();//aft 重新初始化写地址
;;;623      /* Write the variable passed as parameter in the new active page */
;;;624      EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
;;;625      /* If program operation was failed, a Flash error code is returned */
;;;626      if (EepromStatus != FLASH_COMPLETE)
;;;627      {
;;;628        return EepromStatus;
;;;629      }
;;;630    
;;;631      /* Transfer process: transfer variables from old to the new active page */
;;;632      for (VarIdx = 0; VarIdx < NumbOfVar; VarIdx++)
;;;633      {
;;;634        if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
;;;635        {
;;;636          /* Read the other last variable updates */
;;;637          ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
;;;638          /* In case variable corresponding to the virtual address was found */
;;;639          if (ReadStatus != 0x1)
;;;640          {
;;;641            /* Transfer the variable to the new active page */
;;;642            EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
;;;643            /* If program operation was failed, a Flash error code is returned */
;;;644            if (EepromStatus != FLASH_COMPLETE)
;;;645            {
;;;646              return EepromStatus;
;;;647            }
;;;648          }
;;;649        }
;;;650      }
;;;651    
;;;652      /* Erase the old Page: Set old Page status to ERASED status */
;;;653      FlashStatus = FLASH_ErasePage(OldPageAddress);
;;;654      /* If erase operation was failed, a Flash error code is returned */
;;;655      if (FlashStatus != FLASH_COMPLETE)
;;;656      {
;;;657        return FlashStatus;
;;;658      }
;;;659    
;;;660      /* Set new Page status to VALID_PAGE status */
;;;661      FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, VALID_PAGE);
;;;662      /* If program operation was failed, a Flash error code is returned */
;;;663      if (FlashStatus != FLASH_COMPLETE)
;;;664      {
;;;665        return FlashStatus;
;;;666      }
;;;667    
;;;668      /* Return last operation flash status */
;;;669      return FlashStatus;
;;;670    }
000048  e8bd8ff8          POP      {r3-r11,pc}
                  |L4.76|
00004c  f64e61ee          MOV      r1,#0xeeee            ;615
000050  4650              MOV      r0,r10                ;615
000052  f7fffffe          BL       FLASH_ProgramHalfWord
000056  4605              MOV      r5,r0                 ;615
000058  2d04              CMP      r5,#4                 ;617
00005a  d001              BEQ      |L4.96|
00005c  4628              MOV      r0,r5                 ;619
00005e  e7f3              B        |L4.72|
                  |L4.96|
000060  f7fffffe          BL       InitCurrWrAddress
000064  4649              MOV      r1,r9                 ;624
000066  4638              MOV      r0,r7                 ;624
000068  f7fffffe          BL       EE_VerifyPageFullWriteVariable
00006c  4606              MOV      r6,r0                 ;624
00006e  2e04              CMP      r6,#4                 ;626
000070  d001              BEQ      |L4.118|
000072  4630              MOV      r0,r6                 ;628
000074  e7e8              B        |L4.72|
                  |L4.118|
000076  2400              MOVS     r4,#0                 ;632
000078  e01d              B        |L4.182|
                  |L4.122|
00007a  481c              LDR      r0,|L4.236|
00007c  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;634
000080  42b8              CMP      r0,r7                 ;634
000082  d016              BEQ      |L4.178|
000084  4919              LDR      r1,|L4.236|
000086  f8310014          LDRH     r0,[r1,r4,LSL #1]     ;637
00008a  4919              LDR      r1,|L4.240|
00008c  f7fffffe          BL       EE_ReadVariable
000090  4683              MOV      r11,r0                ;637
000092  f1bb0f01          CMP      r11,#1                ;639
000096  d00c              BEQ      |L4.178|
000098  4914              LDR      r1,|L4.236|
00009a  f8310014          LDRH     r0,[r1,r4,LSL #1]     ;642
00009e  4914              LDR      r1,|L4.240|
0000a0  8809              LDRH     r1,[r1,#0]            ;642  ; DataVar
0000a2  b289              UXTH     r1,r1                 ;642
0000a4  f7fffffe          BL       EE_VerifyPageFullWriteVariable
0000a8  4606              MOV      r6,r0                 ;642
0000aa  2e04              CMP      r6,#4                 ;644
0000ac  d001              BEQ      |L4.178|
0000ae  4630              MOV      r0,r6                 ;646
0000b0  e7ca              B        |L4.72|
                  |L4.178|
0000b2  1c60              ADDS     r0,r4,#1              ;632
0000b4  b284              UXTH     r4,r0                 ;632
                  |L4.182|
0000b6  2c4b              CMP      r4,#0x4b              ;632
0000b8  dbdf              BLT      |L4.122|
0000ba  9800              LDR      r0,[sp,#0]            ;653
0000bc  f7fffffe          BL       FLASH_ErasePage
0000c0  4605              MOV      r5,r0                 ;653
0000c2  2d04              CMP      r5,#4                 ;655
0000c4  d001              BEQ      |L4.202|
0000c6  4628              MOV      r0,r5                 ;657
0000c8  e7be              B        |L4.72|
                  |L4.202|
0000ca  2100              MOVS     r1,#0                 ;661
0000cc  4650              MOV      r0,r10                ;661
0000ce  f7fffffe          BL       FLASH_ProgramHalfWord
0000d2  4605              MOV      r5,r0                 ;661
0000d4  2d04              CMP      r5,#4                 ;663
0000d6  d001              BEQ      |L4.220|
0000d8  4628              MOV      r0,r5                 ;665
0000da  e7b5              B        |L4.72|
                  |L4.220|
0000dc  4628              MOV      r0,r5                 ;669
0000de  e7b3              B        |L4.72|
;;;671    
                          ENDP

                  |L4.224|
                          DCD      0x080103ff
                  |L4.228|
                          DCD      0x08010000
                  |L4.232|
                          DCD      0x08010800
                  |L4.236|
                          DCD      VirtAddVarTab
                  |L4.240|
                          DCD      DataVar

                          AREA ||i.EE_ReadVariable||, CODE, READONLY, ALIGN=2

                  EE_ReadVariable PROC
;;;323      */
;;;324    uint16_t EE_ReadVariable(uint16_t VirtAddress, int16_t* Data)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;325    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;326      uint16_t ValidPage = PAGE0;
000008  2500              MOVS     r5,#0
;;;327      uint16_t AddressValue = 0x5555, ReadStatus = 1;
00000a  f2455855          MOV      r8,#0x5555
00000e  f04f0901          MOV      r9,#1
;;;328      uint32_t Address = 0x08010000, PageStartAddress = 0x08010000;
000012  4c12              LDR      r4,|L5.92|
000014  46a2              MOV      r10,r4
;;;329    
;;;330      /* Get active Page for read operation */
;;;331      ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       EE_FindValidPage
00001c  4605              MOV      r5,r0
;;;332    
;;;333      /* Check if there is no valid page */
;;;334      if (ValidPage == NO_VALID_PAGE)
00001e  2dab              CMP      r5,#0xab
000020  d101              BNE      |L5.38|
                  |L5.34|
;;;335      {
;;;336        return  NO_VALID_PAGE;
;;;337      }
;;;338    
;;;339      /* Get the valid Page start Address */
;;;340      PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
;;;341    
;;;342      /* Get the valid Page end Address */
;;;343      //Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
;;;344      Address=CurWrAddress-2;
;;;345    
;;;346      /* Check each active page address starting from end */
;;;347      while (Address > (PageStartAddress + 2))
;;;348      {
;;;349        /* Get the current location content to be compared with virtual address */
;;;350        AddressValue = (*(__IO uint16_t*)Address);
;;;351    
;;;352        /* Compare the read address with the virtual address */
;;;353        if (AddressValue == VirtAddress)
;;;354        {
;;;355          /* Get content of Address-2 which is variable value */
;;;356          *Data = (*(__IO uint16_t*)(Address - 2));
;;;357    
;;;358          /* In case variable value is read, reset ReadStatus flag */
;;;359          ReadStatus = 0;
;;;360    
;;;361          break;
;;;362        }
;;;363        else
;;;364        {
;;;365          /* Next address location */
;;;366          Address = Address - 4;
;;;367        }
;;;368      }
;;;369    
;;;370      /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
;;;371      return ReadStatus;
;;;372    }
000022  e8bd87f0          POP      {r4-r10,pc}
                  |L5.38|
000026  480d              LDR      r0,|L5.92|
000028  eb002ac5          ADD      r10,r0,r5,LSL #11     ;340
00002c  480c              LDR      r0,|L5.96|
00002e  6800              LDR      r0,[r0,#0]            ;344  ; CurWrAddress
000030  1e84              SUBS     r4,r0,#2              ;344
000032  e00b              B        |L5.76|
                  |L5.52|
000034  f8b48000          LDRH     r8,[r4,#0]            ;350
000038  45b0              CMP      r8,r6                 ;353
00003a  d106              BNE      |L5.74|
00003c  f8340c02          LDRH     r0,[r4,#-2]           ;356
000040  b200              SXTH     r0,r0                 ;356
000042  8038              STRH     r0,[r7,#0]            ;356
000044  f04f0900          MOV      r9,#0                 ;359
000048  e004              B        |L5.84|
                  |L5.74|
00004a  1f24              SUBS     r4,r4,#4              ;366
                  |L5.76|
00004c  f10a0002          ADD      r0,r10,#2             ;347
000050  4284              CMP      r4,r0                 ;347
000052  d8ef              BHI      |L5.52|
                  |L5.84|
000054  bf00              NOP                            ;361
000056  4648              MOV      r0,r9                 ;371
000058  e7e3              B        |L5.34|
;;;373    
                          ENDP

00005a  0000              DCW      0x0000
                  |L5.92|
                          DCD      0x08010000
                  |L5.96|
                          DCD      CurWrAddress

                          AREA ||i.EE_VerifyPageFullWriteVariable||, CODE, READONLY, ALIGN=2

                  EE_VerifyPageFullWriteVariable PROC
;;;517      */
;;;518    static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;519    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;520      FLASH_Status FlashStatus = FLASH_COMPLETE;
000008  2504              MOVS     r5,#4
;;;521      uint16_t ValidPage = PAGE0;
00000a  2600              MOVS     r6,#0
;;;522      //uint32_t Address = 0x08010000, 
;;;523      uint32_t PageEndAddress = 0x080107FF;
00000c  f8df806c          LDR      r8,|L6.124|
;;;524    
;;;525      /* Get valid Page for write operation */
;;;526      ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       EE_FindValidPage
000016  4606              MOV      r6,r0
;;;527    
;;;528      /* Check if there is no valid page */
;;;529      if (ValidPage == NO_VALID_PAGE)
000018  2eab              CMP      r6,#0xab
00001a  d101              BNE      |L6.32|
                  |L6.28|
;;;530      {
;;;531        return  NO_VALID_PAGE;
;;;532      }
;;;533    
;;;534      /* Get the valid Page start Address */
;;;535      //Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
;;;536      //Address = CurWrAddress;//当前写地址
;;;537    
;;;538      /* Get the valid Page end Address */
;;;539      PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
;;;540    
;;;541      /* Check each active page address starting from begining */
;;;542      while (CurWrAddress < PageEndAddress)
;;;543      {
;;;544        /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
;;;545        if ((*(__IO uint32_t*)CurWrAddress) == 0xFFFFFFFF)
;;;546        {
;;;547          /* Set variable data */
;;;548          FlashStatus = FLASH_ProgramHalfWord(CurWrAddress, Data);
;;;549          /* If program operation was failed, a Flash error code is returned */
;;;550          if (FlashStatus != FLASH_COMPLETE)
;;;551          {
;;;552            return FlashStatus;
;;;553          }
;;;554          /* Set variable virtual address */
;;;555          FlashStatus = FLASH_ProgramHalfWord(CurWrAddress + 2, VirtAddress);
;;;556          
;;;557          CurWrAddress = CurWrAddress + 4;
;;;558          /* Return program operation status */
;;;559          return FlashStatus;
;;;560        }
;;;561        else
;;;562        {//修改后的算法是不会执行到这里的
;;;563          /* Next address location */
;;;564          CurWrAddress = CurWrAddress + 4;
;;;565        }
;;;566      }
;;;567    
;;;568      /* Return PAGE_FULL in case the valid page is full */
;;;569      return PAGE_FULL;
;;;570    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L6.32|
000020  1c70              ADDS     r0,r6,#1              ;539
000022  4917              LDR      r1,|L6.128|
000024  eb0128c0          ADD      r8,r1,r0,LSL #11      ;539
000028  e021              B        |L6.110|
                  |L6.42|
00002a  4816              LDR      r0,|L6.132|
00002c  6800              LDR      r0,[r0,#0]            ;545  ; CurWrAddress
00002e  6800              LDR      r0,[r0,#0]            ;545
000030  1c40              ADDS     r0,r0,#1              ;545
000032  d117              BNE      |L6.100|
000034  4639              MOV      r1,r7                 ;548
000036  4813              LDR      r0,|L6.132|
000038  6800              LDR      r0,[r0,#0]            ;548  ; CurWrAddress
00003a  f7fffffe          BL       FLASH_ProgramHalfWord
00003e  4605              MOV      r5,r0                 ;548
000040  2d04              CMP      r5,#4                 ;550
000042  d001              BEQ      |L6.72|
000044  4628              MOV      r0,r5                 ;552
000046  e7e9              B        |L6.28|
                  |L6.72|
000048  4621              MOV      r1,r4                 ;555
00004a  480e              LDR      r0,|L6.132|
00004c  6800              LDR      r0,[r0,#0]            ;555  ; CurWrAddress
00004e  1c80              ADDS     r0,r0,#2              ;555
000050  f7fffffe          BL       FLASH_ProgramHalfWord
000054  4605              MOV      r5,r0                 ;555
000056  480b              LDR      r0,|L6.132|
000058  6800              LDR      r0,[r0,#0]            ;557  ; CurWrAddress
00005a  1d00              ADDS     r0,r0,#4              ;557
00005c  4909              LDR      r1,|L6.132|
00005e  6008              STR      r0,[r1,#0]            ;557  ; CurWrAddress
000060  4628              MOV      r0,r5                 ;559
000062  e7db              B        |L6.28|
                  |L6.100|
000064  4807              LDR      r0,|L6.132|
000066  6800              LDR      r0,[r0,#0]            ;564  ; CurWrAddress
000068  1d00              ADDS     r0,r0,#4              ;564
00006a  4906              LDR      r1,|L6.132|
00006c  6008              STR      r0,[r1,#0]            ;564  ; CurWrAddress
                  |L6.110|
00006e  4805              LDR      r0,|L6.132|
000070  6800              LDR      r0,[r0,#0]            ;542  ; CurWrAddress
000072  4540              CMP      r0,r8                 ;542
000074  d3d9              BCC      |L6.42|
000076  2080              MOVS     r0,#0x80              ;569
000078  e7d0              B        |L6.28|
;;;571    
                          ENDP

00007a  0000              DCW      0x0000
                  |L6.124|
                          DCD      0x080107ff
                  |L6.128|
                          DCD      0x0800fffe
                  |L6.132|
                          DCD      CurWrAddress

                          AREA ||i.EE_WriteVariable||, CODE, READONLY, ALIGN=1

                  EE_WriteVariable PROC
;;;383      */
;;;384    uint16_t EE_WriteVariable(uint16_t VirtAddress, int16_t Data)
000000  b570              PUSH     {r4-r6,lr}
;;;385    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;386      uint16_t Status = 0;
000006  2500              MOVS     r5,#0
;;;387    
;;;388      /* Write the variable virtual address and value in the EEPROM */
;;;389      Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
000008  b2a1              UXTH     r1,r4
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       EE_VerifyPageFullWriteVariable
000010  4605              MOV      r5,r0
;;;390    
;;;391      /* In case the EEPROM active page is full */
;;;392      if (Status == PAGE_FULL)
000012  2d80              CMP      r5,#0x80
000014  d104              BNE      |L7.32|
;;;393      {
;;;394        /* Perform Page transfer */
;;;395        Status = EE_PageTransfer(VirtAddress, Data);
000016  b2a1              UXTH     r1,r4
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       EE_PageTransfer
00001e  4605              MOV      r5,r0
                  |L7.32|
;;;396      }
;;;397    
;;;398      /* Return last operation status */
;;;399      return Status;
000020  4628              MOV      r0,r5
;;;400    }
000022  bd70              POP      {r4-r6,pc}
;;;401    
                          ENDP


                          AREA ||i.InitCurrWrAddress||, CODE, READONLY, ALIGN=2

                  InitCurrWrAddress PROC
;;;45     //初始化写地址，减少每次读写时查询时间
;;;46     uint16_t InitCurrWrAddress(void)
000000  b570              PUSH     {r4-r6,lr}
;;;47     {
;;;48       FLASH_Status FlashStatus = FLASH_COMPLETE;
000002  2604              MOVS     r6,#4
;;;49       uint16_t ValidPage = PAGE0;
000004  2400              MOVS     r4,#0
;;;50       //uint32_t Address;
;;;51       uint32_t PageEndAddress;
;;;52       
;;;53       /* Get valid Page for write operation */
;;;54       ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       EE_FindValidPage
00000c  4604              MOV      r4,r0
;;;55     
;;;56       /* Check if there is no valid page */
;;;57       if (ValidPage == NO_VALID_PAGE)
00000e  2cab              CMP      r4,#0xab
000010  d106              BNE      |L8.32|
;;;58       {
;;;59         CurWrAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
000012  4812              LDR      r0,|L8.92|
000014  eb0020c4          ADD      r0,r0,r4,LSL #11
000018  4911              LDR      r1,|L8.96|
00001a  6008              STR      r0,[r1,#0]  ; CurWrAddress
;;;60         return  NO_VALID_PAGE;
00001c  20ab              MOVS     r0,#0xab
                  |L8.30|
;;;61       }
;;;62       
;;;63       /* Get the valid Page start Address */
;;;64       //Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
;;;65       CurWrAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
;;;66     
;;;67       /* Get the valid Page end Address */
;;;68       PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
;;;69     
;;;70       /* Check each active page address starting from begining */
;;;71       while (CurWrAddress < PageEndAddress)
;;;72       {
;;;73         /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
;;;74         if ((*(__IO uint32_t*)CurWrAddress) == 0xFFFFFFFF)
;;;75         {
;;;76           
;;;77           /* Set variable virtual address */
;;;78           FlashStatus = FLASH_COMPLETE;
;;;79           /* Return program operation status */
;;;80           return FlashStatus;
;;;81         }
;;;82         else
;;;83         {
;;;84           /* Next address location */
;;;85           CurWrAddress = CurWrAddress + 4;
;;;86         }
;;;87       }
;;;88     
;;;89       /* Return PAGE_FULL in case the valid page is full */
;;;90       return PAGE_FULL;
;;;91     }
00001e  bd70              POP      {r4-r6,pc}
                  |L8.32|
000020  480e              LDR      r0,|L8.92|
000022  eb0020c4          ADD      r0,r0,r4,LSL #11      ;65
000026  490e              LDR      r1,|L8.96|
000028  6008              STR      r0,[r1,#0]            ;65  ; CurWrAddress
00002a  1c60              ADDS     r0,r4,#1              ;68
00002c  490b              LDR      r1,|L8.92|
00002e  1e89              SUBS     r1,r1,#2              ;68
000030  eb0125c0          ADD      r5,r1,r0,LSL #11      ;68
000034  e00c              B        |L8.80|
                  |L8.54|
000036  480a              LDR      r0,|L8.96|
000038  6800              LDR      r0,[r0,#0]            ;74  ; CurWrAddress
00003a  6800              LDR      r0,[r0,#0]            ;74
00003c  1c40              ADDS     r0,r0,#1              ;74
00003e  d102              BNE      |L8.70|
000040  2604              MOVS     r6,#4                 ;78
000042  4630              MOV      r0,r6                 ;80
000044  e7eb              B        |L8.30|
                  |L8.70|
000046  4806              LDR      r0,|L8.96|
000048  6800              LDR      r0,[r0,#0]            ;85  ; CurWrAddress
00004a  1d00              ADDS     r0,r0,#4              ;85
00004c  4904              LDR      r1,|L8.96|
00004e  6008              STR      r0,[r1,#0]            ;85  ; CurWrAddress
                  |L8.80|
000050  4803              LDR      r0,|L8.96|
000052  6800              LDR      r0,[r0,#0]            ;71  ; CurWrAddress
000054  42a8              CMP      r0,r5                 ;71
000056  d3ee              BCC      |L8.54|
000058  2080              MOVS     r0,#0x80              ;90
00005a  e7e0              B        |L8.30|
;;;92     /**
                          ENDP

                  |L8.92|
                          DCD      0x08010000
                  |L8.96|
                          DCD      CurWrAddress

                          AREA ||i.__EE_Init||, CODE, READONLY, ALIGN=2

                  __EE_Init PROC
;;;98       */
;;;99     uint16_t __EE_Init(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;100    {
;;;101      uint16_t PageStatus0 = 6, PageStatus1 = 6;
000004  f04f0a06          MOV      r10,#6
000008  2606              MOVS     r6,#6
;;;102      uint16_t VarIdx = 0;
00000a  2500              MOVS     r5,#0
;;;103      uint16_t EepromStatus = 0, ReadStatus = 0;
00000c  2700              MOVS     r7,#0
00000e  46a8              MOV      r8,r5
;;;104      int16_t x = -1;
000010  f04f39ff          MOV      r9,#0xffffffff
;;;105      uint16_t  FlashStatus;
;;;106    
;;;107      /* Get Page0 status */
;;;108      PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
000014  4874              LDR      r0,|L9.488|
000016  f8b0a000          LDRH     r10,[r0,#0]
;;;109      /* Get Page1 status */
;;;110      PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
00001a  4874              LDR      r0,|L9.492|
00001c  8806              LDRH     r6,[r0,#0]
;;;111    
;;;112      /* Check for invalid header states and repair if necessary */
;;;113      switch (PageStatus0)
00001e  ea5f000a          MOVS     r0,r10
000022  d075              BEQ      |L9.272|
000024  f5a0406e          SUB      r0,r0,#0xee00
000028  38ee              SUBS     r0,r0,#0xee
00002a  d02a              BEQ      |L9.130|
00002c  f5a05088          SUB      r0,r0,#0x1100
000030  3811              SUBS     r0,r0,#0x11
000032  d16e              BNE      |L9.274|
;;;114      {
;;;115        case ERASED:
;;;116          if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
000034  b946              CBNZ     r6,|L9.72|
;;;117          {
;;;118            /* Erase Page0 */
;;;119            FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
000036  486c              LDR      r0,|L9.488|
000038  f7fffffe          BL       FLASH_ErasePage
00003c  4604              MOV      r4,r0
;;;120            /* If erase operation was failed, a Flash error code is returned */
;;;121            if (FlashStatus != FLASH_COMPLETE)
00003e  2c04              CMP      r4,#4
000040  d01e              BEQ      |L9.128|
;;;122            {
;;;123              return FlashStatus;
000042  4620              MOV      r0,r4
                  |L9.68|
;;;124            }
;;;125          }
;;;126          else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
;;;127          {
;;;128            /* Erase Page0 */
;;;129            FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
;;;130            /* If erase operation was failed, a Flash error code is returned */
;;;131            if (FlashStatus != FLASH_COMPLETE)
;;;132            {
;;;133              return FlashStatus;
;;;134            }
;;;135            /* Mark Page1 as valid */
;;;136            FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
;;;137            /* If program operation was failed, a Flash error code is returned */
;;;138            if (FlashStatus != FLASH_COMPLETE)
;;;139            {
;;;140              return FlashStatus;
;;;141            }
;;;142          }
;;;143          else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
;;;144          {
;;;145            /* Erase both Page0 and Page1 and set Page0 as valid page */
;;;146            FlashStatus = EE_Format();
;;;147            /* If erase/program operation was failed, a Flash error code is returned */
;;;148            if (FlashStatus != FLASH_COMPLETE)
;;;149            {
;;;150              return FlashStatus;
;;;151            }
;;;152          }
;;;153          break;
;;;154    
;;;155        case RECEIVE_DATA:
;;;156          if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
;;;157          {
;;;158            /* Transfer data from Page1 to Page0 */
;;;159            for (VarIdx = 0; VarIdx < NumbOfVar; VarIdx++)
;;;160            {
;;;161              if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
;;;162              {
;;;163                x = VarIdx;
;;;164              }
;;;165              if (VarIdx != x)
;;;166              {
;;;167                /* Read the last variables' updates */
;;;168                ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
;;;169                /* In case variable corresponding to the virtual address was found */
;;;170                if (ReadStatus != 0x1)
;;;171                {
;;;172                  /* Transfer the variable to the Page0 */
;;;173                  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
;;;174                  /* If program operation was failed, a Flash error code is returned */
;;;175                  if (EepromStatus != FLASH_COMPLETE)
;;;176                  {
;;;177                    return EepromStatus;
;;;178                  }
;;;179                }
;;;180              }
;;;181            }
;;;182            /* Mark Page0 as valid */
;;;183            FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
;;;184            /* If program operation was failed, a Flash error code is returned */
;;;185            if (FlashStatus != FLASH_COMPLETE)
;;;186            {
;;;187              return FlashStatus;
;;;188            }
;;;189            /* Erase Page1 */
;;;190            FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
;;;191            /* If erase operation was failed, a Flash error code is returned */
;;;192            if (FlashStatus != FLASH_COMPLETE)
;;;193            {
;;;194              return FlashStatus;
;;;195            }
;;;196          }
;;;197          else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
;;;198          {
;;;199            /* Erase Page1 */
;;;200            FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
;;;201            /* If erase operation was failed, a Flash error code is returned */
;;;202            if (FlashStatus != FLASH_COMPLETE)
;;;203            {
;;;204              return FlashStatus;
;;;205            }
;;;206            /* Mark Page0 as valid */
;;;207            FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
;;;208            /* If program operation was failed, a Flash error code is returned */
;;;209            if (FlashStatus != FLASH_COMPLETE)
;;;210            {
;;;211              return FlashStatus;
;;;212            }
;;;213          }
;;;214          else /* Invalid state -> format eeprom */
;;;215          {
;;;216            /* Erase both Page0 and Page1 and set Page0 as valid page */
;;;217            FlashStatus = EE_Format();
;;;218            /* If erase/program operation was failed, a Flash error code is returned */
;;;219            if (FlashStatus != FLASH_COMPLETE)
;;;220            {
;;;221              return FlashStatus;
;;;222            }
;;;223          }
;;;224          break;
;;;225    
;;;226        case VALID_PAGE:
;;;227          if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
;;;228          {
;;;229            /* Erase both Page0 and Page1 and set Page0 as valid page */
;;;230            FlashStatus = EE_Format();
;;;231            /* If erase/program operation was failed, a Flash error code is returned */
;;;232            if (FlashStatus != FLASH_COMPLETE)
;;;233            {
;;;234              return FlashStatus;
;;;235            }
;;;236          }
;;;237          else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
;;;238          {
;;;239            /* Erase Page1 */
;;;240            FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
;;;241            /* If erase operation was failed, a Flash error code is returned */
;;;242            if (FlashStatus != FLASH_COMPLETE)
;;;243            {
;;;244              return FlashStatus;
;;;245            }
;;;246          }
;;;247          else /* Page0 valid, Page1 receive */
;;;248          {
;;;249            /* Transfer data from Page0 to Page1 */
;;;250            for (VarIdx = 0; VarIdx < NumbOfVar; VarIdx++)
;;;251            {
;;;252              if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
;;;253              {
;;;254                x = VarIdx;
;;;255              }
;;;256              if (VarIdx != x)
;;;257              {
;;;258                /* Read the last variables' updates */
;;;259                ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
;;;260                /* In case variable corresponding to the virtual address was found */
;;;261                if (ReadStatus != 0x1)
;;;262                {
;;;263                  /* Transfer the variable to the Page1 */
;;;264                  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
;;;265                  /* If program operation was failed, a Flash error code is returned */
;;;266                  if (EepromStatus != FLASH_COMPLETE)
;;;267                  {
;;;268                    return EepromStatus;
;;;269                  }
;;;270                }
;;;271              }
;;;272            }
;;;273            /* Mark Page1 as valid */
;;;274            FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
;;;275            /* If program operation was failed, a Flash error code is returned */
;;;276            if (FlashStatus != FLASH_COMPLETE)
;;;277            {
;;;278              return FlashStatus;
;;;279            }
;;;280            /* Erase Page0 */
;;;281            FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
;;;282            /* If erase operation was failed, a Flash error code is returned */
;;;283            if (FlashStatus != FLASH_COMPLETE)
;;;284            {
;;;285              return FlashStatus;
;;;286            }
;;;287          }
;;;288          break;
;;;289    
;;;290        default:  /* Any other state -> format eeprom */
;;;291          /* Erase both Page0 and Page1 and set Page0 as valid page */
;;;292          FlashStatus = EE_Format();
;;;293          /* If erase/program operation was failed, a Flash error code is returned */
;;;294          if (FlashStatus != FLASH_COMPLETE)
;;;295          {
;;;296            return FlashStatus;
;;;297          }
;;;298          break;
;;;299      }
;;;300    
;;;301      return FLASH_COMPLETE;
;;;302    }
000044  e8bd87f0          POP      {r4-r10,pc}
                  |L9.72|
000048  f5a6406e          SUB      r0,r6,#0xee00         ;126
00004c  38ee              SUBS     r0,r0,#0xee           ;126
00004e  d110              BNE      |L9.114|
000050  4865              LDR      r0,|L9.488|
000052  f7fffffe          BL       FLASH_ErasePage
000056  4604              MOV      r4,r0                 ;129
000058  2c04              CMP      r4,#4                 ;131
00005a  d001              BEQ      |L9.96|
00005c  4620              MOV      r0,r4                 ;133
00005e  e7f1              B        |L9.68|
                  |L9.96|
000060  2100              MOVS     r1,#0                 ;136
000062  4862              LDR      r0,|L9.492|
000064  f7fffffe          BL       FLASH_ProgramHalfWord
000068  4604              MOV      r4,r0                 ;136
00006a  2c04              CMP      r4,#4                 ;138
00006c  d008              BEQ      |L9.128|
00006e  4620              MOV      r0,r4                 ;140
000070  e7e8              B        |L9.68|
                  |L9.114|
000072  f7fffffe          BL       EE_Format
000076  4604              MOV      r4,r0                 ;146
000078  2c04              CMP      r4,#4                 ;148
00007a  d001              BEQ      |L9.128|
00007c  4620              MOV      r0,r4                 ;150
00007e  e7e1              B        |L9.68|
                  |L9.128|
000080  e0af              B        |L9.482|
                  |L9.130|
000082  bb86              CBNZ     r6,|L9.230|
000084  2500              MOVS     r5,#0                 ;159
000086  e023              B        |L9.208|
                  |L9.136|
000088  4857              LDR      r0,|L9.488|
00008a  88c0              LDRH     r0,[r0,#6]            ;161
00008c  4958              LDR      r1,|L9.496|
00008e  f8311015          LDRH     r1,[r1,r5,LSL #1]     ;161
000092  4288              CMP      r0,r1                 ;161
000094  d101              BNE      |L9.154|
000096  fa0ff985          SXTH     r9,r5                 ;163
                  |L9.154|
00009a  454d              CMP      r5,r9                 ;165
00009c  d016              BEQ      |L9.204|
00009e  4954              LDR      r1,|L9.496|
0000a0  f8310015          LDRH     r0,[r1,r5,LSL #1]     ;168
0000a4  4953              LDR      r1,|L9.500|
0000a6  f7fffffe          BL       EE_ReadVariable
0000aa  4680              MOV      r8,r0                 ;168
0000ac  f1b80f01          CMP      r8,#1                 ;170
0000b0  d00c              BEQ      |L9.204|
0000b2  494f              LDR      r1,|L9.496|
0000b4  f8310015          LDRH     r0,[r1,r5,LSL #1]     ;173
0000b8  494e              LDR      r1,|L9.500|
0000ba  8809              LDRH     r1,[r1,#0]            ;173  ; DataVar
0000bc  b289              UXTH     r1,r1                 ;173
0000be  f7fffffe          BL       EE_VerifyPageFullWriteVariable
0000c2  4607              MOV      r7,r0                 ;173
0000c4  2f04              CMP      r7,#4                 ;175
0000c6  d001              BEQ      |L9.204|
0000c8  4638              MOV      r0,r7                 ;177
0000ca  e7bb              B        |L9.68|
                  |L9.204|
0000cc  1c68              ADDS     r0,r5,#1              ;159
0000ce  b285              UXTH     r5,r0                 ;159
                  |L9.208|
0000d0  2d4b              CMP      r5,#0x4b              ;159
0000d2  dbd9              BLT      |L9.136|
0000d4  2100              MOVS     r1,#0                 ;183
0000d6  4844              LDR      r0,|L9.488|
0000d8  f7fffffe          BL       FLASH_ProgramHalfWord
0000dc  4604              MOV      r4,r0                 ;183
0000de  2c04              CMP      r4,#4                 ;185
0000e0  d002              BEQ      |L9.232|
0000e2  4620              MOV      r0,r4                 ;187
0000e4  e7ae              B        |L9.68|
                  |L9.230|
0000e6  e007              B        |L9.248|
                  |L9.232|
0000e8  4840              LDR      r0,|L9.492|
0000ea  f7fffffe          BL       FLASH_ErasePage
0000ee  4604              MOV      r4,r0                 ;190
0000f0  2c04              CMP      r4,#4                 ;192
0000f2  d01f              BEQ      |L9.308|
0000f4  4620              MOV      r0,r4                 ;194
0000f6  e7a5              B        |L9.68|
                  |L9.248|
0000f8  f5a6407f          SUB      r0,r6,#0xff00         ;197
0000fc  38ff              SUBS     r0,r0,#0xff           ;197
0000fe  d112              BNE      |L9.294|
000100  483a              LDR      r0,|L9.492|
000102  f7fffffe          BL       FLASH_ErasePage
000106  4604              MOV      r4,r0                 ;200
000108  2c04              CMP      r4,#4                 ;202
00010a  d003              BEQ      |L9.276|
00010c  4620              MOV      r0,r4                 ;204
00010e  e799              B        |L9.68|
                  |L9.272|
000110  e011              B        |L9.310|
                  |L9.274|
000112  e05e              B        |L9.466|
                  |L9.276|
000114  2100              MOVS     r1,#0                 ;207
000116  4834              LDR      r0,|L9.488|
000118  f7fffffe          BL       FLASH_ProgramHalfWord
00011c  4604              MOV      r4,r0                 ;207
00011e  2c04              CMP      r4,#4                 ;209
000120  d008              BEQ      |L9.308|
000122  4620              MOV      r0,r4                 ;211
000124  e78e              B        |L9.68|
                  |L9.294|
000126  f7fffffe          BL       EE_Format
00012a  4604              MOV      r4,r0                 ;217
00012c  2c04              CMP      r4,#4                 ;219
00012e  d001              BEQ      |L9.308|
000130  4620              MOV      r0,r4                 ;221
000132  e787              B        |L9.68|
                  |L9.308|
000134  e055              B        |L9.482|
                  |L9.310|
000136  b936              CBNZ     r6,|L9.326|
000138  f7fffffe          BL       EE_Format
00013c  4604              MOV      r4,r0                 ;230
00013e  2c04              CMP      r4,#4                 ;232
000140  d046              BEQ      |L9.464|
000142  4620              MOV      r0,r4                 ;234
000144  e77e              B        |L9.68|
                  |L9.326|
000146  f5a6407f          SUB      r0,r6,#0xff00         ;237
00014a  38ff              SUBS     r0,r0,#0xff           ;237
00014c  d107              BNE      |L9.350|
00014e  4827              LDR      r0,|L9.492|
000150  f7fffffe          BL       FLASH_ErasePage
000154  4604              MOV      r4,r0                 ;240
000156  2c04              CMP      r4,#4                 ;242
000158  d03a              BEQ      |L9.464|
00015a  4620              MOV      r0,r4                 ;244
00015c  e772              B        |L9.68|
                  |L9.350|
00015e  2500              MOVS     r5,#0                 ;250
000160  e023              B        |L9.426|
                  |L9.354|
000162  4825              LDR      r0,|L9.504|
000164  8800              LDRH     r0,[r0,#0]            ;252
000166  4922              LDR      r1,|L9.496|
000168  f8311015          LDRH     r1,[r1,r5,LSL #1]     ;252
00016c  4288              CMP      r0,r1                 ;252
00016e  d101              BNE      |L9.372|
000170  fa0ff985          SXTH     r9,r5                 ;254
                  |L9.372|
000174  454d              CMP      r5,r9                 ;256
000176  d016              BEQ      |L9.422|
000178  491d              LDR      r1,|L9.496|
00017a  f8310015          LDRH     r0,[r1,r5,LSL #1]     ;259
00017e  491d              LDR      r1,|L9.500|
000180  f7fffffe          BL       EE_ReadVariable
000184  4680              MOV      r8,r0                 ;259
000186  f1b80f01          CMP      r8,#1                 ;261
00018a  d00c              BEQ      |L9.422|
00018c  4918              LDR      r1,|L9.496|
00018e  f8310015          LDRH     r0,[r1,r5,LSL #1]     ;264
000192  4918              LDR      r1,|L9.500|
000194  8809              LDRH     r1,[r1,#0]            ;264  ; DataVar
000196  b289              UXTH     r1,r1                 ;264
000198  f7fffffe          BL       EE_VerifyPageFullWriteVariable
00019c  4607              MOV      r7,r0                 ;264
00019e  2f04              CMP      r7,#4                 ;266
0001a0  d001              BEQ      |L9.422|
0001a2  4638              MOV      r0,r7                 ;268
0001a4  e74e              B        |L9.68|
                  |L9.422|
0001a6  1c68              ADDS     r0,r5,#1              ;250
0001a8  b285              UXTH     r5,r0                 ;250
                  |L9.426|
0001aa  2d4b              CMP      r5,#0x4b              ;250
0001ac  dbd9              BLT      |L9.354|
0001ae  2100              MOVS     r1,#0                 ;274
0001b0  480e              LDR      r0,|L9.492|
0001b2  f7fffffe          BL       FLASH_ProgramHalfWord
0001b6  4604              MOV      r4,r0                 ;274
0001b8  2c04              CMP      r4,#4                 ;276
0001ba  d001              BEQ      |L9.448|
0001bc  4620              MOV      r0,r4                 ;278
0001be  e741              B        |L9.68|
                  |L9.448|
0001c0  4809              LDR      r0,|L9.488|
0001c2  f7fffffe          BL       FLASH_ErasePage
0001c6  4604              MOV      r4,r0                 ;281
0001c8  2c04              CMP      r4,#4                 ;283
0001ca  d001              BEQ      |L9.464|
0001cc  4620              MOV      r0,r4                 ;285
0001ce  e739              B        |L9.68|
                  |L9.464|
0001d0  e007              B        |L9.482|
                  |L9.466|
0001d2  f7fffffe          BL       EE_Format
0001d6  4604              MOV      r4,r0                 ;292
0001d8  2c04              CMP      r4,#4                 ;294
0001da  d001              BEQ      |L9.480|
0001dc  4620              MOV      r0,r4                 ;296
0001de  e731              B        |L9.68|
                  |L9.480|
0001e0  bf00              NOP                            ;298
                  |L9.482|
0001e2  bf00              NOP                            ;153
0001e4  2004              MOVS     r0,#4                 ;301
0001e6  e72d              B        |L9.68|
;;;303    
                          ENDP

                  |L9.488|
                          DCD      0x08010000
                  |L9.492|
                          DCD      0x08010800
                  |L9.496|
                          DCD      VirtAddVarTab
                  |L9.500|
                          DCD      DataVar
                  |L9.504|
                          DCD      0x08010806

                          AREA ||.data||, DATA, ALIGN=2

                  DataVar
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  CurWrAddress
                          DCD      0x00000000
