; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -o.\Flash\Obj\multirotor_ahrs.o --depend=.\Flash\Obj\multirotor_ahrs.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -I..\..\User\Modules\Modules_ultrasonic -I..\..\User\sys -ID:\KEIL\KEIL_Pro\keil安装\ARM\INC -ID:\KEIL\KEIL_Pro\keil安装\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Flash\Obj\multirotor_ahrs.crf ..\..\User\Function\MultiRotor_ahrs\MultiRotor_ahrs.c]
                          THUMB

                          AREA ||i.AHRS_GetQ||, CODE, READONLY, ALIGN=2

                  AHRS_GetQ PROC
;;;67     /*====================================================================================================*/
;;;68     void AHRS_GetQ( Quaternion *pNumQ )
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;69     {
000004  b093              SUB      sp,sp,#0x4c
;;;70       fp32 ErrX, ErrY, ErrZ;
;;;71       fp32 AccX, AccY, AccZ;
;;;72       fp32 GyrX, GyrY, GyrZ;
;;;73     	fp32 Normalize;
;;;74       static fp32 exInt = 0.0f, eyInt = 0.0f, ezInt = 0.0f;
;;;75     	Gravity V;
;;;76     	
;;;77     	// 加速度归一化
;;;78     	Normalize = Q_rsqrt(squa(sensor.acc.averag.x)+ squa(sensor.acc.averag.y) +squa(sensor.acc.averag.z));
000006  4a9b              LDR      r2,|L1.628|
000008  6911              LDR      r1,[r2,#0x10]
00000a  6910              LDR      r0,[r2,#0x10]
00000c  f7fffffe          BL       __aeabi_fmul
000010  4606              MOV      r6,r0
000012  4a98              LDR      r2,|L1.628|
000014  68d1              LDR      r1,[r2,#0xc]
000016  68d0              LDR      r0,[r2,#0xc]
000018  f7fffffe          BL       __aeabi_fmul
00001c  4607              MOV      r7,r0
00001e  4a95              LDR      r2,|L1.628|
000020  6891              LDR      r1,[r2,#8]  ; sensor
000022  6890              LDR      r0,[r2,#8]  ; sensor
000024  f7fffffe          BL       __aeabi_fmul
000028  4639              MOV      r1,r7
00002a  9009              STR      r0,[sp,#0x24]
00002c  f7fffffe          BL       __aeabi_fadd
000030  4604              MOV      r4,r0
000032  4631              MOV      r1,r6
000034  f7fffffe          BL       __aeabi_fadd
000038  4605              MOV      r5,r0
00003a  f7fffffe          BL       Q_rsqrt
00003e  900d              STR      r0,[sp,#0x34]
;;;79     	AccX = sensor.acc.averag.x*Normalize;
000040  498c              LDR      r1,|L1.628|
000042  6888              LDR      r0,[r1,#8]  ; sensor
000044  990d              LDR      r1,[sp,#0x34]
000046  f7fffffe          BL       __aeabi_fmul
00004a  9012              STR      r0,[sp,#0x48]
;;;80       AccY = sensor.acc.averag.y*Normalize;
00004c  4989              LDR      r1,|L1.628|
00004e  68c8              LDR      r0,[r1,#0xc]
000050  990d              LDR      r1,[sp,#0x34]
000052  f7fffffe          BL       __aeabi_fmul
000056  9011              STR      r0,[sp,#0x44]
;;;81       AccZ = sensor.acc.averag.z*Normalize;
000058  4986              LDR      r1,|L1.628|
00005a  6908              LDR      r0,[r1,#0x10]
00005c  990d              LDR      r1,[sp,#0x34]
00005e  f7fffffe          BL       __aeabi_fmul
000062  9010              STR      r0,[sp,#0x40]
;;;82     
;;;83     	// 提取重力分量
;;;84     	V = Quaternion_vectorGravity(&NumQ);
000064  4984              LDR      r1,|L1.632|
000066  a80a              ADD      r0,sp,#0x28
000068  f7fffffe          BL       Quaternion_vectorGravity
;;;85     	
;;;86     	// 向量差乘
;;;87      	ErrX = (AccY*V.z - AccZ*V.y);
00006c  990b              LDR      r1,[sp,#0x2c]
00006e  9810              LDR      r0,[sp,#0x40]
000070  f7fffffe          BL       __aeabi_fmul
000074  4604              MOV      r4,r0
000076  990c              LDR      r1,[sp,#0x30]
000078  9811              LDR      r0,[sp,#0x44]
00007a  f7fffffe          BL       __aeabi_fmul
00007e  4605              MOV      r5,r0
000080  4621              MOV      r1,r4
000082  f7fffffe          BL       __aeabi_fsub
000086  4680              MOV      r8,r0
;;;88       ErrY = (AccZ*V.x - AccX*V.z);
000088  990c              LDR      r1,[sp,#0x30]
00008a  9812              LDR      r0,[sp,#0x48]
00008c  f7fffffe          BL       __aeabi_fmul
000090  4604              MOV      r4,r0
000092  990a              LDR      r1,[sp,#0x28]
000094  9810              LDR      r0,[sp,#0x40]
000096  f7fffffe          BL       __aeabi_fmul
00009a  4605              MOV      r5,r0
00009c  4621              MOV      r1,r4
00009e  f7fffffe          BL       __aeabi_fsub
0000a2  4681              MOV      r9,r0
;;;89       ErrZ = (AccX*V.y - AccY*V.x);
0000a4  990a              LDR      r1,[sp,#0x28]
0000a6  9811              LDR      r0,[sp,#0x44]
0000a8  f7fffffe          BL       __aeabi_fmul
0000ac  4604              MOV      r4,r0
0000ae  990b              LDR      r1,[sp,#0x2c]
0000b0  9812              LDR      r0,[sp,#0x48]
0000b2  f7fffffe          BL       __aeabi_fmul
0000b6  4605              MOV      r5,r0
0000b8  4621              MOV      r1,r4
0000ba  f7fffffe          BL       __aeabi_fsub
0000be  4682              MOV      r10,r0
;;;90      	
;;;91      	exInt = exInt + ErrX * KiDef;
0000c0  496e              LDR      r1,|L1.636|
0000c2  4640              MOV      r0,r8
0000c4  f7fffffe          BL       __aeabi_fmul
0000c8  4604              MOV      r4,r0
0000ca  486d              LDR      r0,|L1.640|
0000cc  6801              LDR      r1,[r0,#0]  ; exInt
0000ce  4620              MOV      r0,r4
0000d0  f7fffffe          BL       __aeabi_fadd
0000d4  496a              LDR      r1,|L1.640|
0000d6  6008              STR      r0,[r1,#0]  ; exInt
;;;92       eyInt = eyInt + ErrY * KiDef;
0000d8  4968              LDR      r1,|L1.636|
0000da  4648              MOV      r0,r9
0000dc  f7fffffe          BL       __aeabi_fmul
0000e0  4604              MOV      r4,r0
0000e2  4868              LDR      r0,|L1.644|
0000e4  6801              LDR      r1,[r0,#0]  ; eyInt
0000e6  4620              MOV      r0,r4
0000e8  f7fffffe          BL       __aeabi_fadd
0000ec  4965              LDR      r1,|L1.644|
0000ee  6008              STR      r0,[r1,#0]  ; eyInt
;;;93       ezInt = ezInt + ErrZ * KiDef;
0000f0  4962              LDR      r1,|L1.636|
0000f2  4650              MOV      r0,r10
0000f4  f7fffffe          BL       __aeabi_fmul
0000f8  4604              MOV      r4,r0
0000fa  4863              LDR      r0,|L1.648|
0000fc  6801              LDR      r1,[r0,#0]  ; ezInt
0000fe  4620              MOV      r0,r4
000100  f7fffffe          BL       __aeabi_fadd
000104  4960              LDR      r1,|L1.648|
000106  6008              STR      r0,[r1,#0]  ; ezInt
;;;94     	
;;;95     	// 积分限幅
;;;96     	exInt = data_limit(exInt,0.035,-0.035);
000108  4a60              LDR      r2,|L1.652|
00010a  4961              LDR      r1,|L1.656|
00010c  485c              LDR      r0,|L1.640|
00010e  6800              LDR      r0,[r0,#0]  ; exInt
000110  f7fffffe          BL       data_limit
000114  495a              LDR      r1,|L1.640|
000116  6008              STR      r0,[r1,#0]  ; exInt
;;;97     	eyInt = data_limit(eyInt,0.035,-0.035);
000118  4a5c              LDR      r2,|L1.652|
00011a  495d              LDR      r1,|L1.656|
00011c  4859              LDR      r0,|L1.644|
00011e  6800              LDR      r0,[r0,#0]  ; eyInt
000120  f7fffffe          BL       data_limit
000124  4957              LDR      r1,|L1.644|
000126  6008              STR      r0,[r1,#0]  ; eyInt
;;;98       ezInt = data_limit(ezInt,0.035,-0.035);
000128  4a58              LDR      r2,|L1.652|
00012a  4959              LDR      r1,|L1.656|
00012c  4856              LDR      r0,|L1.648|
00012e  6800              LDR      r0,[r0,#0]  ; ezInt
000130  f7fffffe          BL       data_limit
000134  4954              LDR      r1,|L1.648|
000136  6008              STR      r0,[r1,#0]  ; ezInt
;;;99     	
;;;100      GyrX = sensor.gyro.averag.x * Gyro_Gr + KpDef * VariableParameter(ErrX) * ErrX  +  exInt;
000138  4851              LDR      r0,|L1.640|
00013a  6800              LDR      r0,[r0,#0]  ; exInt
00013c  f7fffffe          BL       __aeabi_f2d
000140  4604              MOV      r4,r0
000142  460d              MOV      r5,r1
000144  4640              MOV      r0,r8
000146  f7fffffe          BL       VariableParameter
00014a  4952              LDR      r1,|L1.660|
00014c  9001              STR      r0,[sp,#4]
00014e  f7fffffe          BL       __aeabi_fmul
000152  4607              MOV      r7,r0
000154  4641              MOV      r1,r8
000156  f7fffffe          BL       __aeabi_fmul
00015a  4606              MOV      r6,r0
00015c  f7fffffe          BL       __aeabi_f2d
000160  e9cd0104          STRD     r0,r1,[sp,#0x10]
000164  4943              LDR      r1,|L1.628|
000166  6bc8              LDR      r0,[r1,#0x3c]
000168  f7fffffe          BL       __aeabi_f2d
00016c  4606              MOV      r6,r0
00016e  4a4a              LDR      r2,|L1.664|
000170  4b4a              LDR      r3,|L1.668|
000172  f7fffffe          BL       __aeabi_dmul
000176  e9cd0102          STRD     r0,r1,[sp,#8]
00017a  e9dd2304          LDRD     r2,r3,[sp,#0x10]
00017e  f7fffffe          BL       __aeabi_dadd
000182  4622              MOV      r2,r4
000184  462b              MOV      r3,r5
000186  e9cd0106          STRD     r0,r1,[sp,#0x18]
00018a  f7fffffe          BL       __aeabi_dadd
00018e  e9cd0108          STRD     r0,r1,[sp,#0x20]
000192  f7fffffe          BL       __aeabi_d2f
000196  4683              MOV      r11,r0
;;;101      GyrY = sensor.gyro.averag.y * Gyro_Gr + KpDef * VariableParameter(ErrY) * ErrY  +  eyInt;
000198  483a              LDR      r0,|L1.644|
00019a  6800              LDR      r0,[r0,#0]  ; eyInt
00019c  f7fffffe          BL       __aeabi_f2d
0001a0  e9cd0106          STRD     r0,r1,[sp,#0x18]
0001a4  4648              MOV      r0,r9
0001a6  f7fffffe          BL       VariableParameter
0001aa  493a              LDR      r1,|L1.660|
0001ac  9001              STR      r0,[sp,#4]
0001ae  f7fffffe          BL       __aeabi_fmul
0001b2  4607              MOV      r7,r0
0001b4  4649              MOV      r1,r9
0001b6  f7fffffe          BL       __aeabi_fmul
0001ba  4606              MOV      r6,r0
0001bc  f7fffffe          BL       __aeabi_f2d
0001c0  4604              MOV      r4,r0
0001c2  460d              MOV      r5,r1
0001c4  492b              LDR      r1,|L1.628|
0001c6  6c08              LDR      r0,[r1,#0x40]
0001c8  f7fffffe          BL       __aeabi_f2d
0001cc  4606              MOV      r6,r0
0001ce  4a32              LDR      r2,|L1.664|
0001d0  4b32              LDR      r3,|L1.668|
0001d2  f7fffffe          BL       __aeabi_dmul
0001d6  4622              MOV      r2,r4
0001d8  462b              MOV      r3,r5
0001da  e9cd0102          STRD     r0,r1,[sp,#8]
0001de  f7fffffe          BL       __aeabi_dadd
0001e2  e9cd0104          STRD     r0,r1,[sp,#0x10]
0001e6  e9dd2306          LDRD     r2,r3,[sp,#0x18]
0001ea  f7fffffe          BL       __aeabi_dadd
0001ee  e9cd0108          STRD     r0,r1,[sp,#0x20]
0001f2  f7fffffe          BL       __aeabi_d2f
0001f6  900f              STR      r0,[sp,#0x3c]
;;;102    	GyrZ = sensor.gyro.averag.z * Gyro_Gr + KpDef * VariableParameter(ErrZ) * ErrZ  +  ezInt;
0001f8  4823              LDR      r0,|L1.648|
0001fa  6800              LDR      r0,[r0,#0]  ; ezInt
0001fc  f7fffffe          BL       __aeabi_f2d
000200  e9cd0106          STRD     r0,r1,[sp,#0x18]
000204  4650              MOV      r0,r10
000206  f7fffffe          BL       VariableParameter
00020a  4922              LDR      r1,|L1.660|
00020c  9001              STR      r0,[sp,#4]
00020e  f7fffffe          BL       __aeabi_fmul
000212  4607              MOV      r7,r0
000214  4651              MOV      r1,r10
000216  f7fffffe          BL       __aeabi_fmul
00021a  4606              MOV      r6,r0
00021c  f7fffffe          BL       __aeabi_f2d
000220  4604              MOV      r4,r0
000222  460d              MOV      r5,r1
000224  4913              LDR      r1,|L1.628|
000226  6c48              LDR      r0,[r1,#0x44]
000228  f7fffffe          BL       __aeabi_f2d
00022c  4606              MOV      r6,r0
00022e  4a1a              LDR      r2,|L1.664|
000230  4b1a              LDR      r3,|L1.668|
000232  f7fffffe          BL       __aeabi_dmul
000236  4622              MOV      r2,r4
000238  462b              MOV      r3,r5
00023a  e9cd0102          STRD     r0,r1,[sp,#8]
00023e  f7fffffe          BL       __aeabi_dadd
000242  e9cd0104          STRD     r0,r1,[sp,#0x10]
000246  e9dd2306          LDRD     r2,r3,[sp,#0x18]
00024a  f7fffffe          BL       __aeabi_dadd
00024e  e9cd0108          STRD     r0,r1,[sp,#0x20]
000252  f7fffffe          BL       __aeabi_d2f
000256  900e              STR      r0,[sp,#0x38]
;;;103    	
;;;104    	
;;;105    	// 一阶龙格库塔法, 更新四元数
;;;106    	Quaternion_RungeKutta(&NumQ, GyrX, GyrY, GyrZ, SampleRateHalf);
000258  4b11              LDR      r3,|L1.672|
00025a  9300              STR      r3,[sp,#0]
00025c  4659              MOV      r1,r11
00025e  4806              LDR      r0,|L1.632|
000260  e9dd320e          LDRD     r3,r2,[sp,#0x38]
000264  f7fffffe          BL       Quaternion_RungeKutta
;;;107    	
;;;108    	// 四元数归一化
;;;109    	Quaternion_Normalize(&NumQ);
000268  4803              LDR      r0,|L1.632|
00026a  f7fffffe          BL       Quaternion_Normalize
;;;110    }
00026e  b013              ADD      sp,sp,#0x4c
000270  e8bd8ff0          POP      {r4-r11,pc}
;;;111    
                          ENDP

                  |L1.628|
                          DCD      sensor
                  |L1.632|
                          DCD      NumQ
                  |L1.636|
                          DCD      0x3a03126f
                  |L1.640|
                          DCD      exInt
                  |L1.644|
                          DCD      eyInt
                  |L1.648|
                          DCD      ezInt
                  |L1.652|
                          DCD      0xbd0f5c29
                  |L1.656|
                          DCD      0x3d0f5c29
                  |L1.660|
                          DCD      0x3f333333
                  |L1.664|
                          DCD      0xa09d99d9
                  |L1.668|
                          DCD      0x3f41c7a8
                  |L1.672|
                          DCD      0x3a83126f

                          AREA ||i.AHRS_Geteuler||, CODE, READONLY, ALIGN=2

                  AHRS_Geteuler PROC
;;;120    /*====================================================================================================*/
;;;121    void AHRS_Geteuler(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;122    {
000004  b08d              SUB      sp,sp,#0x34
;;;123    	fp32 sin_pitch,sin_roll,cos_roll,cos_pitch;
;;;124    	
;;;125    	AHRS_getValues();
000006  f7fffffe          BL       AHRS_getValues
;;;126    	
;;;127    	// 获取四元数
;;;128      AHRS_GetQ(&NumQ);
00000a  4891              LDR      r0,|L2.592|
00000c  f7fffffe          BL       AHRS_GetQ
;;;129    	
;;;130      // 四元数转欧拉角
;;;131    	Quaternion_ToAngE(&NumQ, &AngE);
000010  4990              LDR      r1,|L2.596|
000012  488f              LDR      r0,|L2.592|
000014  f7fffffe          BL       Quaternion_ToAngE
;;;132    	
;;;133      // 计算欧拉角的三角函数值
;;;134      sin_roll  = sin(AngE.Roll);
000018  498e              LDR      r1,|L2.596|
00001a  6848              LDR      r0,[r1,#4]  ; AngE
00001c  f7fffffe          BL       __aeabi_f2d
000020  4606              MOV      r6,r0
000022  f7fffffe          BL       ||sin||
000026  4604              MOV      r4,r0
000028  f7fffffe          BL       __aeabi_d2f
00002c  900b              STR      r0,[sp,#0x2c]
;;;135      sin_pitch = sin(AngE.Pitch);
00002e  4989              LDR      r1,|L2.596|
000030  6808              LDR      r0,[r1,#0]  ; AngE
000032  f7fffffe          BL       __aeabi_f2d
000036  4606              MOV      r6,r0
000038  f7fffffe          BL       ||sin||
00003c  4604              MOV      r4,r0
00003e  f7fffffe          BL       __aeabi_d2f
000042  900c              STR      r0,[sp,#0x30]
;;;136      cos_roll  = cos(AngE.Roll);
000044  4983              LDR      r1,|L2.596|
000046  6848              LDR      r0,[r1,#4]  ; AngE
000048  f7fffffe          BL       __aeabi_f2d
00004c  4606              MOV      r6,r0
00004e  f7fffffe          BL       ||cos||
000052  4604              MOV      r4,r0
000054  f7fffffe          BL       __aeabi_d2f
000058  900a              STR      r0,[sp,#0x28]
;;;137      cos_pitch = cos(AngE.Pitch);
00005a  497e              LDR      r1,|L2.596|
00005c  6808              LDR      r0,[r1,#0]  ; AngE
00005e  f7fffffe          BL       __aeabi_f2d
000062  4606              MOV      r6,r0
000064  f7fffffe          BL       ||cos||
000068  4604              MOV      r4,r0
00006a  f7fffffe          BL       __aeabi_d2f
00006e  9009              STR      r0,[sp,#0x24]
;;;138    	
;;;139    	//  地磁不存在或地磁数据不正常则停用地磁数据
;;;140    	if(!flag.MagIssue && flag.MagExist){
000070  4879              LDR      r0,|L2.600|
000072  78c0              LDRB     r0,[r0,#3]  ; flag
000074  bbf0              CBNZ     r0,|L2.244|
000076  4878              LDR      r0,|L2.600|
000078  7840              LDRB     r0,[r0,#1]  ; flag
00007a  b3d8              CBZ      r0,|L2.244|
;;;141    		// 地磁倾角补偿
;;;142    		fp32 hx = MAG[0]*cos_pitch + MAG[1]*sin_pitch*sin_roll - MAG[2]*cos_roll*sin_pitch; 
00007c  4977              LDR      r1,|L2.604|
00007e  f9b10004          LDRSH    r0,[r1,#4]  ; MAG
000082  f7fffffe          BL       __aeabi_i2f
000086  4607              MOV      r7,r0
000088  990a              LDR      r1,[sp,#0x28]
00008a  f7fffffe          BL       __aeabi_fmul
00008e  4606              MOV      r6,r0
000090  990c              LDR      r1,[sp,#0x30]
000092  f7fffffe          BL       __aeabi_fmul
000096  4604              MOV      r4,r0
000098  4970              LDR      r1,|L2.604|
00009a  f9b10002          LDRSH    r0,[r1,#2]  ; MAG
00009e  f7fffffe          BL       __aeabi_i2f
0000a2  4681              MOV      r9,r0
0000a4  990c              LDR      r1,[sp,#0x30]
0000a6  f7fffffe          BL       __aeabi_fmul
0000aa  4680              MOV      r8,r0
0000ac  990b              LDR      r1,[sp,#0x2c]
0000ae  f7fffffe          BL       __aeabi_fmul
0000b2  4606              MOV      r6,r0
0000b4  4969              LDR      r1,|L2.604|
0000b6  f9b10000          LDRSH    r0,[r1,#0]  ; MAG
0000ba  f7fffffe          BL       __aeabi_i2f
0000be  4680              MOV      r8,r0
0000c0  9909              LDR      r1,[sp,#0x24]
0000c2  f7fffffe          BL       __aeabi_fmul
0000c6  4607              MOV      r7,r0
0000c8  4631              MOV      r1,r6
0000ca  f7fffffe          BL       __aeabi_fadd
0000ce  4605              MOV      r5,r0
0000d0  4621              MOV      r1,r4
0000d2  f7fffffe          BL       __aeabi_fsub
0000d6  9008              STR      r0,[sp,#0x20]
;;;143    		fp32 hy = MAG[1]*cos_roll + MAG[2]*sin_roll;
0000d8  4960              LDR      r1,|L2.604|
0000da  f9b10004          LDRSH    r0,[r1,#4]  ; MAG
0000de  f7fffffe          BL       __aeabi_i2f
0000e2  4606              MOV      r6,r0
0000e4  990b              LDR      r1,[sp,#0x2c]
0000e6  f7fffffe          BL       __aeabi_fmul
0000ea  4604              MOV      r4,r0
0000ec  495b              LDR      r1,|L2.604|
0000ee  f9b10002          LDRSH    r0,[r1,#2]  ; MAG
0000f2  e000              B        |L2.246|
                  |L2.244|
0000f4  e086              B        |L2.516|
                  |L2.246|
0000f6  f7fffffe          BL       __aeabi_i2f
0000fa  4606              MOV      r6,r0
0000fc  990a              LDR      r1,[sp,#0x28]
0000fe  f7fffffe          BL       __aeabi_fmul
000102  4605              MOV      r5,r0
000104  4621              MOV      r1,r4
000106  f7fffffe          BL       __aeabi_fadd
00010a  9007              STR      r0,[sp,#0x1c]
;;;144    		
;;;145    		// 利用地磁解算航向角
;;;146    		fp32 mag_yaw = -Degree(atan2((fp64)hy,(fp64)hx));
00010c  9808              LDR      r0,[sp,#0x20]
00010e  f7fffffe          BL       __aeabi_f2d
000112  4680              MOV      r8,r0
000114  4689              MOV      r9,r1
000116  9807              LDR      r0,[sp,#0x1c]
000118  f7fffffe          BL       __aeabi_f2d
00011c  4606              MOV      r6,r0
00011e  4642              MOV      r2,r8
000120  464b              MOV      r3,r9
000122  f7fffffe          BL       atan2
000126  4604              MOV      r4,r0
000128  f7fffffe          BL       Degree
00012c  f0814100          EOR      r1,r1,#0x80000000
000130  4682              MOV      r10,r0
000132  f7fffffe          BL       __aeabi_d2f
000136  9006              STR      r0,[sp,#0x18]
;;;147    		 
;;;148    		// 陀螺仪积分解算航向角
;;;149    		AngE.Yaw += Degree(sensor.gyro.averag.z * Gyro_Gr * 2 * SampleRateHalf);
000138  4949              LDR      r1,|L2.608|
00013a  6c48              LDR      r0,[r1,#0x44]
00013c  f7fffffe          BL       __aeabi_f2d
000140  4604              MOV      r4,r0
000142  4a48              LDR      r2,|L2.612|
000144  4b48              LDR      r3,|L2.616|
000146  f7fffffe          BL       __aeabi_dmul
00014a  4606              MOV      r6,r0
00014c  2200              MOVS     r2,#0
00014e  f04f4380          MOV      r3,#0x40000000
000152  f7fffffe          BL       __aeabi_dmul
000156  f04f4260          MOV      r2,#0xe0000000
00015a  4b44              LDR      r3,|L2.620|
00015c  e9cd0100          STRD     r0,r1,[sp,#0]
000160  f7fffffe          BL       __aeabi_dmul
000164  4680              MOV      r8,r0
000166  f7fffffe          BL       Degree
00016a  4682              MOV      r10,r0
00016c  468b              MOV      r11,r1
00016e  4939              LDR      r1,|L2.596|
000170  6888              LDR      r0,[r1,#8]  ; AngE
000172  f7fffffe          BL       __aeabi_f2d
000176  4652              MOV      r2,r10
000178  465b              MOV      r3,r11
00017a  e9cd0102          STRD     r0,r1,[sp,#8]
00017e  f7fffffe          BL       __aeabi_dadd
000182  e9cd0104          STRD     r0,r1,[sp,#0x10]
000186  f7fffffe          BL       __aeabi_d2f
00018a  4932              LDR      r1,|L2.596|
00018c  6088              STR      r0,[r1,#8]  ; AngE
;;;150    		
;;;151    		// 地磁解算的航向角与陀螺仪积分解算的航向角进行互补融合 
;;;152    		if((mag_yaw>90 && AngE.Yaw<-90) || (mag_yaw<-90 && AngE.Yaw>90)) 
00018e  4938              LDR      r1,|L2.624|
000190  9806              LDR      r0,[sp,#0x18]
000192  f7fffffe          BL       __aeabi_cfrcmple
000196  d205              BCS      |L2.420|
000198  492e              LDR      r1,|L2.596|
00019a  6888              LDR      r0,[r1,#8]  ; AngE
00019c  4935              LDR      r1,|L2.628|
00019e  f7fffffe          BL       __aeabi_cfcmple
0001a2  d30a              BCC      |L2.442|
                  |L2.420|
0001a4  4933              LDR      r1,|L2.628|
0001a6  9806              LDR      r0,[sp,#0x18]
0001a8  f7fffffe          BL       __aeabi_cfcmple
0001ac  d219              BCS      |L2.482|
0001ae  4929              LDR      r1,|L2.596|
0001b0  6888              LDR      r0,[r1,#8]  ; AngE
0001b2  492f              LDR      r1,|L2.624|
0001b4  f7fffffe          BL       __aeabi_cfrcmple
0001b8  d213              BCS      |L2.482|
                  |L2.442|
;;;153    				AngE.Yaw = -AngE.Yaw * 0.998f + mag_yaw * 0.002f;
0001ba  492f              LDR      r1,|L2.632|
0001bc  9806              LDR      r0,[sp,#0x18]
0001be  f7fffffe          BL       __aeabi_fmul
0001c2  4606              MOV      r6,r0
0001c4  4823              LDR      r0,|L2.596|
0001c6  6880              LDR      r0,[r0,#8]  ; AngE
0001c8  f0804500          EOR      r5,r0,#0x80000000
0001cc  492b              LDR      r1,|L2.636|
0001ce  4628              MOV      r0,r5
0001d0  f7fffffe          BL       __aeabi_fmul
0001d4  4604              MOV      r4,r0
0001d6  4631              MOV      r1,r6
0001d8  f7fffffe          BL       __aeabi_fadd
0001dc  491d              LDR      r1,|L2.596|
0001de  6088              STR      r0,[r1,#8]  ; AngE
0001e0  e00f              B        |L2.514|
                  |L2.482|
;;;154    		else AngE.Yaw = AngE.Yaw * 0.998f + mag_yaw * 0.002f;
0001e2  4925              LDR      r1,|L2.632|
0001e4  9806              LDR      r0,[sp,#0x18]
0001e6  f7fffffe          BL       __aeabi_fmul
0001ea  4604              MOV      r4,r0
0001ec  4919              LDR      r1,|L2.596|
0001ee  6888              LDR      r0,[r1,#8]  ; AngE
0001f0  4922              LDR      r1,|L2.636|
0001f2  f7fffffe          BL       __aeabi_fmul
0001f6  4605              MOV      r5,r0
0001f8  4621              MOV      r1,r4
0001fa  f7fffffe          BL       __aeabi_fadd
0001fe  4915              LDR      r1,|L2.596|
000200  6088              STR      r0,[r1,#8]  ; AngE
                  |L2.514|
;;;155    	}
000202  e00b              B        |L2.540|
                  |L2.516|
;;;156    	else 
;;;157    		AngE.Yaw = Degree(AngE.Yaw);
000204  4913              LDR      r1,|L2.596|
000206  6888              LDR      r0,[r1,#8]  ; AngE
000208  f7fffffe          BL       __aeabi_f2d
00020c  4606              MOV      r6,r0
00020e  f7fffffe          BL       Degree
000212  4604              MOV      r4,r0
000214  f7fffffe          BL       __aeabi_d2f
000218  490e              LDR      r1,|L2.596|
00021a  6088              STR      r0,[r1,#8]  ; AngE
                  |L2.540|
;;;158    		
;;;159    		AngE.Roll = Degree(AngE.Roll);  // roll
00021c  490d              LDR      r1,|L2.596|
00021e  6848              LDR      r0,[r1,#4]  ; AngE
000220  f7fffffe          BL       __aeabi_f2d
000224  4606              MOV      r6,r0
000226  f7fffffe          BL       Degree
00022a  4604              MOV      r4,r0
00022c  f7fffffe          BL       __aeabi_d2f
000230  4908              LDR      r1,|L2.596|
000232  6048              STR      r0,[r1,#4]  ; AngE
;;;160    		AngE.Pitch = Degree(AngE.Pitch); // pitch
000234  6808              LDR      r0,[r1,#0]  ; AngE
000236  f7fffffe          BL       __aeabi_f2d
00023a  4604              MOV      r4,r0
00023c  f7fffffe          BL       Degree
000240  4606              MOV      r6,r0
000242  f7fffffe          BL       __aeabi_d2f
000246  4903              LDR      r1,|L2.596|
000248  6008              STR      r0,[r1,#0]  ; AngE
;;;161    }
00024a  b00d              ADD      sp,sp,#0x34
00024c  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L2.592|
                          DCD      NumQ
                  |L2.596|
                          DCD      AngE
                  |L2.600|
                          DCD      flag
                  |L2.604|
                          DCD      MAG
                  |L2.608|
                          DCD      sensor
                  |L2.612|
                          DCD      0xa09d99d9
                  |L2.616|
                          DCD      0x3f41c7a8
                  |L2.620|
                          DCD      0x3f50624d
                  |L2.624|
                          DCD      0x42b40000
                  |L2.628|
                          DCD      0xc2b40000
                  |L2.632|
                          DCD      0x3b03126f
                  |L2.636|
                          DCD      0x3f7f7cee

                          AREA ||i.AHRS_getValues||, CODE, READONLY, ALIGN=2

                  AHRS_getValues PROC
;;;39     
;;;40     void AHRS_getValues(void)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;41     {
;;;42     	static float x,y,z;
;;;43     	
;;;44     	MPU6050_Dataanl();
000004  f7fffffe          BL       MPU6050_Dataanl
;;;45     	
;;;46     	HMC5883lRead(MAG);
000008  4839              LDR      r0,|L3.240|
00000a  f7fffffe          BL       HMC5883lRead
;;;47     	
;;;48     	// 加速度计IIR滤波
;;;49     	sensor.acc.averag.x = IIR_I_Filter(sensor.acc.origin.x, InPut_IIR[0], OutPut_IIR[0], b_IIR, IIR_ORDER+1, a_IIR, IIR_ORDER+1);
00000e  4939              LDR      r1,|L3.244|
000010  f9b10000          LDRSH    r0,[r1,#0]  ; sensor
000014  f7fffffe          BL       __aeabi_i2d
000018  4606              MOV      r6,r0
00001a  2305              MOVS     r3,#5
00001c  4a36              LDR      r2,|L3.248|
00001e  4837              LDR      r0,|L3.252|
000020  e9cd3201          STRD     r3,r2,[sp,#4]
000024  9303              STR      r3,[sp,#0xc]
000026  9000              STR      r0,[sp,#0]
000028  4b35              LDR      r3,|L3.256|
00002a  4a36              LDR      r2,|L3.260|
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       IIR_I_Filter
000032  4604              MOV      r4,r0
000034  f7fffffe          BL       __aeabi_d2f
000038  492e              LDR      r1,|L3.244|
00003a  6088              STR      r0,[r1,#8]  ; sensor
;;;50     	sensor.acc.averag.y = IIR_I_Filter(sensor.acc.origin.y, InPut_IIR[1], OutPut_IIR[1], b_IIR, IIR_ORDER+1, a_IIR, IIR_ORDER+1);
00003c  f9b10002          LDRSH    r0,[r1,#2]  ; sensor
000040  f7fffffe          BL       __aeabi_i2d
000044  4606              MOV      r6,r0
000046  2305              MOVS     r3,#5
000048  4a2b              LDR      r2,|L3.248|
00004a  482c              LDR      r0,|L3.252|
00004c  e9cd3201          STRD     r3,r2,[sp,#4]
000050  9303              STR      r3,[sp,#0xc]
000052  9000              STR      r0,[sp,#0]
000054  4b2a              LDR      r3,|L3.256|
000056  3328              ADDS     r3,r3,#0x28
000058  4a2a              LDR      r2,|L3.260|
00005a  3228              ADDS     r2,r2,#0x28
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       IIR_I_Filter
000062  4604              MOV      r4,r0
000064  f7fffffe          BL       __aeabi_d2f
000068  4922              LDR      r1,|L3.244|
00006a  60c8              STR      r0,[r1,#0xc]
;;;51     	sensor.acc.averag.z = IIR_I_Filter(sensor.acc.origin.z, InPut_IIR[2], OutPut_IIR[2], b_IIR, IIR_ORDER+1, a_IIR, IIR_ORDER+1);
00006c  f9b10004          LDRSH    r0,[r1,#4]  ; sensor
000070  f7fffffe          BL       __aeabi_i2d
000074  4604              MOV      r4,r0
000076  2305              MOVS     r3,#5
000078  4a1f              LDR      r2,|L3.248|
00007a  4820              LDR      r0,|L3.252|
00007c  e9cd3201          STRD     r3,r2,[sp,#4]
000080  9303              STR      r3,[sp,#0xc]
000082  9000              STR      r0,[sp,#0]
000084  4b1e              LDR      r3,|L3.256|
000086  3350              ADDS     r3,r3,#0x50
000088  4a1e              LDR      r2,|L3.260|
00008a  3250              ADDS     r2,r2,#0x50
00008c  4620              MOV      r0,r4
00008e  f7fffffe          BL       IIR_I_Filter
000092  4606              MOV      r6,r0
000094  f7fffffe          BL       __aeabi_d2f
000098  4916              LDR      r1,|L3.244|
00009a  6108              STR      r0,[r1,#0x10]
;;;52     	
;;;53     	// 陀螺仪一阶低通滤波
;;;54      	sensor.gyro.averag.x = LPF_1st(x,sensor.gyro.radian.x,0.386f);	x = sensor.gyro.averag.x;
00009c  4608              MOV      r0,r1
00009e  4a1a              LDR      r2,|L3.264|
0000a0  6dc1              LDR      r1,[r0,#0x5c]
0000a2  481a              LDR      r0,|L3.268|
0000a4  6800              LDR      r0,[r0,#0]  ; x
0000a6  f7fffffe          BL       LPF_1st
0000aa  4912              LDR      r1,|L3.244|
0000ac  63c8              STR      r0,[r1,#0x3c]
0000ae  4608              MOV      r0,r1
0000b0  6bc0              LDR      r0,[r0,#0x3c]
0000b2  4916              LDR      r1,|L3.268|
0000b4  6008              STR      r0,[r1,#0]  ; x
;;;55      	sensor.gyro.averag.y = LPF_1st(y,sensor.gyro.radian.y,0.386f);	y = sensor.gyro.averag.y;
0000b6  480f              LDR      r0,|L3.244|
0000b8  4a13              LDR      r2,|L3.264|
0000ba  6e01              LDR      r1,[r0,#0x60]
0000bc  4814              LDR      r0,|L3.272|
0000be  6800              LDR      r0,[r0,#0]  ; y
0000c0  f7fffffe          BL       LPF_1st
0000c4  4601              MOV      r1,r0
0000c6  480b              LDR      r0,|L3.244|
0000c8  6401              STR      r1,[r0,#0x40]
0000ca  6c00              LDR      r0,[r0,#0x40]
0000cc  4910              LDR      r1,|L3.272|
0000ce  6008              STR      r0,[r1,#0]  ; y
;;;56      	sensor.gyro.averag.z = LPF_1st(z,sensor.gyro.radian.z,0.386f);	z = sensor.gyro.averag.z;
0000d0  4808              LDR      r0,|L3.244|
0000d2  4a0d              LDR      r2,|L3.264|
0000d4  6e41              LDR      r1,[r0,#0x64]
0000d6  480f              LDR      r0,|L3.276|
0000d8  6800              LDR      r0,[r0,#0]  ; z
0000da  f7fffffe          BL       LPF_1st
0000de  4601              MOV      r1,r0
0000e0  4804              LDR      r0,|L3.244|
0000e2  6441              STR      r1,[r0,#0x44]
0000e4  6c40              LDR      r0,[r0,#0x44]
0000e6  490b              LDR      r1,|L3.276|
0000e8  6008              STR      r0,[r1,#0]  ; z
;;;57     }
0000ea  e8bd81ff          POP      {r0-r8,pc}
;;;58     
                          ENDP

0000ee  0000              DCW      0x0000
                  |L3.240|
                          DCD      MAG
                  |L3.244|
                          DCD      sensor
                  |L3.248|
                          DCD      a_IIR
                  |L3.252|
                          DCD      b_IIR
                  |L3.256|
                          DCD      OutPut_IIR
                  |L3.260|
                          DCD      InPut_IIR
                  |L3.264|
                          DCD      0x3ec5a1cb
                  |L3.268|
                          DCD      x
                  |L3.272|
                          DCD      y
                  |L3.276|
                          DCD      z

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  InPut_IIR
                          %        120
                  OutPut_IIR
                          %        120
                  AngE
                          %        12

                          AREA ||.data||, DATA, ALIGN=3

                  b_IIR
000000  e0000000          DCFD     0x3f4a36e2e0000000 ; 0.00079999997979030013
000004  3f4a36e2
000008  e0000000          DCFD     0x3f6a36e2e0000000 ; 0.0031999999191612005
00000c  3f6a36e2
000010  40000000          DCFD     0x3f73a92a40000000 ; 0.0048000002279877663
000014  3f73a92a
000018  e0000000          DCFD     0x3f6a36e2e0000000 ; 0.0031999999191612005
00001c  3f6a36e2
000020  e0000000          DCFD     0x3f4a36e2e0000000 ; 0.00079999997979030013
000024  3f4a36e2
                  a_IIR
000028  00000000          DCFD     0x3ff0000000000000 ; 1
00002c  3ff00000
000030  80000000          DCFD     0xc008240b80000000 ; -3.0176000595092773
000034  c008240b
000038  e0000000          DCFD     0x400c0ebee0000000 ; 3.5072000026702881
00003c  400c0ebe
000040  00000000          DCFD     0xbffd8fc500000000 ; -1.847599983215332
000044  bffd8fc5
000048  e0000000          DCFD     0x3fd7bb2fe0000000 ; 0.37079998850822449
00004c  3fd7bb2f
                  NumQ
000050  3f800000          DCFS     0x3f800000 ; 1
000054  00000000          DCFS     0x00000000 ; 0
000058  00000000          DCFS     0x00000000 ; 0
00005c  00000000          DCFS     0x00000000 ; 0
                  x
                          DCD      0x00000000
                  y
                          DCD      0x00000000
                  z
                          DCD      0x00000000
                  exInt
00006c  00000000          DCFS     0x00000000 ; 0
                  eyInt
000070  00000000          DCFS     0x00000000 ; 0
                  ezInt
000074  00000000          DCFS     0x00000000 ; 0
                  MAG
                          DCD      0x00000000
00007c  0000              DCB      0x00,0x00
